/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/
/* The following code was generated by JFlex 1.3.5 on 5/1/06 12:00 PM */

package org.eclipse.php.core.documentModel.parser;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 18:03 13/08/06 from the specification file
 * <tt>file:/C:/Java/StudioEclipse/parserUtils/highlighting/PhpLexer4.jflex</tt>
 */
public class PhpLexer4 extends PhpLexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ST_PHP_LINE_COMMENT = 20;
  final public static int ST_PHP_DOUBLE_QUOTES = 4;
  final public static int ST_PHP_COMMENT = 16;
  final public static int ST_PHP_BACKQUOTE = 8;
  final public static int ST_PHP_DOC_COMMENT = 18;
  final public static int YYINITIAL = 0;
  final public static int ST_PHP_IN_SCRIPTING = 2;
  final public static int ST_PHP_LOOKING_FOR_PROPERTY = 14;
  final public static int ST_PHP_HEREDOC = 12;
  final public static int ST_PHP_SINGLE_QUOTE = 6;
  final public static int ST_PHP_HIGHLIGHTING_ERROR = 22;
  final public static int ST_PHP_QUOTES_AFTER_VARIABLE = 10;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  7,  8,  8, 
     9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\12\1\20\2\0\1\11\22\0\1\12\1\24\1\73\1\70"+
    "\1\67\1\30\1\31\1\17\1\57\1\61\1\26\1\23\1\13\1\4"+
    "\1\2\1\27\1\5\7\76\2\1\1\55\1\14\1\25\1\21\1\22"+
    "\1\71\1\72\1\36\1\7\1\45\1\40\1\3\1\43\1\60\1\52"+
    "\1\41\1\63\1\53\1\46\1\65\1\37\1\34\1\54\1\64\1\35"+
    "\1\50\1\42\1\44\1\56\1\51\1\6\1\62\1\10\1\16\1\74"+
    "\1\16\1\33\1\47\1\75\1\36\1\7\1\45\1\40\1\3\1\43"+
    "\1\60\1\52\1\41\1\63\1\53\1\46\1\65\1\37\1\34\1\54"+
    "\1\64\1\35\1\50\1\42\1\44\1\56\1\51\1\6\1\62\1\10"+
    "\1\66\1\32\1\15\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    63,   126,   189,   252,   315,   378,   441,   504,   567, 
      630,   693,   756,     0,   819,   882,   945,  1008,  1071,  1134, 
     1197,  1260,  1323,     0,     0,     0,  1386,  1449,  1512,  1575, 
     1638,  1701,  1764,  1827,  1890,  1953,  2016,  2079,  2142,  2205, 
     2268,  2331,  2394,  2457,  2520,  2583,  2646,  2709,  2772,  2835, 
     2898,  2961,  3024,  3087,  3150,  3213,     0,  3276,     0,  3339, 
     3402,     0,     0,  3465,  3528,  3591,  3654,  3717,  3780,     0, 
     3843,  3906,  3969,  4032,  4095,     0,  4158,  3717,  4221,  4284, 
     3843,  4347,     0,  4410,  4473,  4536,     0,  4599,  4662,  4725, 
     4788,     0,     0,  4851,  3339,     0,  4914,  4977,  5040,     0, 
     5103,  5166,  5229,  5292,  5355,  5418,     0,  5481,  5544,  5607, 
     1386,  5670,  1764,  5733,  5796,  5859,  1260,  5922,  5985,  6048, 
     6111,  1260,  6174,  6237,  1260,  6300,  6363,  1260,  6426,  6489, 
     6552,  6615,  6678,  6741,  6804,  6867,  6930,  6993,  7056,  7119, 
     7182,  7245,  7308,  7371,  7434,  7497,  7560,     0,  7623,  7686, 
     3150,  7749,  7812,  7875,  7938,  8001,  8064,  8127,  8190,  8253, 
     8316,  8379,  3402,  8442,  8505,     0,     0,  8568,     0,  8631, 
     8694,  8757,     0,  8820,  8883,     0,     0,     0,  8946,  9009, 
     9072,  9135,  9198,  9261,  9324,  9387,  9450,  9513,  9576,  9639, 
     9702,  9765,  9828,  9891,  9954, 10017, 10017, 10080, 10143, 10206, 
    10269, 10332, 10395, 10458,  5481, 10521, 10584, 10647, 10710, 10773, 
    10836, 10899,  1260, 10962, 11025,  1260, 11088, 11151, 11214, 11277, 
    11340, 11403, 11466, 11529,  1260, 11592, 11655, 11718, 11781, 11844, 
    11907, 11970, 12033, 12096, 12159, 12222, 12285, 12348,  1260, 12411, 
    12474, 12537, 12600, 12663, 12726, 12789, 12852, 12915, 12978,  8505, 
    13041, 13104, 13167, 13230, 13293, 13356, 13419, 13482, 13545, 13608, 
    13671, 13734, 13797, 13860, 13923, 13986, 14049, 14112, 14175, 14238, 
    14301, 14364, 14427, 14490, 14553, 14616, 14679, 14742,  1260, 14805, 
    14868, 14931, 14994, 15057, 15120,  1260, 15183,  1260, 15246, 15309, 
    15372, 10647, 15435, 15498, 15561, 15624, 15687, 15750, 15813, 15876, 
     1260, 15939,  1260, 16002, 16065, 16128, 16191, 16254,  1260, 16317, 
    16380,  1260, 16443, 16506, 16569, 16632, 16695, 16758, 16821, 16884, 
    16947, 17010, 17073, 17136, 17199, 17262, 17325, 17388, 17451, 17514, 
    17577, 17640, 17703, 17766, 17829, 17892, 17955, 18018, 18081, 18144, 
    18207, 18270, 18333, 18396, 18459, 18522, 18585, 18648, 18711, 18774, 
    18837, 18900,     0, 18963, 19026, 19089, 19152, 19215, 19278,     0, 
    19341, 19404, 19467, 19530,  1260, 19593, 19656, 19719, 19782,  1260, 
     1260, 19845,     0, 19908, 19971,  1260, 20034, 20097, 20160,  1260, 
    20223,  1260, 20286,  1260, 20349,  1260, 20412,  1260, 20475, 20538, 
    20601, 20664, 20727, 20790,  1260,  1260, 20853, 20916, 20979, 21042, 
    21105, 21168, 21231,     0, 21294, 21357, 21420, 21483, 21546, 21609, 
    21672, 21735, 21798,     0,     0, 21861, 21924, 21987,     0, 22050, 
    22113, 22176, 22239,     0, 22302, 22365,     0, 22428, 22491, 22554, 
    22617, 22680, 22743, 22806, 22869, 22932, 22995, 23058, 23121, 23184, 
    23247,  1260,  1260, 23310, 23373, 23436, 23499, 23562, 23625, 23688, 
    23751, 23814, 23877, 23940, 24003,  1260,  1260,  1260, 24066, 24129, 
    24192, 24255,  1260, 24318, 24381, 24444, 24507, 24570, 24633, 24696, 
    24759, 24822, 24885, 24948,     0, 25011, 25074, 25137, 25200,     0, 
    25263, 25326,     0, 25389, 25452, 25515,     0,  1260, 25578, 25641, 
    25704, 25767, 25830,  1260,  1260, 25893,  1260, 25956, 26019, 26082, 
    26145, 26208, 26271, 26334, 26397, 26460, 26523, 26586,     0, 26649, 
        0,     0, 26712, 26775,     0, 26838,     0, 26901, 26964, 27027, 
    27090, 27153, 27216, 27279, 27342,     0, 27405, 27468, 27531,  1260, 
    27594, 27657,  1260,  1260, 27720,  1260, 27783, 27846,  1260,     0, 
    27909, 27972, 28035, 28098, 28161, 28224, 28287, 28350,     0, 28413, 
    28476,     0,     0, 28539, 28602,  1260, 28665, 28728,  1260, 28791, 
     1260, 28854,     0, 28917,     0,     0, 28980, 29043,     0, 29106, 
    29169,  1260,  1260, 29232, 29295, 29358,     0, 29421, 29484,     0, 
        0, 29547, 29610, 29673, 29736,     0,     0,     0,  1260,  1260, 
     1260
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\77\0\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\27\1\30\1\31\1\32\1\30\1\33"+
    "\1\27\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\41\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\2\26\1\64\1\65\1\66\1\67\1\70"+
    "\1\30\4\26\1\71\1\72\1\73\1\74\1\30\1\75"+
    "\1\16\1\76\1\17\1\77\1\100\1\101\1\102\1\101"+
    "\1\103\3\102\4\101\2\77\15\101\21\102\1\101\1\102"+
    "\1\101\1\102\1\101\4\102\1\104\1\105\3\101\1\106"+
    "\1\107\1\110\1\100\17\111\1\106\54\111\1\112\2\111"+
    "\1\77\1\100\1\101\1\102\1\101\1\103\3\102\4\101"+
    "\2\77\15\101\21\102\1\101\1\102\1\101\1\102\1\101"+
    "\4\102\1\104\1\105\3\101\1\113\1\107\1\106\1\100"+
    "\4\114\1\115\61\114\1\116\10\114\1\16\1\100\1\101"+
    "\1\102\1\101\1\103\3\102\4\101\2\77\1\117\14\101"+
    "\21\102\1\101\1\102\1\101\1\102\1\101\4\102\1\104"+
    "\1\105\3\101\1\120\1\121\1\120\1\100\1\16\1\100"+
    "\1\101\1\122\1\101\1\103\3\122\4\101\2\77\1\117"+
    "\14\101\21\122\1\101\1\122\1\101\1\122\1\101\4\122"+
    "\1\104\1\105\3\101\1\120\1\121\1\120\1\100\3\123"+
    "\1\124\2\123\3\124\23\123\21\124\1\123\1\124\1\123"+
    "\1\124\1\123\4\124\11\123\26\125\1\126\50\125\26\127"+
    "\1\130\43\127\1\131\4\127\11\132\1\133\6\132\1\134"+
    "\1\132\1\135\5\132\1\136\40\132\1\137\5\132\11\140"+
    "\2\141\5\140\1\141\56\140\1\0\1\17\1\142\1\143"+
    "\1\0\1\17\70\0\1\17\1\0\1\142\3\0\1\142"+
    "\13\0\1\144\54\0\1\142\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\145\2\26\23\0\3\26\1\146\5\26"+
    "\1\147\1\150\6\26\1\0\1\151\1\0\1\26\1\0"+
    "\3\26\1\152\10\0\1\26\4\0\1\144\14\0\1\144"+
    "\1\153\55\0\1\17\1\142\1\143\1\0\1\17\1\154"+
    "\67\0\1\17\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\155\20\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\1\156\17\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\11\0\2\27\5\0"+
    "\1\27\56\0\17\157\1\77\54\157\1\160\2\157\21\0"+
    "\1\161\1\144\75\0\1\144\1\161\75\0\1\144\1\0"+
    "\1\144\74\0\1\161\76\0\2\144\2\0\1\162\72\0"+
    "\1\144\76\0\1\144\4\0\1\163\1\73\70\0\1\144"+
    "\1\164\75\0\1\144\7\0\1\144\66\0\1\144\10\0"+
    "\1\144\45\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\1\165\10\26\1\166\6\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\167\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\1\170\1\26\1\171"+
    "\10\26\1\172\4\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\173\1\0"+
    "\4\26\23\0\21\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\174\1\0"+
    "\4\26\23\0\1\175\4\26\1\176\13\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\3\26\1\177\3\26"+
    "\1\200\4\26\1\201\4\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\1\202\17\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\203\1\204\1\205"+
    "\5\26\1\206\10\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\3\26\1\207\10\26\1\210\4\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\211\1\26"+
    "\1\212\4\26\1\213\2\26\1\214\6\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\5\26\1\215\13\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\13\26"+
    "\1\216\5\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\217\6\26\1\220\3\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\16\26\1\221\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\1\222\1\223\16\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\55\0\1\224\22\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\2\26\1\225\16\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\7\0"+
    "\1\226\2\0\1\227\21\0\1\230\1\231\1\232\1\0"+
    "\1\233\1\234\1\0\1\235\1\236\3\0\1\237\27\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\12\26\1\240"+
    "\6\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\3\0\1\241\2\0\3\241\23\0\21\241\1\0"+
    "\1\241\1\0\1\241\1\0\4\241\33\0\1\242\54\0"+
    "\67\243\1\0\3\243\1\77\1\244\2\243\1\0\1\100"+
    "\3\0\1\100\70\0\1\100\2\0\1\101\1\0\1\101"+
    "\4\0\4\101\2\0\15\101\21\0\1\101\1\0\1\101"+
    "\1\0\1\101\6\0\3\101\5\0\1\102\1\0\1\102"+
    "\1\0\4\102\23\0\21\102\1\0\1\102\1\0\1\102"+
    "\1\0\4\102\10\0\1\102\1\0\1\100\3\0\1\100"+
    "\1\245\67\0\1\100\67\0\1\246\7\0\3\247\1\250"+
    "\2\247\3\250\23\247\21\250\1\247\1\250\1\247\1\250"+
    "\1\247\4\250\1\251\10\247\5\77\1\252\1\253\67\77"+
    "\1\252\75\0\1\110\1\0\17\111\1\0\54\111\1\254"+
    "\21\111\1\77\54\111\1\77\2\111\73\0\1\113\25\0"+
    "\1\255\56\0\1\101\1\0\1\101\4\0\4\101\2\0"+
    "\1\117\14\101\21\0\1\101\1\0\1\101\1\0\1\101"+
    "\6\0\3\101\1\120\1\0\1\120\20\0\1\120\53\0"+
    "\1\120\1\0\1\120\2\0\1\122\1\0\1\122\1\0"+
    "\4\122\1\256\2\0\1\257\3\0\1\260\13\0\21\122"+
    "\1\0\1\122\1\0\1\122\1\0\4\122\10\0\1\122"+
    "\1\0\1\124\1\0\1\124\1\0\4\124\23\0\21\124"+
    "\1\0\1\124\1\0\1\124\1\0\4\124\10\0\1\124"+
    "\26\125\1\0\50\125\27\0\1\261\76\0\1\262\52\0"+
    "\1\263\31\0\1\264\1\265\1\266\1\267\1\270\1\271"+
    "\1\272\1\273\1\274\1\275\1\0\1\276\3\0\1\277"+
    "\1\0\1\300\1\0\1\301\4\0\1\302\11\0\11\132"+
    "\1\0\6\132\1\0\1\132\1\0\5\132\1\0\40\132"+
    "\1\0\5\132\20\0\1\134\100\0\1\303\65\0\2\141"+
    "\5\0\1\141\57\0\1\142\1\0\1\143\1\0\1\142"+
    "\70\0\1\142\1\0\1\304\2\0\1\305\1\304\15\0"+
    "\1\305\52\0\1\304\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\5\26\1\306\1\307\12\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\4\26\1\310\14\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\16\26"+
    "\1\311\2\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\14\26\1\312\4\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\2\26\1\313\16\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\20\26\1\314\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\315\1\0\1\315\1\0\1\315\1\0\1\315\26\0"+
    "\1\315\1\0\1\315\2\0\1\315\1\0\1\315\30\0"+
    "\1\315\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\1\165\17\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\316\1\0"+
    "\4\26\23\0\21\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\20\157\1\0\56\157\21\0\1\144"+
    "\3\0\1\317\77\0\1\320\61\0\2\164\5\0\1\164"+
    "\57\0\1\26\1\0\1\26\1\0\4\26\23\0\4\26"+
    "\1\321\14\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\322\12\26\1\0\1\26\1\0\1\26"+
    "\1\0\2\26\1\323\1\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\1\324\17\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\4\26"+
    "\1\165\14\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\15\26\1\325\3\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\7\26\1\326\1\26\1\327\7\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\330\1\0\4\26\23\0\21\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\11\26"+
    "\1\331\7\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\14\26\1\332\4\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\10\26\1\333\10\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\1\334\17\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\335"+
    "\20\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\12\26\1\336\6\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\3\26\1\337\15\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\14\26\1\340\4\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\341\1\0\4\26\23\0\21\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\3\26\1\342"+
    "\15\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\14\26\1\343\4\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\10\26\1\344\10\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\2\26\1\345\16\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\14\26\1\346"+
    "\4\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\7\26\1\347\1\26\1\350\1\351\6\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\2\26\1\352\16\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\5\26"+
    "\1\353\13\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\5\26\1\354\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\5\26\1\355\13\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\1\356\17\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\1\357\17\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\34\0\1\360\51\0\1\361\72\0\1\362"+
    "\130\0\1\363\75\0\1\364\101\0\1\365\105\0\1\366"+
    "\67\0\1\367\101\0\1\370\35\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\371\20\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\241\1\0"+
    "\1\241\1\0\4\241\23\0\21\241\1\0\1\241\1\0"+
    "\1\241\1\0\4\241\10\0\1\241\11\0\2\242\5\0"+
    "\1\242\56\0\20\243\1\0\56\243\1\0\1\372\1\0"+
    "\1\372\1\0\1\372\1\0\1\372\26\0\1\372\1\0"+
    "\1\372\2\0\1\372\1\0\1\372\30\0\1\372\1\0"+
    "\1\250\1\0\1\250\1\0\4\250\23\0\21\250\1\0"+
    "\1\250\1\0\1\250\1\0\4\250\10\0\1\250\5\0"+
    "\1\373\70\0\1\373\1\0\1\374\1\0\1\374\1\0"+
    "\1\374\1\0\1\374\26\0\1\374\1\0\1\374\2\0"+
    "\1\374\1\0\1\374\30\0\1\374\17\111\1\0\54\111"+
    "\1\0\2\111\20\0\1\260\67\0\1\256\6\0\1\260"+
    "\64\0\1\375\73\0\1\376\102\0\1\377\34\0\1\u0100"+
    "\1\u0101\67\0\1\u0102\43\0\1\u0103\132\0\1\u0104\20\0"+
    "\1\u0105\52\0\1\u0106\7\0\1\u0107\5\0\1\u0108\65\0"+
    "\1\u0109\105\0\1\u010a\62\0\1\u010b\1\0\1\u010c\101\0"+
    "\1\u010d\40\0\1\u010e\35\0\1\u010f\1\u0110\1\0\1\u0111"+
    "\70\0\1\u0112\43\0\1\u0113\32\0\1\u0114\106\0\1\u0115"+
    "\66\0\1\u0116\51\0\2\303\5\0\1\303\57\0\1\304"+
    "\3\0\1\304\70\0\1\304\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\6\26\1\u0117\12\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\u0118\1\0\4\26\23\0\21\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\4\26\1\u0119\1\u011a"+
    "\1\26\1\u011b\4\26\1\u011c\1\u011d\3\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\u011e\20\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\u011f\1\0\4\26\23\0\21\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\12\26\1\u0120"+
    "\6\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\6\26\1\u0121\12\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\2\26\1\u0122\16\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\3\0\1\u0123\2\0"+
    "\3\u0123\1\0\1\317\21\0\21\u0123\1\0\1\u0123\1\0"+
    "\1\u0123\1\0\4\u0123\22\0\2\u0124\5\0\1\u0124\57\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\13\26\1\u0125"+
    "\5\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\10\26\1\u0126\10\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\10\26\1\u0127\10\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\2\26\1\u0128\16\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\2\26\1\u0129"+
    "\16\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\12\26\1\u012a\6\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\12\26\1\u012b\6\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u012c\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u012d\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u012e\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\1\u012f\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\14\26\1\u0130\4\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\11\26"+
    "\1\u0131\7\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u0132\1\0\4\26"+
    "\23\0\21\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u0133\5\26\1\u0134\4\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\u0135\1\0\4\26\23\0\21\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\3\26\1\u0136\15\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\14\26"+
    "\1\u0137\4\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u0138\12\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\5\26\1\u0139\2\26\1\u013a\10\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\12\26"+
    "\1\u013b\6\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\5\26\1\u013c\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\6\26\1\u013d\12\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\6\26\1\u013e\12\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\12\26"+
    "\1\u013f\6\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\3\26\1\u0140\15\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\u0141"+
    "\1\0\4\26\23\0\21\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\34\0\1\u0142\125\0\1\u0143"+
    "\51\0\1\u0144\75\0\1\u0145\105\0\1\u0146\74\0\1\u0147"+
    "\70\0\1\u0148\112\0\1\u0149\63\0\1\u014a\42\0\1\26"+
    "\1\0\1\26\1\0\2\26\1\u014b\1\26\23\0\21\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\5\0\1\77\70\0\1\77\1\0\1\77\1\0\1\77"+
    "\1\0\1\77\1\0\1\77\26\0\1\77\1\0\1\77"+
    "\2\0\1\77\1\0\1\77\30\0\1\77\36\0\1\u014c"+
    "\6\0\1\u014d\73\0\1\u014e\104\0\1\u014f\70\0\1\u0150"+
    "\101\0\1\u0151\116\0\1\u0152\61\0\1\u0153\3\0\1\u0154"+
    "\64\0\1\u0155\73\0\1\u0156\77\0\1\u0157\100\0\1\u0158"+
    "\71\0\1\u0159\100\0\1\u015a\6\0\1\u015b\33\0\1\u015c"+
    "\147\0\1\u015d\64\0\1\u015e\73\0\1\u015f\5\0\1\u0160"+
    "\34\0\1\u0161\132\0\1\u0162\75\0\1\u0163\47\0\1\u0164"+
    "\124\0\1\u0165\7\0\1\u0166\66\0\1\u0167\76\0\1\u0168"+
    "\75\0\1\u0169\122\0\1\u016a\17\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\3\26\1\u016b\15\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\u016c\1\0\4\26\23\0\21\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\7\26\1\u016d\11\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\u016e"+
    "\20\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\15\26\1\u016f\3\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\16\26\1\u0170\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\5\26\1\u0171\13\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\21\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\u0172\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\17\26"+
    "\1\u0173\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\u0123\1\0\1\u0123\1\0\4\u0123"+
    "\1\u0174\6\0\1\u0175\13\0\21\u0123\1\0\1\u0123\1\0"+
    "\1\u0123\1\0\4\u0123\10\0\1\u0123\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\7\26\1\213\11\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\26\1\u0176"+
    "\17\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\5\26\1\u0177\13\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\21\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\u0178\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\10\26\1\u0179\10\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\2\26\1\u017a\16\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\10\26"+
    "\1\u017b\10\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u017c\12\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\2\26\1\u017d\16\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\u017e\1\0\4\26\23\0\21\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\6\26\1\u017f\12\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\6\26"+
    "\1\u0180\12\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\5\26\1\u0181\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\6\26\1\u0182\12\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\11\26\1\u0183\7\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\14\26"+
    "\1\u0184\4\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\12\26\1\u0185\6\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\3\26\1\u0186\15\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\2\26\1\u0187\16\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\3\26"+
    "\1\u0188\15\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\5\26\1\u0189\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\11\26\1\u018a\7\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\u018b\1\0\4\26\23\0\21\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\6\26\1\u018c\12\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\3\26"+
    "\1\u018d\15\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\46\0\1\u018e\33\0\1\u018f\141\0\1\u0190"+
    "\66\0\1\u0191\47\0\1\u0192\72\0\1\u0193\6\0\1\u0190"+
    "\46\0\1\u0194\53\0\1\u0195\43\0\1\u0195\134\0\1\u0196"+
    "\36\0\1\26\1\0\1\26\1\0\4\26\23\0\2\26"+
    "\1\u0197\16\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\65\0\1\u0198\14\0\1\u0199\137\0\1\u019a"+
    "\74\0\1\u019b\106\0\1\u019c\27\0\1\u019d\76\0\1\u019e"+
    "\140\0\1\u019f\66\0\1\u01a0\44\0\1\u01a1\127\0\1\u01a2"+
    "\76\0\1\u01a3\76\0\1\u01a4\76\0\1\u01a5\100\0\1\u01a6"+
    "\43\0\1\u01a7\143\0\1\u01a8\110\0\1\u01a9\17\0\1\u01aa"+
    "\146\0\1\u01ab\26\0\1\u01ac\140\0\1\u01ad\73\0\1\u01ae"+
    "\110\0\1\u01af\60\0\1\u01b0\113\0\1\u01b1\73\0\1\u01b2"+
    "\35\0\1\u01b3\130\0\1\u01b4\36\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\4\26\1\u01b5\14\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\11\26\1\u01b6\7\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\1\u01b7\17\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\5\26\1\u01b8\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\5\26\1\u01b9\13\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\7\26\1\u01ba\11\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\20\0\1\u0175\57\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\3\26\1\u01bb\15\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\1\u01bc\17\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\12\26\1\u01bd\6\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\1\u01be\17\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\4\26\1\u01bf\14\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\11\26\1\u01c0\7\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\5\26\1\u01c1\13\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\3\26"+
    "\1\u01c2\15\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u01c3\12\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\u01c4"+
    "\1\0\4\26\23\0\21\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\11\26\1\u01c5\7\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\14\26\1\u01c6\4\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\u01c7\1\0\4\26\23\0\21\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\11\26"+
    "\1\u01c8\7\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\16\26\1\u01c9\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\6\26\1\u01ca\12\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\3\0\1\u01cb"+
    "\6\0\1\u0190\46\0\1\u0194\62\0\1\u0195\43\0\1\u0190"+
    "\46\0\1\u0194\77\0\1\u0190\62\0\1\u01cc\110\0\1\u01cd"+
    "\60\0\1\u0190\73\0\1\u01ce\40\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\12\26\1\u01cf\6\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\54\0\1\u01d0"+
    "\76\0\1\u01d1\57\0\1\u01d2\76\0\1\u01d3\75\0\1\u01d4"+
    "\112\0\1\u01d5\31\0\1\u01d6\130\0\1\u01d7\76\0\1\u01d8"+
    "\76\0\1\u01d9\112\0\1\u01da\73\0\1\u01db\100\0\1\u01dc"+
    "\63\0\1\u01dd\121\0\1\u01de\55\0\1\u01df\42\0\1\u01e0"+
    "\134\0\1\u01e1\73\0\1\u01e2\125\0\1\u01e3\47\0\1\u01e4"+
    "\101\0\1\u01e5\73\0\1\u01e6\105\0\1\u01e7\32\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\14\26\1\u01e8\4\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\12\26"+
    "\1\u01e9\6\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u01ea\1\0\4\26"+
    "\23\0\21\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u01eb\12\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\12\26\1\u01ec\6\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\u01ed\1\0\4\26\23\0\21\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\6\26\1\u01ee\12\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\u01ef\1\0\4\26\23\0\21\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\u01f0\1\0\4\26\23\0\21\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\16\26"+
    "\1\u01f1\2\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\u01f2\20\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\10\26\1\u01f3\10\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\5\26\1\u01f4\13\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\13\26\1\u01f5"+
    "\5\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\6\26\1\u01f6\12\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\14\26\1\u01f7\4\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\13\26\1\u01f8\5\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\36\0"+
    "\1\u01f9\43\0\1\u0190\76\0\1\u01fa\153\0\1\u0190\64\0"+
    "\1\u01fb\72\0\1\u01fc\73\0\1\u01fd\75\0\1\u01fe\75\0"+
    "\1\u01ff\111\0\1\u0200\73\0\1\u0201\70\0\1\u0202\42\0"+
    "\1\u0203\134\0\1\u0204\105\0\1\u0205\62\0\1\u0206\103\0"+
    "\1\u0207\71\0\1\u0208\112\0\1\u0209\73\0\1\u020a\76\0"+
    "\1\u020b\111\0\1\u020c\52\0\1\u020d\110\0\1\u020e\31\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\2\26\1\u020f"+
    "\16\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\2\26\1\u0210\16\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\11\26\1\u0211\7\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u0212\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\13\26\1\u0213\5\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\13\26\1\u0214"+
    "\5\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\3\26\1\u0215\15\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\u0216\1\0"+
    "\4\26\23\0\21\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\u0217\20\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\13\26\1\u0218\5\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\5\26\1\u0219\13\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\13\26"+
    "\1\u021a\5\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\13\26\1\u021b\5\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\37\0\1\u0190\74\0\1\u0190"+
    "\44\0\1\u021c\134\0\1\u021d\102\0\1\u021e\67\0\1\u021f"+
    "\76\0\1\u0220\76\0\1\u0221\104\0\1\u0222\112\0\1\u0223"+
    "\53\0\1\u0224\44\0\1\u0225\151\0\1\u0226\73\0\1\u0227"+
    "\26\0\1\u0228\132\0\1\u0229\40\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\1\u022a\17\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\11\26\1\u022b\7\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\16\26"+
    "\1\u022c\2\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\u022d\20\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\u022e\20\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\3\26\1\u022f\15\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\u0230\20\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\13\26\1\u0231"+
    "\5\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\34\0\1\u0232\104\0\1\u0233\76\0\1\u0234\102\0"+
    "\1\u0235\76\0\1\u0236\65\0\1\u0237\113\0\1\u0238\106\0"+
    "\1\u0239\52\0\1\u023a\76\0\1\u023b\41\0\1\26\1\0"+
    "\1\u023c\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\16\26\1\u023d\2\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\3\26\1\u023e"+
    "\15\26\1\0\1\26\1\0\1\26\1\0\4\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\3\26\1\u023f\15\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\3\26\1\u0240\15\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\37\0\1\u0241\42\0"+
    "\1\u0242\140\0\1\u0243\73\0\1\u0244\71\0\1\u0245\121\0"+
    "\1\u0246\17\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\11\26\1\u0247\7\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\11\26\1\u0248\7\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\13\26\1\u0249\5\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26\40\0"+
    "\1\u024a\41\0\1\u024b\76\0\1\u024c\74\0\1\26\1\0"+
    "\1\u024d\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u024e\1\0\4\26\23\0\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\13\26\1\u024f\5\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\10\0\1\26";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1,  9,  9,  1, 
     1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  1,  9,  9,  1,  1,  9, 
     1,  1,  0,  9,  1,  1,  1,  1,  1,  1,  9,  0,  1,  1,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     1,  1,  0,  0,  0,  9,  9,  1,  9,  1,  1,  0,  9,  1,  0,  9, 
     9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 
     0,  0,  0,  9,  0,  0,  1,  0,  0,  0,  0,  0,  0,  9,  9,  0, 
     0,  0,  9,  0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9, 
     0,  0,  9,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  9,  0,  9,  9, 
     0,  0,  9,  0,  9,  0,  0,  0,  0,  1,  0,  0,  0,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  9,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  9,  0,  9,  9,  0,  0,  9,  0,  0,  1,  1,  1,  1,  1, 
     9,  0,  0,  9,  9,  0,  1,  1,  1,  9,  9,  9,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    public PhpLexer4(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.yy_buffer = array;
        this.yy_currentPos = offset;
        this.yy_markedPos = offset;
        this.yy_pushbackPos = offset;
        this.yychar = offset;
        this.yy_endRead = offset + length;
        this.yy_startRead = offset;
        this.yy_atEOF = yy_currentPos >= yy_endRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.yy_reader = reader;
    	this.yy_buffer = buffer;
    	this.yy_markedPos = parameters[0];
    	this.yy_pushbackPos = parameters[1];
    	this.yy_currentPos = parameters[2];
    	this.yy_startRead = parameters[3];
    	this.yy_endRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    public int[] getParamenters(){
    	return new int[]{yy_markedPos, yy_pushbackPos, yy_currentPos, yy_startRead, yy_endRead, yyline, yy_lexical_state};
    }

    protected int getYy_lexical_state() {
        return yy_lexical_state;
    }

    protected int getYy_markedPos() {
        return yy_markedPos;
    }

    protected int getYy_endRead() {
        return yy_endRead;
    }

    protected char[] getYy_buffer() {
        return yy_buffer;
    }

    protected int getYy_startRead() {
    	return this.yy_startRead;
    }

    protected int getYy_pushBackPosition() {
    	return this.yy_pushbackPos;
    }

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer4(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpLexer4(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[29799];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 525: 
          { return PHPDOC_GLOBAL; }
        case 592: break;
        case 521: 
          { return PHPDOC_STATIC; }
        case 593: break;
        case 516: 
          { return PHPDOC_THROWS; }
        case 594: break;
        case 514: 
          { return PHPDOC_IGNORE; }
        case 595: break;
        case 511: 
          { return PHPDOC_ACCESS; }
        case 596: break;
        case 510: 
          { return PHPDOC_AUTHOR; }
        case 597: break;
        case 508: 
          { return PHPDOC_RETURN; }
        case 598: break;
        case 486: 
          { return PHPDOC_MAGIC; }
        case 599: break;
        case 482: 
          { return PHPDOC_PARAM; }
        case 600: break;
        case 479: 
          { return PHPDOC_SINCE; }
        case 601: break;
        case 474: 
          { return PHPDOC_FINAL; }
        case 602: break;
        case 587: 
          { return PHPDOC_SUBPACKAGE; }
        case 603: break;
        case 586: 
          { return PHPDOC_FILESOURCE; }
        case 604: break;
        case 585: 
          { return PHPDOC_DEPRECATED; }
        case 605: break;
        case 580: 
          { return PHPDOC_STATICVAR; }
        case 606: break;
        case 579: 
          { return PHPDOC_COPYRIGHT; }
        case 607: break;
        case 576: 
          { return PHPDOC_EXCEPTION; }
        case 608: break;
        case 177: 
          { 
    popState();
    return PHPDOC_COMMENT_END;
 }
        case 609: break;
        case 121: 
          { 
    return PHP_AS;
 }
        case 610: break;
        case 124: 
          { 
    return PHP_DO;
 }
        case 611: break;
        case 127: 
          { 
    return PHP_IF;
 }
        case 612: break;
        case 212: 
          { 
    return PHP_NEW;
 }
        case 613: break;
        case 215: 
          { 
    return PHP_DIE;
 }
        case 614: break;
        case 219: 
          { 
    return PHP_FOR;
 }
        case 615: break;
        case 224: 
          { 
    return PHP_USE;
 }
        case 616: break;
        case 238: 
          { 
    return PHP_VAR;
 }
        case 617: break;
        case 90: 
        case 91: 
          { 
    popState();
    return PHP_LINE_COMMENT;
 }
        case 618: break;
        case 176: 
          { 
    popState();
    return PHP_COMMENT_END;
 }
        case 619: break;
        case 13: 
        case 80: 
          { 
    yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
 }
        case 620: break;
        case 589: 
          { 
    return PHP_INCLUDE_ONCE;
 }
        case 621: break;
        case 588: 
          { 
    return PHP_REQUIRE_ONCE;
 }
        case 622: break;
        case 92: 
        case 93: 
        case 94: 
          { 
    return PHP_LINE_COMMENT;
 }
        case 623: break;
        case 89: 
          { 
    return PHP_LINE_COMMENT;
 }
        case 624: break;
        case 172: 
          { 
    popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OPERATOR;
     }
        case 625: break;
        case 58: 
          { 
    pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
 }
        case 626: break;
        case 168: 
          { 
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
 }
        case 627: break;
        case 194: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return PHP_LINE_COMMENT;
 }
        case 628: break;
        case 106: 
          { 
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OPERATOR;
 }
        case 629: break;
        case 590: 
          { 
    return PHP__FUNCTION__;
 }
        case 630: break;
        case 572: 
          { 
    return PHP_ENDFOREACH;
 }
        case 631: break;
        case 571: 
          { 
    return PHP_ENDDECLARE;
 }
        case 632: break;
        case 538: 
          { 
    return PHP__LINE__;
 }
        case 633: break;
        case 535: 
          { 
    return PHP__FILE__;
 }
        case 634: break;
        case 496: 
          { 
    return PHP_FOREACH;
 }
        case 635: break;
        case 495: 
          { 
    return PHP_INCLUDE;
 }
        case 636: break;
        case 494: 
          { 
    return PHP_DECLARE;
 }
        case 637: break;
        case 493: 
          { 
    return PHP_DEFAULT;
 }
        case 638: break;
        case 492: 
          { 
    return PHP_REQUIRE;
 }
        case 639: break;
        case 487: 
          { 
    return PHP_EXTENDS;
 }
        case 640: break;
        case 462: 
          { 
    return PHP_GLOBAL;
 }
        case 641: break;
        case 457: 
          { 
    return PHP_PARENT;
 }
        case 642: break;
        case 456: 
          { 
    return PHP_SWITCH;
 }
        case 643: break;
        case 455: 
          { 
    return PHP_STATIC;
 }
        case 644: break;
        case 442: 
          { 
    return PHP_RETURN;
 }
        case 645: break;
        case 441: 
          { 
    return PHP_ELSEIF;
 }
        case 646: break;
        case 438: 
          { 
    return PHP_ENDFOR;
 }
        case 647: break;
        case 403: 
          { 
    return PHP_CASTING;
 }
        case 648: break;
        case 97: 
        case 195: 
          { 
    return PHP_NUMBER;
 }
        case 649: break;
        case 85: 
          { 
    return PHP_COMMENT;
 }
        case 650: break;
        case 84: 
          { 
    return PHP_COMMENT;
 }
        case 651: break;
        case 79: 
          { 
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 652: break;
        case 69: 
          { 
    popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 653: break;
        case 14: 
        case 18: 
          { 
    return PHP_NUMBER;
 }
        case 654: break;
        case 161: 
          { 
	return PHP_CLOSETAG;
 }
        case 655: break;
        case 165: 
          { 
    yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
 }
        case 656: break;
        case 204: 
          { 
    return PHP_NUMBER;
 }
        case 657: break;
        case 56: 
          { 
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
 }
        case 658: break;
        case 65: 
        case 81: 
          { 
	return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 659: break;
        case 147: 
          { 
    return PHP_PAAMAYIM_NEKUDOTAYIM;
 }
        case 660: break;
        case 115: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
 }
        case 661: break;
        case 560: 
          { 
    return PHP__CLASS__;
 }
        case 662: break;
        case 555: 
          { 
    return PHP_ENDSWITCH;
 }
        case 663: break;
        case 533: 
          { 
    return PHP_CONTINUE;
 }
        case 664: break;
        case 532: 
          { 
    return PHP_FUNCTION;
 }
        case 665: break;
        case 529: 
          { 
    return PHP_ENDWHILE;
 }
        case 666: break;
        case 24: 
          { 
    return PHP_SEMICOLON;
 }
        case 667: break;
        case 99: 
        case 112: 
        case 113: 
        case 116: 
          { 
    return PHP_OPERATOR;
 }
        case 668: break;
        case 160: 
          { 
    return PHP_VARIABLE;
 }
        case 669: break;
        case 74: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 670: break;
        case 73: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 671: break;
        case 72: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 672: break;
        case 71: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 673: break;
        case 62: 
        case 70: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 674: break;
        case 63: 
        case 66: 
        case 249: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 675: break;
        case 64: 
        case 78: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 676: break;
        case 67: 
        case 68: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 677: break;
        case 167: 
          { 
    pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
 }
        case 678: break;
        case 169: 
        case 250: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 679: break;
        case 170: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 680: break;
        case 251: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 681: break;
        case 82: 
          { 
    yypushback(1);
    popState();
 }
        case 682: break;
        case 166: 
          { 
    if (yylength() == 2) {
        yypushback(1);
    }
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 683: break;
        case 558: 
          {  /* guy - support old versions */
    return PHP_FUNCTION;
 }
        case 684: break;
        case 371: 
        case 372: 
          { 
    int startString=3;
    heredoc_len = yylength()-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    pushState(ST_PHP_HEREDOC);
    return PHP_HEREDOC_TAG;
 }
        case 685: break;
        case 395: 
          { 
    return PHP_PRINT;
 }
        case 686: break;
        case 394: 
          { 
    return PHP_WHILE;
 }
        case 687: break;
        case 387: 
          { 
    return PHP_CLASS;
 }
        case 688: break;
        case 385: 
          { 
    return PHP_CONST;
 }
        case 689: break;
        case 383: 
          { 
    return PHP_UNSET;
 }
        case 690: break;
        case 381: 
          { 
    return PHP_FALSE;
 }
        case 691: break;
        case 379: 
          { 
    return PHP_ISSET;
 }
        case 692: break;
        case 375: 
          { 
    return PHP_ARRAY;
 }
        case 693: break;
        case 370: 
          { 
    return PHP_BREAK;
 }
        case 694: break;
        case 369: 
          { 
    return PHP_EMPTY;
 }
        case 695: break;
        case 364: 
          { 
    return PHP_ENDIF;
 }
        case 696: break;
        case 311: 
          { 
    return PHP_LIST;
 }
        case 697: break;
        case 83: 
          { 
    popState();
    return PHP_STRING;
 }
        case 698: break;
        case 26: 
          { 
    pushState(ST_PHP_SINGLE_QUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 699: break;
        case 25: 
          { 
    if (!phpStack.isEmpty()) {
        popState();
        return  PHP_CURLY_CLOSE;
    }
    return  UNKNOWN_TOKEN;
 }
        case 700: break;
        case 22: 
          { 
    return  WHITESPACE;
 }
        case 701: break;
        case 16: 
        case 19: 
        case 20: 
        case 21: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 53: 
        case 55: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 108: 
        case 109: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 122: 
        case 123: 
        case 125: 
        case 126: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 148: 
        case 159: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 205: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 213: 
        case 214: 
        case 216: 
        case 217: 
        case 218: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 248: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 288: 
        case 289: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 301: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 309: 
        case 310: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 330: 
        case 362: 
        case 363: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 373: 
        case 374: 
        case 376: 
        case 377: 
        case 378: 
        case 380: 
        case 382: 
        case 384: 
        case 386: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 396: 
        case 406: 
        case 436: 
        case 437: 
        case 439: 
        case 440: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 526: 
        case 527: 
        case 528: 
        case 530: 
        case 531: 
        case 534: 
        case 536: 
        case 537: 
        case 553: 
        case 554: 
        case 556: 
        case 557: 
        case 559: 
        case 573: 
        case 574: 
        case 575: 
        case 582: 
        case 583: 
        case 584: 
          { 
    return  PHP_STRING;
 }
        case 702: break;
        case 15: 
        case 17: 
        case 23: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 52: 
        case 54: 
        case 57: 
        case 59: 
          { 
    return PHP_TOKEN;
 }
        case 703: break;
        case 60: 
          { 
    pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 704: break;
        case 61: 
          { 
    pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 705: break;
        case 173: 
        case 175: 
          { 
    int label_len;
    int length=yylength();
    if (yytext().charAt(length-2)=='\r') {
        label_len = length-2;
    } else {
        label_len = length-1;
    }

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        popState();
        return  PHP_HEREDOC_TAG;
    } else {
        return  PHP_CONSTANT_ENCAPSED_STRING;
    }
 }
        case 706: break;
        case 278: 
          { 
    return PHP_EXIT;
 }
        case 707: break;
        case 285: 
          { 
    return PHP_ECHO;
 }
        case 708: break;
        case 286: 
          { 
    return PHP_ELSE;
 }
        case 709: break;
        case 287: 
          { 
    return PHP_EVAL;
 }
        case 710: break;
        case 300: 
          { 
    return PHP_TRUE;
 }
        case 711: break;
        case 302: 
          { 
    return PHP_FROM;
 }
        case 712: break;
        case 308: 
          { 
    return PHP_CASE;
 }
        case 713: break;
        case 96: 
          { popState();return WHITESPACE; }
        case 714: break;
        case 114: 
          { 
    pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
 }
        case 715: break;
        case 291: 
          { 
    pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
 }
        case 716: break;
        case 75: 
        case 76: 
        case 77: 
          { 
        yypushback(1);
        popState();
     }
        case 717: break;
        case 426: 
          { return PHPDOC_LINK; }
        case 718: break;
        case 423: 
          { return PHPDOC_USES; }
        case 719: break;
        case 418: 
          { return PHPDOC_TODO; }
        case 720: break;
        case 414: 
          { return PHPDOC_DESC; }
        case 721: break;
        case 413: 
          { return PHPDOC_NAME; }
        case 722: break;
        case 359: 
          { return PHPDOC_VAR; }
        case 723: break;
        case 352: 
          { return PHPDOC_SEE; }
        case 724: break;
        case 568: 
          { return PHPDOC_CATEGORY; }
        case 725: break;
        case 565: 
          { return PHPDOC_TUTORIAL; }
        case 726: break;
        case 564: 
          { return PHPDOC_INTERNAL; }
        case 727: break;
        case 562: 
          { return PHPDOC_ABSTRACT; }
        case 728: break;
        case 552: 
          { return PHPDOC_VERSION; }
        case 729: break;
        case 551: 
          { return PHPDOC_PACKAGE; }
        case 730: break;
        case 548: 
          { return PHPDOC_LICENSE; }
        case 731: break;
        case 539: 
          { return PHPDOC_EXAMPLE; }
        case 732: break;
        case 86: 
        case 87: 
        case 88: 
          { return PHPDOC_COMMENT; }
        case 733: break;
        case 95: 
          { return UNKNOWN_TOKEN; }
        case 734: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
