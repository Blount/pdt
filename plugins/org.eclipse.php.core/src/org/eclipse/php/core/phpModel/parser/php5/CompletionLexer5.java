/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/
/* The following code was generated by JFlex 1.3.5 on 10:44 01/02/06 */

package org.eclipse.php.core.phpModel.parser.php5;

import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.php.core.phpModel.javacup.sym;
import org.eclipse.php.core.phpModel.javacup.runtime.Symbol;
import org.eclipse.php.core.phpModel.parser.CompletionLexer;
import org.eclipse.php.core.phpModel.parser.ParserClient;
import org.eclipse.php.core.phpModel.parser.StateStack;
import org.eclipse.php.core.util.collections.IntHashtable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 13:05 16/04/06 from the specification file
 * <tt>file:/C:/Java/StudioEclipse/parserUtils/parser/php5/completion_scanner.flex</tt>
 */
class CompletionLexer5 extends CompletionLexer implements org.eclipse.php.core.phpModel.javacup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ST_DOCBLOCK = 18;
  final public static int ST_IN_SCRIPTING = 2;
  final public static int ST_LOOKING_FOR_PROPERTY = 12;
  final public static int ST_SINGLE_QUOTE = 6;
  final public static int ST_ONE_LINE_COMMENT = 20;
  final public static int ST_COMMENT = 16;
  final public static int ST_BACKQUOTE = 8;
  final public static int ST_DOUBLE_QUOTES = 4;
  final public static int YYINITIAL = 0;
  final public static int ST_HEREDOC = 10;
  final public static int ST_LOOKING_FOR_VARNAME = 14;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\12\1\14\2\0\1\11\22\0\1\12\1\52\1\75\1\13"+
    "\1\67\1\56\1\57\1\76\1\43\1\45\1\54\1\4\1\63\1\37"+
    "\1\2\1\55\1\5\7\101\2\1\1\41\1\62\1\53\1\51\1\40"+
    "\1\70\1\71\1\30\1\7\1\23\1\17\1\3\1\20\1\44\1\31"+
    "\1\15\1\46\1\34\1\33\1\36\1\22\1\24\1\35\1\50\1\26"+
    "\1\25\1\16\1\21\1\42\1\32\1\6\1\27\1\10\1\64\1\77"+
    "\1\65\1\61\1\47\1\100\1\30\1\7\1\23\1\17\1\3\1\20"+
    "\1\44\1\31\1\15\1\46\1\34\1\33\1\36\1\22\1\24\1\35"+
    "\1\50\1\26\1\74\1\16\1\21\1\42\1\32\1\6\1\27\1\10"+
    "\1\72\1\60\1\73\1\66\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    66,   132,   198,   264,   330,   396,   462,   528,   594, 
      660,   726,   792,   858,   924,   990,  1056,  1122,  1188,  1254, 
     1320,  1386,  1452,  1518,   924,  1584,  1650,  1716,  1782,  1848, 
     1914,  1980,  2046,  2112,  2178,  2244,  2310,  2376,  2442,  2508, 
     2574,  2640,  2706,  2772,  2838,   924,  2904,  2970,  3036,  3102, 
     3168,  3234,  3300,  3366,  3432,  3498,   924,   924,   924,   924, 
      924,  3564,  3630,   924,   924,   924,  3696,  3762,   924,  3828, 
     3894,  3960,  4026,  4092,  4158,   924,  4224,  4290,  4356,   924, 
     4422,  4488,  4554,   924,  4620,  4686,  4752,  4818,   924,  4884, 
      924,  4950,  5016,  5082,   924,  5148,  5214,  5280,  5346,   924, 
      924,  5412,  5478,  5544,  5610,  5676,  5742,  5808,   924,  5874, 
     5940,  6006,  6072,  6138,  6204,   924,   924,  6270,  6336,  6402, 
     1452,  6468,  6534,  6600,  6666,  6732,  6798,  6864,  1452,  6930, 
     6996,  7062,  7128,  7194,  7260,  7326,  7392,  7458,  7524,  1452, 
     7590,  7656,  7722,  7788,  7854,  1452,  7920,  7986,  8052,  8118, 
     8184,   924,   924,   924,  8250,   924,   924,  8316,  8382,  2772, 
     8448,  8514,  8580,  8646,  8712,  8778,  8844,  8910,  8976,  9042, 
      924,  9108,  9174,   924,   924,  9240,  9306,   924,   924,  9372, 
     9438,   924,   924,   924,   924,   924,   924,  9504,  9570,  3696, 
      924,  9636,  3762,  9702,  9768,  3894,   924,   924,   924,   924, 
     9834,  9900,  9966,   924, 10032, 10098,   924, 10164,   924,   924, 
      924,   924, 10230, 10296, 10362, 10362, 10428, 10494, 10560, 10626, 
    10692, 10758, 10824,  6270,  1452, 10890, 10956, 11022, 11088, 11154, 
    11220,  1452, 11286, 11352, 11418,  1452, 11484, 11550, 11616, 11682, 
     1452,  1452, 11748, 11814, 11880, 11946, 12012, 12078, 12144, 12210, 
    12276, 12342,  1452, 12408, 12474, 12540, 12606, 12672, 12738,   924, 
     1452, 12804, 12870, 12936, 13002, 13068, 13134, 13200, 13266, 13332, 
    13398, 13464, 13530, 13596, 13662, 13728,   924,   924,   924, 13794, 
    13860, 13926, 13992, 14058, 14124,   924, 14190,   924,  9768, 14256, 
    14322, 14388, 14454, 14520, 14586, 14652, 14718, 14784, 14850,  1452, 
    14916, 14982,  1452, 15048, 15114, 15180, 15246, 15312, 15378, 15444, 
    15510, 15576, 15642, 15708, 15774, 15840, 15906, 15972, 16038, 16104, 
     1452, 16170, 16236, 16302, 16368, 16434, 16500, 16566, 16632, 16698, 
     1452, 16764, 16830, 16896, 16962, 17028, 17094, 17160, 17226, 17292, 
    17358, 17424, 17490, 17556, 17622, 17688, 17754, 17820, 17886, 17952, 
    18018, 18084, 18150,   924, 18216, 18282, 18348, 18414,  1452, 18480, 
    18546, 18612, 18678, 18744,  1452,  1452, 18810, 18876, 18942,  1452, 
    19008,  1452, 19074, 19140, 19206,  1452, 19272, 19338,  1452, 19404, 
     1452,  1452,  1452,  1452, 19470, 19536, 19602, 19668, 19734,  1452, 
     1452, 19800,  1452, 19866, 19932, 19998, 20064, 20130,   924, 20196, 
    20262, 20328, 20394, 20460, 20526, 20592, 20658, 20724, 20790, 20856, 
    20922, 20988, 21054, 21120,   924, 21186, 21252, 21318,   924, 21384, 
    21450, 21516, 21582, 21648, 21714,  1452, 21780, 21846, 21912, 21978, 
     1452, 22044, 22110, 22176, 22242, 22308,  1452,  1452,  1452, 22374, 
    22440,  1452, 22506, 22572, 22638, 22704,   924, 22770, 22836, 22902, 
    22968, 23034,   924, 23100,  1452, 23166, 23232, 23298, 23364, 23430, 
    23496, 23562, 23628, 23694,  1452, 23760, 23826, 23892, 23958, 24024, 
    24090, 24156, 24222,  1452,  1452, 24288,  1452, 24354, 24420, 24486, 
     1452, 24552, 24618, 24684,   924, 24750, 24816,   924, 24882, 24948, 
    25014, 25080, 25146, 25212, 25278, 25344, 25410, 25476, 25542, 25608, 
     1452, 25674, 25740, 25806, 25872,  1452,  1452, 25938,  1452, 26004, 
      924,   924,  1452, 26070, 26136, 26202,  1452, 26268, 26334, 26400, 
    26466, 26532, 26598, 26664,  1452,  1452, 26730, 26796, 26862, 26928, 
     1452, 26994,  1452, 27060, 27126, 27192, 27258,  1452,  1452, 27324, 
     1452,  1452, 27390, 27456, 27522,  1452, 27588, 27654, 27720, 27786, 
    27852, 27918, 27984, 28050, 28116,  1452,  1452,  1452, 28182,   924, 
    28248, 28314, 28380, 28446, 28512,  1452, 28578, 28644, 28710, 28776, 
    28842, 28908, 28974, 29040, 29106, 29172, 29238,   924, 29304, 29370
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\53\15\1\16\26\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\30\1\31\1\30\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\27\1\44\1\27\1\45\1\46\1\27\1\47"+
    "\1\27\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\27\1\57\1\27\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\42\1\103"+
    "\1\104\1\17\1\105\1\20\1\17\1\106\1\107\1\27"+
    "\1\107\1\110\3\27\4\107\22\27\1\111\2\107\1\27"+
    "\1\107\1\27\1\107\3\27\13\107\1\73\1\74\1\107"+
    "\1\112\2\107\1\113\1\17\1\27\1\114\1\107\1\115"+
    "\1\116\1\106\76\117\1\120\1\121\2\117\1\17\1\106"+
    "\1\107\1\27\1\107\1\110\3\27\4\107\22\27\1\111"+
    "\2\107\1\27\1\107\1\27\1\107\3\27\13\107\1\73"+
    "\1\74\1\107\1\112\2\107\1\113\1\17\1\27\1\122"+
    "\1\107\1\123\1\124\1\106\1\17\1\106\1\107\1\27"+
    "\1\107\1\110\3\27\4\107\22\27\1\111\2\107\1\27"+
    "\1\107\1\27\1\107\3\27\13\107\1\73\1\74\1\107"+
    "\1\112\2\107\1\113\1\17\1\27\1\125\1\126\1\127"+
    "\1\125\1\106\1\17\1\106\1\107\1\130\1\107\1\110"+
    "\3\130\4\107\22\130\1\111\2\107\1\130\1\107\1\130"+
    "\1\107\3\130\13\107\1\73\1\74\1\107\1\112\2\107"+
    "\1\113\1\17\1\130\1\125\1\126\1\127\1\125\1\106"+
    "\3\131\1\132\2\131\3\132\4\131\22\132\3\131\1\132"+
    "\1\131\1\132\1\131\3\132\23\131\1\132\5\131\3\133"+
    "\1\134\2\133\3\134\4\133\22\134\3\133\1\134\1\133"+
    "\1\134\1\133\3\134\23\133\1\134\5\133\54\135\1\136"+
    "\25\135\11\137\1\140\42\137\1\141\25\137\11\142\1\143"+
    "\2\142\1\144\23\142\1\145\15\142\1\146\11\142\1\146"+
    "\11\142\53\15\1\147\101\15\1\0\2\15\1\150\11\15"+
    "\1\151\3\15\1\152\5\15\103\0\1\20\1\153\1\154"+
    "\1\0\1\20\73\0\1\20\1\0\1\153\3\0\1\153"+
    "\43\0\1\155\27\0\1\153\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\156\2\27\4\0\5\27\1\157\1\160"+
    "\7\27\1\161\2\27\1\162\3\0\1\163\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\4\0\1\164"+
    "\44\0\1\165\31\0\1\20\1\153\1\154\1\0\1\20"+
    "\1\166\72\0\1\20\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\167\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\11\27\1\170"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\11\0\2\30\1\0"+
    "\1\30\66\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\3\27\1\171\1\27\1\172\2\27\1\173\10\27\1\174"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\173"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\175\2\27\1\176\5\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\177\1\0\4\27\4\0\1\200"+
    "\6\27\1\201\12\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\202\3\27\1\203\2\27"+
    "\1\204\12\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\5\27\1\205\2\27\1\206\11\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\206"+
    "\4\0\1\27\1\0\1\27\1\0\1\207\1\0\4\27"+
    "\4\0\22\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\3\27\1\210\3\27\1\211\3\27"+
    "\1\212\2\27\1\213\3\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\11\27\1\214\10\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\27\1\215\13\27\1\216\4\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\217\1\0\4\27\4\0\22\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\2\27"+
    "\1\220\1\27\4\0\5\27\1\221\2\27\1\222\1\223"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\222\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\14\27\1\224\5\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\225\21\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\4\27\1\226\4\27\1\227\10\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\37\0\1\230\1\231\10\0\1\232\70\0\1\233\10\0"+
    "\1\234\71\0\1\235\41\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\13\27\1\236\6\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\7\0"+
    "\1\237\2\0\1\240\2\0\1\241\1\0\1\242\1\243"+
    "\1\244\2\0\1\245\1\246\1\247\1\0\1\250\43\0"+
    "\1\246\6\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\16\27\1\251\3\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\252\1\27\23\0\1\27\4\0"+
    "\1\27\40\0\1\253\10\0\1\254\101\0\1\255\70\0"+
    "\1\256\10\0\1\257\1\0\1\260\1\0\1\261\75\0"+
    "\1\262\101\0\1\263\2\0\1\264\1\31\64\0\1\265"+
    "\10\0\1\266\101\0\1\267\5\0\1\270\73\0\1\271"+
    "\6\0\1\272\72\0\1\273\33\0\1\274\2\0\3\274"+
    "\4\0\22\274\3\0\1\274\1\0\1\274\1\0\3\274"+
    "\23\0\1\274\45\0\1\275\41\0\67\276\1\0\5\276"+
    "\1\277\1\276\1\300\2\276\76\301\1\277\1\302\2\301"+
    "\1\0\1\106\3\0\1\106\73\0\1\106\2\0\1\107"+
    "\1\0\1\107\4\0\4\107\22\0\3\107\1\0\1\107"+
    "\1\0\1\107\3\0\13\107\2\0\1\107\1\0\2\107"+
    "\4\0\1\107\4\0\1\106\3\0\1\106\1\303\72\0"+
    "\1\106\2\0\1\107\1\0\1\107\4\0\4\107\22\0"+
    "\1\107\1\304\1\107\1\0\1\107\1\0\1\107\3\0"+
    "\13\107\2\0\1\107\1\0\2\107\4\0\1\107\3\0"+
    "\3\305\1\274\2\305\3\274\4\305\22\274\3\305\1\274"+
    "\1\305\1\274\1\305\3\274\21\305\1\306\1\305\1\274"+
    "\5\305\67\0\1\307\12\0\5\310\1\311\1\312\63\310"+
    "\1\313\2\310\1\314\3\310\1\311\100\0\1\116\1\0"+
    "\76\117\1\0\1\315\100\117\2\314\2\117\75\0\1\122"+
    "\4\0\5\310\1\311\1\312\63\310\1\313\5\310\1\314"+
    "\1\311\75\0\2\125\1\0\1\125\3\0\1\107\1\0"+
    "\1\107\4\0\4\107\22\0\3\107\1\0\1\107\1\0"+
    "\1\107\3\0\13\107\2\0\1\107\1\0\2\107\3\0"+
    "\1\125\1\126\1\0\1\125\1\0\5\310\1\311\1\312"+
    "\63\310\1\313\6\310\1\311\1\0\1\130\1\0\1\130"+
    "\1\0\4\130\1\316\2\0\1\317\22\130\3\0\1\130"+
    "\1\0\1\130\1\0\3\130\11\0\1\320\11\0\1\130"+
    "\4\0\1\130\1\0\1\132\1\0\1\132\1\0\4\132"+
    "\4\0\22\132\3\0\1\132\1\0\1\132\1\0\3\132"+
    "\23\0\1\132\4\0\1\132\1\0\1\134\1\0\1\134"+
    "\1\0\4\134\4\0\22\134\3\0\1\134\1\0\1\134"+
    "\1\0\3\134\23\0\1\134\4\0\1\134\54\135\1\0"+
    "\25\135\55\0\1\321\40\0\1\137\142\0\1\322\24\0"+
    "\11\142\1\0\2\142\1\0\23\142\1\0\15\142\1\0"+
    "\11\142\1\0\11\142\14\0\1\144\125\0\1\323\41\0"+
    "\53\15\1\0\2\15\1\0\11\15\1\0\3\15\1\0"+
    "\5\15\51\0\1\324\65\0\1\325\13\0\1\324\53\0"+
    "\1\326\57\0\1\153\1\0\1\154\1\0\1\153\73\0"+
    "\1\153\1\0\1\327\2\0\1\330\1\327\31\0\1\330"+
    "\41\0\1\327\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\331\1\332\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\2\27\1\333\17\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\14\27\1\334\5\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\10\27\1\335\11\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\335"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\20\27\1\336\1\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\13\27\1\337\6\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\340\1\0\1\340\1\0\1\340"+
    "\1\0\1\340\7\0\2\340\2\0\1\340\4\0\1\340"+
    "\50\0\1\340\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\341\10\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\342\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\27"+
    "\1\343\4\27\1\344\1\27\1\345\11\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\345\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\10\27"+
    "\1\346\11\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\346\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\20\27\1\347\1\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\12\27"+
    "\1\350\7\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\11\27\1\351\10\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\3\27"+
    "\1\352\2\27\1\353\13\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\354\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\5\27"+
    "\1\355\14\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\5\27\1\356\14\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\11\27"+
    "\1\357\10\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\10\27\1\360\11\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\360\4\0\1\27"+
    "\1\0\1\27\1\0\1\361\1\0\4\27\4\0\22\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\15\27\1\362\4\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\4\27\1\203\15\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\5\27\1\363\14\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\27\1\364\6\27"+
    "\1\365\11\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\365\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\7\27\1\366\3\27\1\367\6\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\13\27\1\370\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\371\21\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\372\20\27\3\0\1\27\1\0\1\27\1\0"+
    "\2\27\1\373\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\10\27\1\374\11\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\374"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\2\27\1\375\17\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\11\27\1\376\10\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\377\21\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\10\27\1\u0100\11\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\u0100\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\2\27\1\u0101"+
    "\1\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\u0102\6\27\1\u0103\12\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\51\0\1\u0104\31\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\11\27\1\u0105\10\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\24\0\1\u0106\77\0\1\u0107\103\0\1\u0108\110\0\1\u0109"+
    "\70\0\1\u010a\66\0\1\u010b\110\0\1\u010c\66\0\1\u010d"+
    "\124\0\1\u010e\54\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\7\27\1\u010f\12\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\3\27\1\u0110\2\27"+
    "\1\u0111\5\27\1\u0112\1\27\1\u0113\2\27\1\u0114\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\51\0\1\u0115\101\0\1\u0116\101\0\1\u0117\1\0"+
    "\1\u0118\53\0\1\u0119\46\0\1\u0119\16\0\2\u011a\1\0"+
    "\1\u011a\37\0\1\u011b\14\0\1\u011c\21\0\1\u011d\2\0"+
    "\1\u011e\66\0\1\274\1\0\1\274\1\0\4\274\4\0"+
    "\22\274\3\0\1\274\1\0\1\274\1\0\3\274\23\0"+
    "\1\274\4\0\1\274\11\0\1\u011f\2\0\1\u0120\65\0"+
    "\14\276\1\0\65\276\14\301\1\0\65\301\1\0\1\u0121"+
    "\1\0\1\u0121\1\0\1\u0121\1\0\1\u0121\7\0\2\u0121"+
    "\2\0\1\u0121\4\0\1\u0121\50\0\1\u0121\5\0\1\u0122"+
    "\73\0\1\u0122\1\0\1\u0123\1\0\1\u0123\1\0\1\u0123"+
    "\1\0\1\u0123\7\0\2\u0123\2\0\1\u0123\4\0\1\u0123"+
    "\50\0\1\u0123\67\0\1\314\12\0\76\117\2\0\2\117"+
    "\14\0\1\317\76\0\1\316\2\0\1\317\116\0\1\u0124"+
    "\76\0\1\u0125\54\0\1\327\3\0\1\327\73\0\1\327"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\27"+
    "\1\354\20\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\u0126"+
    "\1\0\4\27\4\0\22\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\u0127\1\27\1\u0128"+
    "\1\u0129\4\27\1\u012a\4\27\1\u012b\4\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\u012a\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\7\27"+
    "\1\u012c\12\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\u012d"+
    "\1\0\4\27\4\0\22\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\27\1\u012e\20\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\16\27\1\u012f\3\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\13\27\1\u0130\6\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\u0131\1\0\4\27"+
    "\4\0\22\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\16\27\1\u0132\3\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\27"+
    "\1\u0133\20\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\u0134"+
    "\1\0\4\27\4\0\22\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\16\27\1\u0135\3\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\7\27\1\u0136\12\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\u0137\12\27\1\u0138"+
    "\6\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\16\27\1\u0139\3\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\13\27\1\u013a"+
    "\6\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u013b\13\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u013c\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u013d\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u013e\6\27\1\u013f\11\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\u013f\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u0140\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u0141\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\5\27\1\u0142"+
    "\14\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\10\27\1\u0143\11\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\u0143\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u0144"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u0145\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\4\27\1\u0146"+
    "\15\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\4\27\1\u0147\15\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u0148"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\13\27\1\u0149\6\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u014a"+
    "\3\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u014b\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u014c"+
    "\3\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\5\27\1\u014d\14\27\3\0\1\u014e\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u014f"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\24\0\1\u0150\73\0\1\u0151\104\0"+
    "\1\u0152\104\0\1\u0153\102\0\1\u0154\46\0\1\u0154\53\0"+
    "\1\u0155\61\0\1\u0156\103\0\1\u0157\77\0\1\u0158\54\0"+
    "\1\27\1\0\1\27\1\0\2\27\1\u0159\1\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u015a\3\27\1\u015b\15\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\16\27"+
    "\1\u015c\3\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\13\27\1\u015d\6\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\u015e"+
    "\21\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u015f\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\3\0\1\u0160\2\0"+
    "\3\u0160\1\0\1\u0118\2\0\22\u0160\3\0\1\u0160\1\0"+
    "\1\u0160\1\0\3\u0160\23\0\1\u0160\30\0\1\u0161\67\0"+
    "\2\u011a\1\0\1\u011a\54\0\1\u011c\65\0\1\u0162\66\0"+
    "\1\u0163\53\0\1\u011e\101\0\1\u0120\72\0\1\314\73\0"+
    "\1\314\1\0\1\314\1\0\1\314\1\0\1\314\1\0"+
    "\1\314\7\0\2\314\2\0\1\314\4\0\1\314\50\0"+
    "\1\314\35\0\1\u0164\61\0\1\u0165\65\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\5\27\1\u0166\14\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\3\27\1\u0167\16\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u0168\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\7\27\1\u0169"+
    "\12\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\15\27\1\u016a\4\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\14\27\1\u016b"+
    "\5\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u016c\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\12\27\1\u016d\7\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\17\27\1\u016e\2\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\11\27\1\u016f\10\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\4\27\1\u0170\15\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\13\27\1\u0171\6\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\27\1\u0172\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\u0173\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\15\27"+
    "\1\u0174\4\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\5\27\1\u0175\14\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\4\27"+
    "\1\u0176\15\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\13\27\1\u0177\6\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\16\27"+
    "\1\u0178\3\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\27\1\u0179\20\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\13\27"+
    "\1\u017a\6\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\27\1\u017b\20\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\u017c"+
    "\21\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u017d\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\14\27\1\u017e"+
    "\5\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u017f\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\10\27\1\u0180\11\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\u0180\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\u0181\21\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\6\27\1\u0182\13\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\11\27"+
    "\1\u0183\10\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\u0184\21\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\11\27\1\u0185"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\12\27\1\u0186\7\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0187\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\u0188\21\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\27\1\u0189\20\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\13\27"+
    "\1\u018a\6\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\u018b"+
    "\1\0\4\27\4\0\22\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\33\0\1\u018c"+
    "\51\0\1\u018d\6\0\1\u018e\32\0\1\u018f\43\0\1\u0190"+
    "\122\0\1\u0191\54\0\1\u0192\101\0\1\u0193\113\0\1\u0194"+
    "\117\0\1\u0195\76\0\1\u0196\52\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\13\27\1\u0197\6\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\16\27"+
    "\1\u0198\3\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\5\27\1\u0199\14\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\13\27"+
    "\1\u019a\6\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\16\27\1\u019b\3\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\5\27"+
    "\1\u019c\14\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\27\1\u019d\20\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\u0160\1\0\1\u0160\1\0\4\u0160\1\u019e\2\0"+
    "\1\u019f\22\u0160\3\0\1\u0160\1\0\1\u0160\1\0\3\u0160"+
    "\23\0\1\u0160\4\0\1\u0160\26\0\1\u01a0\103\0\1\u01a1"+
    "\62\0\1\u01a2\1\u01a3\1\0\1\u01a3\122\0\1\u01a4\45\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\2\27\1\u01a5"+
    "\17\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u01a6\13\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\11\27\1\u01a7"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u01a8\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\u01a9\21\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\3\27\1\u01aa\16\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\3\27\1\u01ab\16\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\2\27\1\u01ac\17\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\5\27\1\u01ad\14\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\21\27\1\u01ae\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\u01af"+
    "\1\0\4\27\4\0\22\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\16\27\1\u01b0\3\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\u01b1\10\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\u01b2\21\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u01b3\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\5\27\1\u01b4\14\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u01b5\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\14\27\1\u01b6\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\5\27\1\u01b7\14\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\11\27\1\u01b8\10\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\13\27\1\u01b9\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\6\27\1\u01ba\13\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u01bb\20\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\6\27\1\u01bc\13\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\3\0\1\u01bd\6\0\1\u01be\32\0\1\u01bf\100\0"+
    "\1\u01c0\47\0\1\u018e\32\0\1\u018f\67\0\1\u01c1\64\0"+
    "\1\u0195\101\0\1\u01c2\106\0\1\u01c3\100\0\1\u01c4\71\0"+
    "\1\u0195\32\0\1\u01c5\63\0\1\u01c6\53\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\16\27\1\u01c7\3\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u01c8\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u01c9\13\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u01ca"+
    "\11\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\u01ca\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u01cb\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u01cc\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\14\27\1\u01cd\5\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\14\0\1\u019f\102\0"+
    "\1\u01ce\112\0\1\u01cf\67\0\1\u01a3\103\0\1\u01d0\64\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u01d1"+
    "\11\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\u01d1\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\16\27\1\u01d2\3\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u01d3\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u01d4\20\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\16\27\1\u01d5\3\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\13\27\1\u01d6\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u01d7\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\6\27\1\u01d8"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u01d9\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u01da\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u01db\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\u01dc\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\14\27\1\u01dd"+
    "\5\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\4\27\1\u01de\15\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u01df\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u01e0\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u01e1\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u01e2"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\30\0\1\u01e3\63\0\1\u01be\32\0"+
    "\1\u01bf\37\0\1\u01e4\101\0\1\u0195\110\0\1\u01c2\32\0"+
    "\1\u01e5\52\0\1\u01e6\127\0\1\u01e7\47\0\1\u01c6\32\0"+
    "\1\u01e8\35\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\1\27\1\u01e9"+
    "\1\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u01ea\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\10\27\1\u01eb\11\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\u01eb\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u01ec\1\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\1\27\1\u01ed"+
    "\1\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\7\27\1\u01ee\12\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\35\0\1\u01ef\55\0\2\u01f0\1\0\1\u01f0\76\0"+
    "\2\u01f1\1\0\1\u01f1\66\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\13\27\1\u01f2\6\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\13\27\1\u01f3"+
    "\6\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u01f4\13\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u01f5\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u01f6\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u01f7\1\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u01f8\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\5\27\1\u01f9\14\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\5\27\1\u01fa"+
    "\14\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u01fb\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u01fc\1\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u01fd\20\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u01fe\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\22\0"+
    "\1\u01be\105\0\1\u018e\65\0\1\u01e6\32\0\1\u01ff\46\0"+
    "\1\u01e7\32\0\1\u0200\35\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u0201\1\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\u0202\21\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\22\27\3\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\u0203\1\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\6\27\1\u0204\13\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\22\27\3\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\u0205\1\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\2\27\1\u0206\17\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\16\0\1\u0207\66\0\1\u0208\2\0\3\u0208"+
    "\2\u01f0\1\0\1\u01f0\22\u0208\3\0\1\u0208\1\0\1\u0208"+
    "\1\0\3\u0208\16\0\1\u0209\4\0\1\u0208\16\0\2\u01f1"+
    "\1\0\1\u01f1\16\0\1\u020a\47\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\11\27\1\u020b\10\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\6\27"+
    "\1\u020c\13\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\14\27\1\u020d\5\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\u020e\1\0\4\27\4\0\22\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\7\27\1\u020f\12\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\7\27\1\u0210\12\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\27\1\u0211\20\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\7\27\1\u0212\12\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\2\27\1\u0213\17\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\7\27\1\u0214\12\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\22\27\3\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\u0215\1\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\7\27\1\u0216\12\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\22\27\3\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\u0217\1\27\23\0\1\27\4\0\1\27\11\0\2\u0207"+
    "\1\0\1\u0207\23\0\1\275\42\0\1\u0208\1\0\1\u0208"+
    "\1\0\4\u0208\2\u0218\1\0\1\u0218\22\u0208\3\0\1\u0208"+
    "\1\0\1\u0208\1\0\3\u0208\23\0\1\u0208\4\0\1\u0208"+
    "\3\0\1\u0208\2\0\3\u0208\4\0\22\u0208\3\0\1\u0208"+
    "\1\0\1\u0208\1\0\3\u0208\23\0\1\u0208\35\0\1\u0219"+
    "\52\0\1\27\1\0\1\u021a\1\0\4\27\4\0\22\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\14\27\1\u021b\5\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\5\27\1\u021c\14\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\3\27\1\u021d\16\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\10\27\1\u021e\11\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\u021e"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\5\27\1\u021f\14\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\5\27\1\u0220\14\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\21\27\1\u0221\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u0222\1\27\23\0\1\27\4\0"+
    "\1\27\3\0\1\u0223\2\0\3\u0223\2\u0218\1\0\1\u0218"+
    "\22\u0223\3\0\1\u0223\1\0\1\u0223\1\0\3\u0223\23\0"+
    "\1\u0223\27\0\1\u0224\60\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u0225\13\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\6\27\1\u0226"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u0227\1\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\20\27\1\u0228"+
    "\1\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\u0223\1\0\1\u0223\1\0"+
    "\4\u0223\2\u0229\1\0\1\u0229\22\u0223\3\0\1\u0223\1\0"+
    "\1\u0223\1\0\3\u0223\3\0\1\u022a\17\0\1\u0223\4\0"+
    "\1\u0223\44\0\1\u022b\36\0\1\27\1\0\1\u022c\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u022d\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\u022e\1\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u022f\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\11\0\2\u0229"+
    "\1\0\1\u0229\37\0\1\u022a\102\0\1\u0230\45\0\1\u0231"+
    "\61\0\1\27\1\0\1\27\1\0\4\27\4\0\16\27"+
    "\1\u0232\3\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\30\0\1\u0233\52\0\1\27"+
    "\1\0\1\u0234\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\44\0\1\u0235\36\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\u0236\10\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\3\0\1\u0237"+
    "\107\0\2\u0237\1\0\1\u0237\34\0\1\u0238\41\0\2\u0238"+
    "\1\0\1\u0238\20\0\1\u0239\37\0\1\u023a\1\u023b\34\0"+
    "\1\u023c\105\0\1\u023d\101\0\1\u023e\101\0\1\u023f\75\0"+
    "\1\u0240\101\0\1\u0241\61\0\2\u023f\1\0\1\u023f\23\0"+
    "\1\u0242\76\0\1\u0243\101\0\1\u0244\141\0\1\u023f\102\0"+
    "\1\u023f\3\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  1,  1,  9, 
     9,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  9, 
     1,  1,  1,  9,  1,  1,  1,  1,  9,  1,  9,  1,  1,  1,  9,  1, 
     1,  1,  1,  9,  9,  1,  0,  1,  1,  1,  1,  0,  9,  1,  1,  1, 
     1,  1,  1,  9,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  1,  9,  9,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  9,  1,  1,  9,  9,  1, 
     0,  9,  9,  1,  1,  9,  9,  9,  9,  9,  9,  1,  1,  0,  9,  0, 
     0,  0,  0,  1,  9,  9,  9,  9,  1,  1,  1,  9,  0,  1,  9,  0, 
     9,  9,  9,  9,  0,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1, 
     1,  1,  1,  1,  9,  9,  9,  0,  0,  0,  1,  0,  1,  9,  1,  9, 
     1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  9,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0, 
     0,  1,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  9,  0, 
     0,  0,  0,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  9,  0,  0,  9,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  1,  1,  1,  1,  0,  0,  0,  1,  1,  1,  1,  9, 
     0,  1,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    /** TODO, Do not forget to change yy_refill to the following code:
         private boolean yy_refill() throws java.io.IOException {

             // first: make room (if you can)
             if (yy_startRead > 0) {
                 char temp[] = yy_buffer;
                 //only if the new buffer will be changed then
                 //we have to keep the old copy
                 if (yy_endRead - yy_startRead > 0 || yy_startRead == yy_old_buffer.length) {
                     temp = yy_old_buffer;
                     yy_old_buffer = yy_buffer;
                     yy_old_pushbackPos = yy_pushbackPos;
                     duplicated_string_length = yy_endRead - yy_startRead;
                 }
                 System.arraycopy(yy_buffer, yy_startRead,
                         temp, 0,
                         yy_endRead - yy_startRead);
                 yy_buffer = temp;

                 // translate stored positions
                 yy_endRead -= yy_startRead;
                 yy_currentPos -= yy_startRead;
                 yy_markedPos -= yy_startRead;
                 yy_pushbackPos -= yy_startRead;
                 lastPhpDocStart = new Integer(lastPhpDocStart.intValue() - yy_startRead);
                 yy_startRead = 0;
             }

             // is the buffer big enough?
             if (yy_currentPos >= yy_buffer.length) {
                 // if not: blow it up
                 char newBuffer[] = new char[yy_currentPos * 2];
                 System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
                 yy_buffer = newBuffer;
                 newBuffer = new char[yy_currentPos * 2];
                 System.arraycopy(yy_old_buffer, 0, newBuffer, 0, yy_old_buffer.length);
                 System.arraycopy(yy_buffer, duplicated_string_length, newBuffer, yy_old_buffer.length, newBuffer.length - yy_old_buffer.length);
                 duplicated_string_length += newBuffer.length - yy_old_buffer.length;
                 yy_old_buffer = newBuffer;
             }

             // finally: fill the buffer with new input
             int numRead = yy_reader.read(yy_buffer, yy_endRead,
                     yy_buffer.length - yy_endRead);

             if (numRead < 0) {
                 return true;
             } else {
                 yy_endRead += numRead;
                 return false;
             }
         }
    */
    
    private String heredoc = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private ParserClient parserClient;
    private Pattern[] tasksPatterns;
    private char yy_old_buffer[] = new char[YY_BUFFERSIZE];
    private int yy_old_pushbackPos;
    private int duplicated_string_length;

	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
    private void pushState(int state) {
        stack.pushStack(yy_lexical_state);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }


    private int getTokenStartPosition() {
        return yy_startRead - yy_pushbackPos;
    }

    private int getTokenLength() {
        return yy_markedPos - yy_startRead;
    }

    public void setParserClient(ParserClient parserClient) {
        this.parserClient = parserClient;
    }

    public void setTasksPatterns(Pattern[] tasksPatterns){
    	this.tasksPatterns = tasksPatterns;
    }
    
    private void handlePHPStart() {
        if (parserClient != null) {
            int startPosition = getTokenStartPosition();
            parserClient.handlePHPStart(startPosition, startPosition + getTokenLength());
        }
    }

    private void handlePHPEnd() {
        if (parserClient != null) {
            int startPosition = getTokenStartPosition();
            parserClient.handlePHPEnd(startPosition, startPosition + getTokenLength());
        }
    }

    public int getLength() {
        return yy_endRead - yy_pushbackPos;
    }

    private IntHashtable phpDocs = new IntHashtable();
    private IntHashtable phpDocsStart = new IntHashtable();
    private String lastPhpDocText;
    private Integer lastPhpDocStart = new Integer(0);
    private Object[] phpDocValues = new Object [2];
    private String firstPhpDocText = null;
    private Integer firstPhpDocStart = null;
    private boolean noSymboles = true;

	private int commentStartPosition;
	private int commentStartLine;
	private StringBuffer comment = new StringBuffer();
	
	private void handlePHPDocStart() {
		handleCommentStart();
		lastPhpDocStart = new Integer(yy_startRead);    
	}
		    
    private void handlePHPDocEnd() {
    	handleCommentEnd();
  	    lastPhpDocText = comment.toString();
        if (lastPhpDocText != null) {
            if (noSymboles &&((firstPhpDocStart == null)|| (firstPhpDocStart.compareTo(lastPhpDocStart) > 0))){
                    firstPhpDocText = lastPhpDocText;
                    firstPhpDocStart = lastPhpDocStart;
            }
        }
    }

    public Object[] getPHPDoc(int location) {
        phpDocValues[0] = phpDocs.get(location);
        phpDocValues[1] = phpDocsStart.get(location);
        return phpDocValues;
    }

   public Object[] getFirstPHPDoc() {
        phpDocValues[0] = firstPhpDocText;
        phpDocValues[1] = firstPhpDocStart;
        return phpDocValues;
    }

    private void appendTextToComment(){
    	comment.append(yy_buffer, yy_startRead, yy_markedPos-yy_startRead);
    }
    
    private void clearCommentBuffer(){
    	comment.delete(0,comment.length());
    }
    
	private void handleCommentStart() {
		commentStartPosition = yy_startRead;
		commentStartLine = yyline;
		clearCommentBuffer();
		appendTextToComment();
	}
	
	private void handleCommentEnd() {
		appendTextToComment();
		checkForTasks();
	}
	
    private void checkForTasks(){
		ArrayList matchers = createMatcherList();		
		int searchStartPosition = 0;
		int lineCnt = 0;
		int commentEndIndex = comment.length();
		//if its a multiline comment or a phpDoc no nead to search the */ in the end 
		if(comment.charAt(0)=='/' && comment.charAt(1)=='*'){
			commentEndIndex -=2;
		}
		Matcher matcher = getMinimalMatcher(matchers, searchStartPosition);
		while (matcher != null) {
			String taskName = matcher.group();
			int taskStartPositionInComment = matcher.start();
			int descriptionStartPositionInComment = matcher.end();			

			//counting the lines till the begining of the task
			lineCnt+= countNewLines(searchStartPosition, matcher.start());
			
			//calculating the endPosition of the task
			searchStartPosition = matcher.end();
			matcher = getMinimalMatcher(matchers, searchStartPosition);
			
			int endSearch = (matcher == null)? commentEndIndex : matcher.start();
			int taskEndPositionInComment = descriptionStartPositionInComment;
			while(taskEndPositionInComment < endSearch){
				char ch = comment.charAt(taskEndPositionInComment);
				if(ch == '\n' || ch == '\r'){
					break;
				}
				taskEndPositionInComment++;
			}

			String description = comment.substring(descriptionStartPositionInComment,taskEndPositionInComment);
			description = description.trim();
			parserClient.handleTask(taskName, description, commentStartPosition + taskStartPositionInComment, commentStartPosition + taskEndPositionInComment  - 1,commentStartLine + lineCnt);
		}
    }
    
    private int countNewLines(int startIndex, int endIndex) {
    	int lineCnt = 0;
		for(int i = startIndex; i < endIndex ; i++){
			char ch = comment.charAt(i);
			if(ch == '\n' || ch == '\r'){
				char oppositeCh = (ch == '\n') ? '\r' : '\n';
				lineCnt++;
				if(i + 1 < endIndex){
					ch = comment.charAt(i + 1);
					if(ch == oppositeCh){
						i++;
					}
				}
			}
		}
		return lineCnt;
    }

	private ArrayList createMatcherList() {
		ArrayList list = new ArrayList(tasksPatterns.length);
		for (int i = 0; i < tasksPatterns.length; i++) {
			list.add(i, tasksPatterns[i].matcher(comment));
		}
		return list;
	}

	private Matcher getMinimalMatcher(ArrayList matchers, int startPosition) {
		Matcher minimal = null;
		int size = matchers.size();
		for (int i = 0; i < size;) {
			Matcher tmp = (Matcher) matchers.get(i);
			if (tmp.find(startPosition)) {
				if (minimal == null || tmp.start() < minimal.start()) {
					minimal = tmp;
				}
				i++;
			} else {
				matchers.remove(i);
				size--;
			}
		}
		return minimal;
	}

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        if (lastPhpDocText != null) {
            if(lastPhpDocText == firstPhpDocText) {
                if(symbolNumber == ParserConstants5.T_FUNCTION ||
                        symbolNumber == ParserConstants5.T_CLASS ||
                        symbolNumber == ParserConstants5.T_DEFINE){
                    phpDocs.put(leftPosition, lastPhpDocText);
                    phpDocsStart.put(leftPosition, new Integer(lastPhpDocStart.intValue()));
                    firstPhpDocText = null;
                }
            } else {
                phpDocs.put(leftPosition, lastPhpDocText);
                phpDocsStart.put(leftPosition, new Integer(lastPhpDocStart.intValue()));
            }
            lastPhpDocText = null;
        }
        noSymboles = false;        
        return new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
    }

    public String createString(int startOffset, int endOffset) {
        int startPosition = startOffset + yy_pushbackPos;
        int length =  endOffset - startOffset;
        if(startPosition < 0){
            startPosition = startOffset + yy_old_pushbackPos;
            if(startPosition + length < yy_old_buffer.length){
            	if(startPosition < 0 || startPosition + length > yy_old_buffer.length){
                	return "";
                }
                return new String(yy_old_buffer, startPosition, length);
            }
            // meaning the string was splited between the two buffers
            int remainder = startPosition + length  + duplicated_string_length - yy_old_buffer.length;
            length -= remainder;
            if(startPosition < 0 || startPosition + length > yy_old_buffer.length || remainder > yy_buffer.length){
            	return "";
            }
            return (new String(yy_old_buffer, startPosition, length) + new String(yy_buffer, 0, remainder));
        }
    	if(startPosition < 0 || startPosition + length > yy_buffer.length){
        	return "";
        }
        return new String(yy_buffer, startPosition, length);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CompletionLexer5(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CompletionLexer5(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[29436];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

      // first: make room (if you can)
      if (yy_startRead > 0) {
          char temp[] = yy_buffer;
          //only if the new buffer will be changed then
          //we have to keep the old copy
          if (yy_endRead - yy_startRead > 0 || yy_startRead == yy_old_buffer.length) {
              temp = yy_old_buffer;
              yy_old_buffer = yy_buffer;
              yy_old_pushbackPos = yy_pushbackPos;
              duplicated_string_length = yy_endRead - yy_startRead;
          }
          System.arraycopy(yy_buffer, yy_startRead,
                  temp, 0,
                  yy_endRead - yy_startRead);
          yy_buffer = temp;

          // translate stored positions
          yy_endRead -= yy_startRead;
          yy_currentPos -= yy_startRead;
          yy_markedPos -= yy_startRead;
          yy_pushbackPos -= yy_startRead;
          lastPhpDocStart = new Integer(lastPhpDocStart.intValue() - yy_startRead);
          yy_startRead = 0;
      }

      // is the buffer big enough?
      if (yy_currentPos >= yy_buffer.length) {
          // if not: blow it up
          char newBuffer[] = new char[yy_currentPos * 2];
          System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
          yy_buffer = newBuffer;
          newBuffer = new char[yy_currentPos * 2];
          System.arraycopy(yy_old_buffer, 0, newBuffer, 0, yy_old_buffer.length);
          System.arraycopy(yy_buffer, duplicated_string_length, newBuffer, yy_old_buffer.length, newBuffer.length - yy_old_buffer.length);
          duplicated_string_length += newBuffer.length - yy_old_buffer.length;
          yy_old_buffer = newBuffer;
      }

      // finally: fill the buffer with new input
      int numRead = yy_reader.read(yy_buffer, yy_endRead,
              yy_buffer.length - yy_endRead);

      if (numRead < 0) {
          return true;
      } else {
          yy_endRead += numRead;
          return false;
      }
  }

  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public org.eclipse.php.core.phpModel.javacup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 73: 
          { return createSymbol(ParserConstants5.T_DOLLAR); }
        case 581: break;
        case 50: 
          { return createSymbol(ParserConstants5.T_TIMES); }
        case 582: break;
        case 47: 
          { return createSymbol(ParserConstants5.T_EQUAL); }
        case 583: break;
        case 39: 
          { return createSymbol(ParserConstants5.T_MINUS); }
        case 584: break;
        case 16: 
          { return createSymbol(ParserConstants5.T_NEKUDA); }
        case 585: break;
        case 57: 
          { return createSymbol(ParserConstants5.T_COMMA); }
        case 586: break;
        case 60: 
          { return createSymbol(ParserConstants5.T_TILDA); }
        case 587: break;
        case 61: 
          { return createSymbol(ParserConstants5.T_DOLLAR); }
        case 588: break;
        case 48: 
          { return createSymbol(ParserConstants5.T_NOT); }
        case 589: break;
        case 41: 
          { return createSymbol(ParserConstants5.T_NEKUDOTAIM); }
        case 590: break;
        case 18: 
          { return createSymbol(ParserConstants5.T_PLUS); }
        case 591: break;
        case 51: 
          { return createSymbol(ParserConstants5.T_DIV); }
        case 592: break;
        case 53: 
          { return createSymbol(ParserConstants5.T_REFERENCE); }
        case 593: break;
        case 55: 
          { return createSymbol(ParserConstants5.T_KOVA); }
        case 594: break;
        case 56: 
          { return createSymbol(ParserConstants5.T_SEMICOLON); }
        case 595: break;
        case 58: 
          { return createSymbol(ParserConstants5.T_OPEN_RECT); }
        case 596: break;
        case 59: 
          { return createSymbol(ParserConstants5.T_CLOSE_RECT); }
        case 597: break;
        case 62: 
          { return createSymbol(ParserConstants5.T_QUESTION_MARK); }
        case 598: break;
        case 45: 
          { return createSymbol(ParserConstants5.T_CLOSE_PARENTHESE); }
        case 599: break;
        case 43: 
          { return createSymbol(ParserConstants5.T_OPEN_PARENTHESE); }
        case 600: break;
        case 49: 
          { return createSymbol(ParserConstants5.T_RGREATER); }
        case 601: break;
        case 40: 
          { return createSymbol(ParserConstants5.T_LGREATER); }
        case 602: break;
        case 52: 
          { return createSymbol(ParserConstants5.T_PRECENT); }
        case 603: break;
        case 54: 
          { return createSymbol(ParserConstants5.T_OR); }
        case 604: break;
        case 63: 
          { return createSymbol(ParserConstants5.T_AT); }
        case 605: break;
        case 196: 
          { 
    if (yylength() == 2) {
        yypushback(1);
    }
    return createSymbol(ParserConstants5.T_CHARACTER);
 }
        case 606: break;
        case 69: 
        case 71: 
        case 288: 
          {  /* treat numbers (almost) as strings inside encapsulated strings */
    return createSymbol(ParserConstants5.T_NUM_STRING);
 }
        case 607: break;
        case 100: 
        case 101: 
          { 
appendTextToComment();
//	yymore();
 }
        case 608: break;
        case 97: 
          { 
appendTextToComment();
//	yymore();
 }
        case 609: break;
        case 93: 
          { 
appendTextToComment();
//	yymore();
 }
        case 610: break;
        case 91: 
          { 
    popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants5.T_STRING_VARNAME);
 }
        case 611: break;
        case 84: 
          { 
    return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 612: break;
        case 81: 
          { 
    return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 613: break;
        case 78: 
          { 
    return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 614: break;
        case 77: 
          { 
    return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 615: break;
        case 70: 
        case 72: 
        case 85: 
          { 
    return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 616: break;
        case 156: 
          { 
	return createSymbol(ParserConstants5.T_PAAMAYIM_NEKUDOTAYIM);
 }
        case 617: break;
        case 480: 
          { 
	return createSymbol(ParserConstants5.T_PRIVATE);
 }
        case 618: break;
        case 478: 
          { 
	return createSymbol(ParserConstants5.T_REQUIRE);
 }
        case 619: break;
        case 476: 
          { 
	return createSymbol(ParserConstants5.T_FOREACH);
 }
        case 620: break;
        case 474: 
          { 
	return createSymbol(ParserConstants5.T_DECLARE);
 }
        case 621: break;
        case 473: 
          { 
	return createSymbol(ParserConstants5.T_DEFAULT);
 }
        case 622: break;
        case 470: 
          { 
	return createSymbol(ParserConstants5.T_INCLUDE);
 }
        case 623: break;
        case 464: 
          { 
	return createSymbol(ParserConstants5.T_EXTENDS);
 }
        case 624: break;
        case 454: 
          { 
	return createSymbol(ParserConstants5.T_GLOBAL);
 }
        case 625: break;
        case 441: 
          { 
	return createSymbol(ParserConstants5.T_PUBLIC);
 }
        case 626: break;
        case 438: 
          { 
	return createSymbol(ParserConstants5.T_RETURN);
 }
        case 627: break;
        case 437: 
          { 
	return createSymbol(ParserConstants5.T_SWITCH);
 }
        case 628: break;
        case 436: 
          { 
	return createSymbol(ParserConstants5.T_STATIC);
 }
        case 629: break;
        case 155: 
          { 
	return createSymbol(ParserConstants5.T_IS_GREATER_OR_EQUAL);
 }
        case 630: break;
        case 174: 
          { 
	return createSymbol(ParserConstants5.T_IS_SMALLER_OR_EQUAL);
 }
        case 631: break;
        case 200: 
        case 289: 
          { 
    return createSymbol(ParserConstants5.T_CHARACTER);
 }
        case 632: break;
        case 203: 
          { 
    return createSymbol(ParserConstants5.T_CHARACTER);
 }
        case 633: break;
        case 290: 
          { 
    return createSymbol(ParserConstants5.T_CHARACTER);
 }
        case 634: break;
        case 422: 
          { 
	return createSymbol(ParserConstants5.T_ENDFOR);
 }
        case 635: break;
        case 425: 
          { 
	return createSymbol(ParserConstants5.T_ELSEIF);
 }
        case 636: break;
        case 559: 
          { 
    return createFullSymbol(ParserConstants5.T_VAR_COMMENT);
 }
        case 637: break;
        case 545: 
          { 
    return createSymbol(ParserConstants5.T_METHOD_C);
 }
        case 638: break;
        case 541: 
          { 
	return createSymbol(ParserConstants5.T_IMPLEMENTS);
 }
        case 639: break;
        case 540: 
          { 
	return createSymbol(ParserConstants5.T_INSTANCEOF);
 }
        case 640: break;
        case 538: 
          { 
	return createSymbol(ParserConstants5.T_ENDFOREACH);
 }
        case 641: break;
        case 537: 
          { 
	return createSymbol(ParserConstants5.T_ENDDECLARE);
 }
        case 642: break;
        case 532: 
          { 
    return createSymbol(ParserConstants5.T_CLASS_C);
 }
        case 643: break;
        case 511: 
          { 
	return createSymbol(ParserConstants5.T_STRING_CAST);
 }
        case 644: break;
        case 510: 
          { 
	return createSymbol(ParserConstants5.T_OBJECT_CAST);
 }
        case 645: break;
        case 487: 
          { 
	return createSymbol(ParserConstants5.T_ARRAY_CAST);
 }
        case 646: break;
        case 484: 
          { 
	return createSymbol(ParserConstants5.T_UNSET_CAST);
 }
        case 647: break;
        case 452: 
          { 
	return createSymbol(ParserConstants5.T_DOUBLE_CAST);
 }
        case 648: break;
        case 153: 
          { 
	return createSymbol(ParserConstants5.T_MINUS_EQUAL);
 }
        case 649: break;
        case 139: 
          { 
	return createSymbol(ParserConstants5.T_LOGICAL_OR);
 }
        case 650: break;
        case 116: 
          { 
	return createSymbol(ParserConstants5.T_PLUS_EQUAL);
 }
        case 651: break;
        case 64: 
          { 
    pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants5.T_CURLY_OPEN);

 }
        case 652: break;
        case 183: 
          { 
	return createSymbol(ParserConstants5.T_BOOLEAN_AND);
 }
        case 653: break;
        case 185: 
          { 
	return createSymbol(ParserConstants5.T_BOOLEAN_OR);
 }
        case 654: break;
        case 224: 
          { 
	return createSymbol(ParserConstants5.T_LOGICAL_XOR);
 }
        case 655: break;
        case 235: 
          { 
	return createSymbol(ParserConstants5.T_EXIT);
 }
        case 656: break;
        case 252: 
          { 
	return createSymbol(ParserConstants5.T_LOGICAL_AND);
 }
        case 657: break;
        case 299: 
          { 
	return createSymbol(ParserConstants5.T_ECHO);
 }
        case 658: break;
        case 300: 
          { 
	return createSymbol(ParserConstants5.T_ELSE);
 }
        case 659: break;
        case 302: 
          { 
	return createSymbol(ParserConstants5.T_EVAL);
 }
        case 660: break;
        case 320: 
          { 
	return createSymbol(ParserConstants5.T_CASE);
 }
        case 661: break;
        case 330: 
          { 
	return createSymbol(ParserConstants5.T_LIST);
 }
        case 662: break;
        case 358: 
          { 
	return createSymbol(ParserConstants5.T_ENDIF);
 }
        case 663: break;
        case 364: 
          { 
	return createSymbol(ParserConstants5.T_EMPTY);
 }
        case 664: break;
        case 365: 
          { 
	return createSymbol(ParserConstants5.T_BREAK);
 }
        case 665: break;
        case 369: 
          { 
	return createSymbol(ParserConstants5.T_ISSET);
 }
        case 666: break;
        case 371: 
          { 
	return createSymbol(ParserConstants5.T_THROW);
 }
        case 667: break;
        case 375: 
          { 
	return createSymbol(ParserConstants5.T_FINAL);
 }
        case 668: break;
        case 378: 
          { 
	return createSymbol(ParserConstants5.T_UNSET);
 }
        case 669: break;
        case 380: 
          { 
	return createSymbol(ParserConstants5.T_CONST);
 }
        case 670: break;
        case 381: 
          { 
	return createSymbol(ParserConstants5.T_CATCH);
 }
        case 671: break;
        case 382: 
          { 
	return createSymbol(ParserConstants5.T_CLONE);
 }
        case 672: break;
        case 383: 
          { 
	return createSymbol(ParserConstants5.T_CLASS);
 }
        case 673: break;
        case 389: 
          { 
	return createSymbol(ParserConstants5.T_ARRAY);
 }
        case 674: break;
        case 390: 
          { 
	return createSymbol(ParserConstants5.T_WHILE);
 }
        case 675: break;
        case 392: 
          { 
	return createSymbol(ParserConstants5.T_PRINT);
 }
        case 676: break;
        case 210: 
          { 
    if (asp_tags || yytext().charAt(1)!='%') { /* asp comment? */
	    handleCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	} else {
//		yymore();
	}
 }
        case 677: break;
        case 95: 
          { 
appendTextToComment();
 }
        case 678: break;
        case 94: 
        case 96: 
          { 
appendTextToComment();
 }
        case 679: break;
        case 92: 
          { 
appendTextToComment();
 }
        case 680: break;
        case 188: 
        case 286: 
        case 287: 
          { 
    handlePHPEnd();
    yybegin(YYINITIAL);
    return createSymbol(ParserConstants5.T_SEMICOLON);  /* implicit ';' at php-end tag */
 }
        case 681: break;
        case 152: 
        case 195: 
          { 
    pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants5.T_OBJECT_OPERATOR);
 }
        case 682: break;
        case 75: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants5.T_QUATE);
 }
        case 683: break;
        case 14: 
        case 74: 
        case 76: 
        case 80: 
        case 82: 
        case 86: 
          { 
	// do nothing
 }
        case 684: break;
        case 66: 
          { 
    yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants5.T_QUATE);
 }
        case 685: break;
        case 190: 
          { 
    return createFullSymbol(ParserConstants5.T_CONSTANT_ENCAPSED_STRING);
 }
        case 686: break;
        case 277: 
          { 
	return createSymbol(ParserConstants5.T_IS_NOT_IDENTICAL);
 }
        case 687: break;
        case 89: 
          { 
    popState();
    return createFullSymbol(ParserConstants5.T_STRING);
 }
        case 688: break;
        case 104: 
        case 577: 
          { 
    if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants5.T_INLINE_HTML);
    }
 }
        case 689: break;
        case 65: 
          { 
	/* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants5.T_CURLY_CLOSE);
 }
        case 690: break;
        case 88: 
          { 
    yypushback(yylength());
    popState();
 }
        case 691: break;
        case 205: 
        case 206: 
          { 
    String text = yytext();
    int length = text.length();
    text = text.trim();
    boolean foundNP = false;
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        foundNP = true;
    }
    if (text.equals(heredoc)) {
        if (foundNP) {
            yypushback(length - text.length());
        }
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants5.T_END_HEREDOC);
    } else {
        return createFullSymbol(ParserConstants5.T_STRING);
    }
 }
        case 692: break;
        case 530: 
          { 
	return createSymbol(ParserConstants5.T_PROTECTED);
 }
        case 693: break;
        case 525: 
          { 
	return createSymbol(ParserConstants5.T_INTERFACE);
 }
        case 694: break;
        case 524: 
          { 
	return createSymbol(ParserConstants5.T_ENDSWITCH);
 }
        case 695: break;
        case 508: 
          { 
	return createSymbol(ParserConstants5.T_ABSTRACT);
 }
        case 696: break;
        case 506: 
          { 
	return createSymbol(ParserConstants5.T_CONTINUE);
 }
        case 697: break;
        case 505: 
          { 
	return createSymbol(ParserConstants5.T_FUNCTION);
 }
        case 698: break;
        case 500: 
          { 
	return createSymbol(ParserConstants5.T_ENDWHILE);
 }
        case 699: break;
        case 446: 
          { 
	return createSymbol(ParserConstants5.T_BOOL_CAST);
 }
        case 700: break;
        case 79: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants5.T_SINGLE_QUATE);
 }
        case 701: break;
        case 12: 
        case 13: 
        case 105: 
          { 
    return createSymbol(ParserConstants5.T_INLINE_HTML);
 }
        case 702: break;
        case 67: 
          { 
    yybegin(ST_SINGLE_QUOTE);
    return createSymbol(ParserConstants5.T_SINGLE_QUATE);
 }
        case 703: break;
        case 68: 
          { 
    yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants5.T_BACKQUATE);
 }
        case 704: break;
        case 171: 
          { 
	return createSymbol(ParserConstants5.T_IS_EQUAL);
 }
        case 705: break;
        case 177: 
          { 
	return createSymbol(ParserConstants5.T_MUL_EQUAL);
 }
        case 706: break;
        case 178: 
          { 
	return createSymbol(ParserConstants5.T_DIV_EQUAL);
 }
        case 707: break;
        case 181: 
          { 
	return createSymbol(ParserConstants5.T_MOD_EQUAL);
 }
        case 708: break;
        case 182: 
          { 
	return createSymbol(ParserConstants5.T_AND_EQUAL);
 }
        case 709: break;
        case 184: 
          { 
	return createSymbol(ParserConstants5.T_OR_EQUAL);
 }
        case 710: break;
        case 186: 
          { 
	return createSymbol(ParserConstants5.T_XOR_EQUAL);
 }
        case 711: break;
        case 259: 
          { 
	return createSymbol(ParserConstants5.T_SR_EQUAL);
 }
        case 712: break;
        case 278: 
          { 
	return createSymbol(ParserConstants5.T_SL_EQUAL);
 }
        case 713: break;
        case 398: 
          { 
	return createSymbol(ParserConstants5.T_INT_CAST);
 }
        case 714: break;
        case 83: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants5.T_BACKQUATE);
 }
        case 715: break;
        case 557: 
          { 
    return createSymbol(ParserConstants5.T_FUNC_C);
 }
        case 716: break;
        case 154: 
          { 
	return createSymbol(ParserConstants5.T_SR);
 }
        case 717: break;
        case 151: 
          { 
	return createSymbol(ParserConstants5.T_DEC);
 }
        case 718: break;
        case 145: 
          { 
	return createSymbol(ParserConstants5.T_AS);
 }
        case 719: break;
        case 128: 
          { 
	return createSymbol(ParserConstants5.T_DO);
 }
        case 720: break;
        case 120: 
          { 
	return createSymbol(ParserConstants5.T_IF);
 }
        case 721: break;
        case 115: 
          { 
	return createSymbol(ParserConstants5.T_INC);
 }
        case 722: break;
        case 90: 
          { 
    yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
 }
        case 723: break;
        case 175: 
          { 
	return createSymbol(ParserConstants5.T_SL);
 }
        case 724: break;
        case 197: 
          { 
    pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants5.T_DOLLAR_OPEN_CURLY_BRACES);
 }
        case 725: break;
        case 231: 
          { 
	return createSymbol(ParserConstants5.T_TRY);
 }
        case 726: break;
        case 238: 
          { 
	return createSymbol(ParserConstants5.T_FOR);
 }
        case 727: break;
        case 240: 
          { 
	return createSymbol(ParserConstants5.T_USE);
 }
        case 728: break;
        case 241: 
          { 
	return createSymbol(ParserConstants5.T_NEW);
 }
        case 729: break;
        case 260: 
          { 
	return createSymbol(ParserConstants5.T_VAR);
 }
        case 730: break;
        case 417: 
        case 418: 
          { 
    handlePHPStart();
    yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
 }
        case 731: break;
        case 103: 
          { 
    if (asp_tags) {
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
		//return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants5.T_INLINE_HTML);
    }
 }
        case 732: break;
        case 24: 
          { 
	handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
 }
        case 733: break;
        case 516: 
          { 
    return createSymbol(ParserConstants5.T_LINE);
 }
        case 734: break;
        case 512: 
          { 
    return createSymbol(ParserConstants5.T_FILE);
 }
        case 735: break;
        case 106: 
        case 214: 
          { 
    return createFullSymbol(ParserConstants5.T_DNUMBER);
 }
        case 736: break;
        case 15: 
        case 19: 
          { 
    return createFullSymbol(ParserConstants5.T_DNUMBER);
 }
        case 737: break;
        case 187: 
          { 
    return createFullSymbol(ParserConstants5.T_VARIABLE);
 }
        case 738: break;
        case 223: 
          { 
    return createFullSymbol(ParserConstants5.T_DNUMBER);
 }
        case 739: break;
        case 98: 
        case 99: 
          { 
	handleCommentEnd();
	yybegin(ST_IN_SCRIPTING);
	//return T_COMMENT;
 }
        case 740: break;
        case 180: 
        case 284: 
        case 285: 
          { 
    if (asp_tags) {
        handlePHPEnd();
        yybegin(YYINITIAL);
        return createSymbol(ParserConstants5.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ParserConstants5.T_INLINE_HTML);
    }
 }
        case 741: break;
        case 565: 
          { 
	return createSymbol(ParserConstants5.T_HALT_COMPILER);
 }
        case 742: break;
        case 556: 
          { 
	return createSymbol(ParserConstants5.T_REQUIRE_ONCE);
 }
        case 743: break;
        case 555: 
          { 
	return createSymbol(ParserConstants5.T_INCLUDE_ONCE);
 }
        case 744: break;
        case 108: 
          { 
	return createSymbol(ParserConstants5.T_CONCAT_EQUAL);
 }
        case 745: break;
        case 170: 
          { 
	return createSymbol(ParserConstants5.T_DOUBLE_ARROW);
 }
        case 746: break;
        case 172: 
        case 173: 
          { 
	return createSymbol(ParserConstants5.T_IS_NOT_EQUAL);
 }
        case 747: break;
        case 276: 
          { 
	return createSymbol(ParserConstants5.T_IS_IDENTICAL);
 }
        case 748: break;
        case 199: 
        case 201: 
        case 202: 
          { 
    switch (yytext().charAt(1)) {
        case 'n':
            break;
        case 't':
            break;
        case 'r':
            break;
        case '\\':
            break;
        case '$':
            break;
        default:
            return createSymbol(ParserConstants5.T_BAD_CHARACTER);
    }
    return createSymbol(ParserConstants5.T_CHARACTER);
 }
        case 749: break;
        case 198: 
          { 
    pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants5.T_CURLY_OPEN);
 }
        case 750: break;
        case 87: 
          { 
    return createFullSymbol(ParserConstants5.T_STRING);
 }
        case 751: break;
        case 17: 
        case 20: 
        case 21: 
        case 22: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 42: 
        case 44: 
        case 46: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 118: 
        case 119: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 157: 
        case 168: 
        case 169: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 232: 
        case 233: 
        case 234: 
        case 236: 
        case 237: 
        case 239: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 301: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 357: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 366: 
        case 367: 
        case 368: 
        case 370: 
        case 372: 
        case 373: 
        case 374: 
        case 376: 
        case 377: 
        case 379: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 391: 
        case 393: 
        case 394: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 420: 
        case 421: 
        case 423: 
        case 424: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 439: 
        case 440: 
        case 442: 
        case 443: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 471: 
        case 472: 
        case 475: 
        case 477: 
        case 479: 
        case 481: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 497: 
        case 498: 
        case 499: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 507: 
        case 509: 
        case 513: 
        case 514: 
        case 515: 
        case 517: 
        case 522: 
        case 523: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 531: 
        case 533: 
        case 534: 
        case 539: 
        case 542: 
        case 543: 
        case 544: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 558: 
        case 561: 
        case 563: 
          { 
    return createFullSymbol(ParserConstants5.T_STRING);
 }
        case 752: break;
        case 413: 
        case 414: 
          { 
    heredoc = yytext().substring(3).trim();    // for '<<<'
    yybegin(ST_HEREDOC);
    return createSymbol(ParserConstants5.T_START_HEREDOC);
 }
        case 753: break;
        case 179: 
          { 
	handleCommentStart();
    yybegin(ST_COMMENT);
 }
        case 754: break;
        case 208: 
          { 
	handleCommentEnd();
    yybegin(ST_IN_SCRIPTING);
 }
        case 755: break;
        case 209: 
          { 
     handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
 }
        case 756: break;
        case 430: 
          { 
    /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ParserConstants5.T_DEFINE);
 }
        case 757: break;
        case 23: 
          { 
 }
        case 758: break;
        case 211: 
          { 
    String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG_WITH_ECHO;
    } else {
        return createSymbol(ParserConstants5.T_INLINE_HTML);
    }
 }
        case 759: break;
        case 282: 
          { 
handlePHPDocStart();
yybegin(ST_DOCBLOCK);
 }
        case 760: break;
        case 353: 
          { 
 }
        case 761: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, i.e. it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CompletionLexer5 <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        CompletionLexer5 scanner = null;
        try {
          scanner = new CompletionLexer5( new java.io.FileReader(argv[i]) );
          while ( !scanner.yy_atEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
