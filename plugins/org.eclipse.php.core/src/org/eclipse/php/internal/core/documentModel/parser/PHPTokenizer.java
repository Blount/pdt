/* The following code was generated by JFlex 1.2.2 on 10-11-16 ÏÂÎç5:15 */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/
/*nlsXXX*/
package org.eclipse.php.internal.core.documentModel.parser;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.php.internal.core.PHPVersion;
import org.eclipse.php.internal.core.documentModel.parser.regions.PhpScriptRegion;
import org.eclipse.php.internal.core.project.ProjectOptions;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegionList;
import org.eclipse.wst.sse.core.internal.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.Logger;
import org.eclipse.wst.xml.core.internal.parser.ContextRegionContainer;
import org.eclipse.wst.xml.core.internal.parser.IntStack;
import org.eclipse.wst.xml.core.internal.parser.regions.XMLParserRegionFactory;
import org.eclipse.wst.xml.core.internal.regions.DOMRegionContext;



/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 10-11-16 ÏÂÎç5:15 from the specification file
 * <tt>file:/D:/eclipse/workspace/org.eclipse.php.core/Resources/parserTools/highlighting/PHPTokenizer.jflex</tt>
 */
public class PHPTokenizer implements BlockTokenizer, PHPRegionContext, DOMRegionContext {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_XML_COMMENT_END = 4;
  final public static int ST_BLOCK_TAG_SCAN = 30;
  final public static int ST_DHTML_ATTRIBUTE_VALUE = 14;
  final public static int ST_XML_PI_ATTRIBUTE_NAME = 8;
  final public static int ST_DHTML_TAG_CLOSE = 15;
  final public static int ST_XML_ATTRIBUTE_VALUE_DQUOTED = 33;
  final public static int ST_DHTML_EQUALS = 13;
  final public static int ST_XML_PI_ATTRIBUTE_VALUE = 10;
  final public static int ST_XML_ATTRIBUTE_VALUE = 19;
  final public static int ST_XML_ATTRIBUTE_VALUE_SQUOTED = 32;
  final public static int ST_XML_ATTRIBUTE_NAME = 17;
  final public static int ST_XML_EQUALS = 18;
  final public static int YYINITIAL = 0;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 25;
  final public static int ST_XML_ELEMENT_DECLARATION = 26;
  final public static int ST_XML_DECLARATION_CLOSE = 21;
  final public static int ST_XML_DOCTYPE_DECLARATION = 22;
  final public static int ST_CDATA_END = 2;
  final public static int ST_PI_WS = 6;
  final public static int ST_CDATA_TEXT = 1;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 27;
  final public static int ST_XML_ATTLIST_DECLARATION = 28;
  final public static int ST_XML_PI_EQUALS = 9;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 29;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 24;
  final public static int ST_DHTML_ATTRIBUTE_NAME = 12;
  final public static int ST_PHP_CONTENT = 31;
  final public static int ST_ABORT_EMBEDDED = 15;
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 23;
  final public static int ST_PI_CONTENT = 7;
  final public static int ST_BLOCK_TAG_INTERNAL_SCAN = 34;
  final public static int ST_PI = 5;
  final public static int ST_XML_DECLARATION = 20;
  final public static int ST_XML_TAG_NAME = 16;
  final public static int ST_XML_PI_TAG_CLOSE = 11;
  final public static int ST_XML_COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\22\2\0\1\14\22\0\1\14\1\21\1\11\1\56"+
    "\1\71\1\17\1\12\1\13\1\16\1\16\1\16\1\16\1\16\1\7"+
    "\1\6\1\3\12\15\1\10\1\62\1\1\1\42\1\2\1\4\1\16"+
    "\1\26\1\63\1\24\1\25\1\45\1\60\1\33\1\70\1\37\1\33"+
    "\1\33\1\53\1\54\1\41\1\40\1\44\1\33\1\35\1\57\1\27"+
    "\1\61\2\33\1\52\1\43\1\33\1\23\1\0\1\20\1\0\1\10"+
    "\1\0\1\47\1\63\1\64\1\50\1\34\1\60\1\33\1\67\1\37"+
    "\2\33\1\32\1\31\1\41\1\40\1\44\1\33\1\35\1\36\1\46"+
    "\1\61\1\33\1\33\1\30\1\51\1\33\1\72\1\55\72\0\1\66"+
    "\10\0\27\65\1\0\37\65\1\0\72\65\2\0\13\65\2\0\10\65"+
    "\1\0\65\65\1\0\104\65\11\0\44\65\3\0\2\65\4\0\36\65"+
    "\70\0\131\65\22\0\7\65\16\0\2\66\56\0\106\66\32\0\2\66"+
    "\44\0\1\65\1\66\3\65\1\0\1\65\1\0\24\65\1\0\54\65"+
    "\1\0\7\65\3\0\1\65\1\0\1\65\1\0\1\65\1\0\1\65"+
    "\1\0\22\65\15\0\14\65\1\0\102\65\1\0\14\65\1\0\44\65"+
    "\1\0\4\66\11\0\65\65\2\0\2\65\2\0\2\65\3\0\34\65"+
    "\2\0\10\65\2\0\2\65\67\0\46\65\2\0\1\65\7\0\46\65"+
    "\12\0\21\66\1\0\27\66\1\0\3\66\1\0\1\66\1\0\2\66"+
    "\1\0\1\66\13\0\33\65\5\0\3\65\56\0\32\65\5\0\1\66"+
    "\12\65\10\66\15\0\12\66\6\0\1\66\107\65\2\0\5\65\1\0"+
    "\17\65\1\0\4\65\1\0\1\65\17\66\2\65\2\66\1\0\4\66"+
    "\2\0\12\66\u0207\0\3\66\1\0\65\65\2\0\1\66\1\65\20\66"+
    "\3\0\4\66\3\0\12\65\2\66\2\0\12\66\21\0\3\66\1\0"+
    "\10\65\2\0\2\65\2\0\26\65\1\0\7\65\1\0\1\65\3\0"+
    "\4\65\2\0\1\66\1\0\7\66\2\0\2\66\2\0\3\66\11\0"+
    "\1\66\4\0\2\65\1\0\3\65\2\66\2\0\12\66\2\65\20\0"+
    "\1\66\2\0\6\65\4\0\2\65\2\0\26\65\1\0\7\65\1\0"+
    "\2\65\1\0\2\65\1\0\2\65\2\0\1\66\1\0\5\66\4\0"+
    "\2\66\2\0\3\66\13\0\4\65\1\0\1\65\7\0\12\66\2\66"+
    "\3\65\14\0\3\66\1\0\7\65\1\0\1\65\1\0\3\65\1\0"+
    "\26\65\1\0\7\65\1\0\2\65\1\0\5\65\2\0\1\66\1\65"+
    "\10\66\1\0\3\66\1\0\3\66\22\0\1\65\5\0\12\66\21\0"+
    "\3\66\1\0\10\65\2\0\2\65\2\0\26\65\1\0\7\65\1\0"+
    "\2\65\2\0\4\65\2\0\1\66\1\65\6\66\3\0\2\66\2\0"+
    "\3\66\10\0\2\66\4\0\2\65\1\0\3\65\4\0\12\66\22\0"+
    "\2\66\1\0\6\65\3\0\3\65\1\0\4\65\3\0\2\65\1\0"+
    "\1\65\1\0\2\65\3\0\2\65\3\0\3\65\3\0\10\65\1\0"+
    "\3\65\4\0\5\66\3\0\3\66\1\0\4\66\11\0\1\66\17\0"+
    "\11\66\21\0\3\66\1\0\10\65\1\0\3\65\1\0\27\65\1\0"+
    "\12\65\1\0\5\65\4\0\7\66\1\0\3\66\1\0\4\66\7\0"+
    "\2\66\11\0\2\65\4\0\12\66\22\0\2\66\1\0\10\65\1\0"+
    "\3\65\1\0\27\65\1\0\12\65\1\0\5\65\4\0\7\66\1\0"+
    "\3\66\1\0\4\66\7\0\2\66\7\0\1\65\1\0\2\65\4\0"+
    "\12\66\22\0\2\66\1\0\10\65\1\0\3\65\1\0\27\65\1\0"+
    "\20\65\4\0\6\66\2\0\3\66\1\0\4\66\11\0\1\66\10\0"+
    "\2\65\4\0\12\66\221\0\56\65\1\0\1\65\1\66\2\65\7\66"+
    "\5\0\6\65\1\66\10\66\1\0\12\66\47\0\2\65\1\0\1\65"+
    "\2\0\2\65\1\0\1\65\2\0\1\65\6\0\4\65\1\0\7\65"+
    "\1\0\3\65\1\0\1\65\1\0\1\65\2\0\2\65\1\0\2\65"+
    "\1\0\1\65\1\66\2\65\6\66\1\0\2\66\1\65\2\0\5\65"+
    "\1\0\1\66\1\0\6\66\2\0\12\66\76\0\2\66\6\0\12\66"+
    "\13\0\1\66\1\0\1\66\1\0\1\66\4\0\2\66\10\65\1\0"+
    "\41\65\7\0\24\66\1\0\6\66\4\0\6\66\1\0\1\66\1\0"+
    "\25\66\3\0\7\66\1\0\1\66\346\0\46\65\12\0\47\65\11\0"+
    "\1\65\1\0\2\65\1\0\3\65\1\0\1\65\1\0\2\65\1\0"+
    "\5\65\51\0\1\65\1\0\1\65\1\0\1\65\13\0\1\65\1\0"+
    "\1\65\1\0\1\65\3\0\2\65\3\0\1\65\5\0\3\65\1\0"+
    "\1\65\1\0\1\65\1\0\1\65\1\0\1\65\3\0\2\65\3\0"+
    "\2\65\1\0\1\65\50\0\1\65\11\0\1\65\2\0\1\65\2\0"+
    "\2\65\7\0\2\65\1\0\1\65\1\0\7\65\50\0\1\65\4\0"+
    "\1\65\10\0\1\65\u0c06\0\234\65\4\0\132\65\6\0\26\65\2\0"+
    "\6\65\2\0\46\65\2\0\6\65\2\0\10\65\1\0\1\65\1\0"+
    "\1\65\1\0\1\65\1\0\37\65\2\0\65\65\1\0\7\65\1\0"+
    "\1\65\3\0\3\65\1\0\7\65\3\0\4\65\2\0\6\65\4\0"+
    "\15\65\5\0\3\65\1\0\7\65\323\0\15\66\4\0\1\66\104\0"+
    "\1\65\3\0\2\65\2\0\1\65\121\0\3\65\u0e82\0\1\66\1\0"+
    "\1\65\31\0\11\65\6\66\1\0\5\66\13\0\124\65\4\0\2\66"+
    "\2\0\2\66\2\0\132\65\1\0\3\66\6\0\50\65\u1cd3\0\u51a6\65"+
    "\u0c5a\0\u2ba4\65\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    59,   118,   177,   236,   295,   354,   413,   472,   531, 
      590,   649,   708,   767,   826,   885,   944,  1003,  1062,  1121, 
     1180,  1239,  1298,  1357,  1416,  1475,  1534,  1593,  1652,  1711, 
     1770,  1829,  1888,  1947,  2006,  2065,  2124,  2183,  2242,  2301, 
     2360,  2419,  2360,  2419,  2478,  2360,  2360,  2419,  2537,  2596, 
     2655,  2714,  2773,  2832,  2891,  2950,  3009,  3068,  2360,  2419, 
     3127,  3186,  3245,  2360,  3304,  3304,  3363,  3422,  3481,  3127, 
     2360,  3540,  3599,  2360,  3658,  3717,  3776,  3835,  3894,  2360, 
     3953,  4012,  4071,  4130,  4189,  4248,  4307,  2360,  4366,  4425, 
     4484,  4543,  4602,  4661,  2360,  4720,  4779,  4838,  4897,  4956, 
     5015,  5074,  5133,  5133,  5192,  5251,  5310,  5369,  5369,  5428, 
     5487,  5546,  5605,  5605,  5664,  5723,  5782,  5841,  2360,  5900, 
     5900,  5959,  6018,  6077,  6136,  2360,  2360,  2419,  2360,  2419, 
     6195,  6254,  6313,  6372,  2360,  6431,  6490,  6549,  2360,  6608, 
     2537,  2537,  2360,  6667,  2360,  6726,  6785,  6844,  6903,  6962, 
     7021,  7080,  7139,  2537,  7198,  2360,  7257,  7316,  7375,  7434, 
     2360,  2360,  3304,  3422,  2360,  3481,  3540,  3658,  3717,  7493, 
     3776,  2360,  7552,  3835,  2360,  7611,  4366,  7670,  4543,  2360, 
     4602,  6726,  7729,  7788,  7847,  4897,  2360,  7906,  7965,  5133, 
     8024,  5192,  2360,  8083,  8142,  8201,  8201,  8260,  8319,  5310, 
     5133,  5369,  8378,  5428,  2360,  8437,  5487,  5546,  5369,  5605, 
     8496,  5664,  2360,  8555,  8614,  8673,  8673,  8732,  8791,  8850, 
     5782,  8909,  5900,  8968,  5959,  2360,  9027,  9086,  9145,  9145, 
     9204,  9263,  9322,  6077,  9381,  2360,  6431,  2360,  6608,  9440, 
     9499,  9558,  9617,  9676,  9735,  2360,  9794,  9853,  2360,  2360, 
     2360,  9912,  2773,  9971,  2773, 10030, 10089, 10148, 10207, 10266, 
     8083, 10325, 10325,  8555, 10384, 10384, 10443, 10502,  9027, 10561, 
    10561, 10620, 10679, 10738,  2360, 10797, 10856, 10915,  2360, 10974, 
    11033, 11092, 11151, 11210, 11269, 11328, 11387,  8260,  8732, 11446, 
    11505,  9204, 11564, 11623, 11682, 11741, 11800, 11859, 11918, 11977, 
    12036, 12095, 12154, 12213, 12272, 12331, 12390, 12449, 12508, 12567, 
    12626,  2773, 12685, 12744, 12803,  2360,  2360, 12862, 12921, 12980, 
    13039,  2360,  2360,  2360, 13098, 13157, 13216, 13275, 13334, 13393, 
     2360, 13452,  5782,  6077, 13511, 13570, 13629, 13688,  2773
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\44\1\45\3\44\1\46\4\44\1\47\1\44\1\46"+
    "\2\44\1\50\2\44\1\46\50\44\1\51\1\52\71\51"+
    "\1\53\1\54\16\53\1\55\1\53\1\56\50\53\1\57"+
    "\1\60\3\57\1\61\6\57\1\61\5\57\1\61\50\57"+
    "\1\53\1\54\5\53\1\62\12\53\1\56\51\53\1\54"+
    "\2\53\1\63\1\64\2\53\1\65\3\53\1\64\5\53"+
    "\1\64\1\53\4\65\1\66\6\65\1\67\2\65\1\53"+
    "\1\65\1\70\5\65\1\71\2\65\2\53\3\65\1\53"+
    "\3\65\1\53\2\65\3\53\1\54\2\53\1\63\1\72"+
    "\6\53\1\72\5\53\1\72\50\53\1\73\1\74\2\73"+
    "\1\75\15\73\1\56\50\73\1\53\1\54\2\53\1\76"+
    "\1\64\2\53\1\77\3\53\1\64\5\53\1\64\1\53"+
    "\16\77\1\53\12\77\2\53\3\77\1\53\3\77\1\53"+
    "\2\77\3\53\1\54\2\53\1\76\1\64\2\53\1\77"+
    "\3\53\1\64\5\53\1\64\1\53\16\77\1\100\12\77"+
    "\2\53\3\77\1\53\3\77\1\53\2\77\2\53\1\101"+
    "\1\54\1\53\1\102\1\103\1\64\3\101\1\104\1\101"+
    "\1\105\1\64\5\101\1\64\50\101\1\53\1\54\2\53"+
    "\1\106\15\53\1\56\51\53\1\54\1\107\1\110\4\53"+
    "\1\111\11\53\1\56\1\53\16\111\1\53\12\111\2\53"+
    "\3\111\1\53\3\111\1\53\2\111\3\53\1\54\1\107"+
    "\1\110\4\53\1\111\11\53\1\56\1\53\16\111\1\112"+
    "\12\111\2\53\3\111\1\53\3\111\1\53\2\111\2\53"+
    "\1\113\1\54\1\107\1\114\1\113\1\53\3\113\1\115"+
    "\1\113\1\116\1\53\5\113\1\56\50\113\1\53\1\54"+
    "\20\53\1\56\50\53\1\117\1\45\1\120\1\121\1\117"+
    "\1\122\2\117\1\123\3\117\1\122\5\117\1\122\1\117"+
    "\16\124\1\117\12\124\2\117\3\124\1\117\3\124\1\117"+
    "\2\124\2\117\1\53\1\125\1\120\1\121\1\53\1\126"+
    "\2\53\1\127\3\53\1\126\5\53\1\126\1\53\16\127"+
    "\1\53\12\127\2\53\3\127\1\53\3\127\1\53\2\127"+
    "\3\53\1\125\1\120\1\121\1\53\1\126\2\53\1\127"+
    "\3\53\1\126\5\53\1\126\1\53\16\127\1\130\12\127"+
    "\2\53\3\127\1\53\3\127\1\53\2\127\2\53\1\131"+
    "\1\132\1\120\1\133\1\131\1\126\3\131\1\134\1\131"+
    "\1\135\1\126\5\131\1\126\50\131\1\53\1\136\1\137"+
    "\2\53\1\126\6\53\1\126\5\53\1\126\2\53\1\140"+
    "\1\141\5\53\1\142\10\53\1\142\1\53\1\141\1\140"+
    "\23\53\1\54\1\137\2\53\1\126\6\53\1\126\5\53"+
    "\1\126\1\143\50\53\1\54\1\137\2\53\1\126\2\53"+
    "\1\144\3\53\1\126\5\53\1\126\1\143\16\144\1\53"+
    "\12\144\2\53\3\144\1\53\3\144\1\53\2\144\3\53"+
    "\1\54\1\137\2\53\1\126\6\53\1\126\5\53\1\126"+
    "\1\143\12\53\1\145\5\53\1\146\12\53\1\145\13\53"+
    "\1\147\1\54\1\137\1\150\1\147\1\126\3\147\1\151"+
    "\1\147\1\152\1\126\5\147\1\126\1\153\47\147\1\154"+
    "\1\54\1\137\1\155\1\154\1\126\3\154\1\156\1\154"+
    "\1\157\1\126\5\154\1\126\1\160\47\154\1\161\1\54"+
    "\1\137\1\162\1\161\1\126\3\161\1\163\1\161\1\164"+
    "\1\126\5\161\1\126\50\161\1\165\1\166\1\167\70\165"+
    "\1\170\1\54\1\137\1\171\1\170\1\126\3\170\1\172"+
    "\1\170\1\173\1\126\5\170\1\126\50\170\1\174\1\175"+
    "\1\176\70\174\1\177\1\200\71\177\1\201\1\202\2\201"+
    "\1\203\12\201\1\203\53\201\1\204\1\205\3\204\1\206"+
    "\5\204\1\207\1\206\5\204\1\206\33\204\1\210\12\204"+
    "\1\210\1\204\1\211\1\205\3\211\1\212\3\211\1\213"+
    "\2\211\1\212\5\211\1\212\33\211\1\214\12\211\1\214"+
    "\1\211\1\53\1\54\3\53\1\215\6\53\1\215\5\53"+
    "\1\216\50\53\1\44\1\0\10\44\1\0\4\44\1\0"+
    "\53\44\3\0\1\217\1\220\12\0\1\221\1\0\1\222"+
    "\51\0\1\44\1\223\3\44\1\46\4\44\1\0\1\44"+
    "\1\46\2\44\1\0\2\44\1\46\50\44\5\0\1\224"+
    "\2\0\1\225\3\0\1\224\5\0\1\224\1\0\16\225"+
    "\1\0\12\225\1\0\1\226\3\225\1\0\3\225\1\0"+
    "\2\225\7\0\1\224\2\0\1\227\3\0\1\224\5\0"+
    "\1\224\1\0\16\227\1\0\12\227\2\0\3\227\1\0"+
    "\3\227\1\0\2\227\101\0\1\220\12\0\1\221\1\0"+
    "\1\230\71\0\1\231\53\0\1\223\3\0\1\232\6\0"+
    "\1\232\5\0\1\232\57\0\1\233\65\0\1\234\75\0"+
    "\1\64\6\0\1\64\5\0\1\64\56\0\3\65\4\0"+
    "\1\65\6\0\16\65\1\0\12\65\2\0\3\65\1\0"+
    "\6\65\10\0\3\65\4\0\1\65\6\0\5\65\1\235"+
    "\10\65\1\0\11\65\1\236\2\0\3\65\1\0\6\65"+
    "\10\0\3\65\4\0\1\65\6\0\5\65\1\237\10\65"+
    "\1\0\11\65\1\237\2\0\3\65\1\0\6\65\10\0"+
    "\3\65\4\0\1\65\6\0\16\65\1\0\12\65\2\0"+
    "\3\65\1\0\4\65\2\240\10\0\3\65\4\0\1\65"+
    "\6\0\5\65\1\236\10\65\1\0\11\65\1\236\2\0"+
    "\3\65\1\0\6\65\7\0\1\72\6\0\1\72\5\0"+
    "\1\72\52\0\1\241\72\0\1\242\76\0\3\77\4\0"+
    "\1\77\6\0\16\77\1\0\12\77\2\0\3\77\1\0"+
    "\6\77\2\0\1\101\2\0\1\243\1\101\1\0\3\101"+
    "\1\0\1\101\2\0\5\101\1\0\51\101\1\0\1\242"+
    "\1\243\1\101\1\0\3\101\1\0\1\101\2\0\5\101"+
    "\1\0\50\101\1\244\1\0\7\244\1\245\61\244\1\246"+
    "\1\0\11\246\1\245\57\246\2\0\1\107\1\247\75\0"+
    "\3\111\4\0\1\111\6\0\16\111\1\0\12\111\2\0"+
    "\3\111\1\0\6\111\2\0\1\113\2\0\1\250\1\113"+
    "\1\0\3\113\1\0\1\113\2\0\5\113\1\0\51\113"+
    "\1\0\1\107\1\251\1\113\1\0\3\113\1\0\1\113"+
    "\2\0\5\113\1\0\50\113\1\115\1\0\1\252\1\253"+
    "\1\115\1\252\3\115\1\254\1\115\2\252\5\115\1\252"+
    "\50\115\1\116\1\0\1\255\1\256\1\116\1\255\3\116"+
    "\1\255\1\116\1\254\1\255\5\116\1\255\50\116\1\117"+
    "\3\0\20\117\16\0\1\117\12\0\2\117\3\0\1\117"+
    "\3\0\1\117\2\0\2\117\2\0\1\257\70\0\1\117"+
    "\1\223\2\0\1\117\1\122\6\117\1\122\5\117\1\122"+
    "\1\117\16\0\1\117\12\0\2\117\3\0\1\117\3\0"+
    "\1\117\2\0\3\117\3\0\2\117\3\123\4\117\1\123"+
    "\6\117\16\124\1\117\12\124\2\117\3\124\1\117\3\124"+
    "\1\123\2\124\2\117\6\0\3\124\4\0\1\124\6\0"+
    "\16\124\1\0\12\124\2\0\3\124\1\0\6\124\5\0"+
    "\1\217\1\220\3\0\1\260\6\0\1\221\1\0\1\222"+
    "\2\0\16\260\1\0\12\260\2\0\3\260\1\0\3\260"+
    "\1\0\2\260\3\0\1\223\3\0\1\126\6\0\1\126"+
    "\5\0\1\126\56\0\3\127\4\0\1\127\6\0\16\127"+
    "\1\0\12\127\2\0\3\127\1\0\6\127\2\0\1\131"+
    "\2\0\1\261\1\131\1\0\3\131\1\0\1\131\2\0"+
    "\5\131\1\0\50\131\3\0\1\217\1\220\3\0\1\262"+
    "\6\0\1\221\1\0\1\222\2\0\16\262\1\0\12\262"+
    "\2\0\3\262\1\0\3\262\1\0\2\262\2\0\1\131"+
    "\1\0\1\257\1\261\1\131\1\0\3\131\1\0\1\131"+
    "\2\0\5\131\1\0\50\131\1\263\1\0\7\263\1\264"+
    "\61\263\1\265\1\0\11\265\1\264\57\265\3\0\1\217"+
    "\1\220\12\0\1\221\1\0\1\266\111\0\1\267\61\0"+
    "\1\270\16\0\1\270\56\0\1\271\20\0\1\271\17\0"+
    "\20\272\1\273\52\272\6\0\3\144\4\0\1\144\6\0"+
    "\16\144\1\0\12\144\2\0\3\144\1\0\6\144\45\0"+
    "\1\274\5\0\1\274\102\0\1\275\11\0\1\147\2\0"+
    "\1\276\1\147\1\0\3\147\1\0\1\147\2\0\5\147"+
    "\1\0\50\147\1\151\1\0\1\277\1\300\1\151\1\277"+
    "\3\151\1\301\1\151\2\277\5\151\1\277\50\151\1\302"+
    "\1\0\1\303\1\304\1\305\1\303\3\305\1\303\1\302"+
    "\1\306\1\307\3\305\1\302\1\305\1\307\1\302\31\305"+
    "\1\302\7\305\2\302\3\305\1\302\1\153\2\272\1\310"+
    "\1\153\1\272\3\153\1\272\1\153\2\272\3\153\1\311"+
    "\1\153\1\272\50\153\1\154\2\0\1\312\1\154\1\0"+
    "\3\154\1\0\1\154\2\0\5\154\1\0\50\154\1\156"+
    "\2\313\1\314\1\156\1\313\3\156\1\315\1\156\2\313"+
    "\5\156\1\313\50\156\1\157\2\316\1\317\1\157\1\316"+
    "\3\157\1\316\1\157\1\315\1\316\5\157\1\316\50\157"+
    "\1\160\2\272\1\320\1\160\1\272\3\160\1\272\1\160"+
    "\2\272\3\160\1\321\1\160\1\272\50\160\1\161\2\0"+
    "\1\322\1\161\1\0\3\161\1\0\1\161\2\0\5\161"+
    "\1\0\50\161\1\163\1\0\1\323\1\324\1\163\1\323"+
    "\3\163\1\325\1\163\2\323\5\163\1\323\50\163\1\326"+
    "\1\0\1\327\1\330\1\331\1\327\3\331\1\327\1\326"+
    "\1\332\1\333\3\331\1\326\1\331\1\333\1\326\31\331"+
    "\1\326\7\331\2\326\3\331\1\326\2\165\1\0\72\165"+
    "\1\0\1\165\1\334\12\165\1\335\1\165\1\336\51\165"+
    "\1\170\2\0\1\337\1\170\1\0\3\170\1\0\1\170"+
    "\2\0\5\170\1\0\50\170\1\172\1\0\1\340\1\341"+
    "\1\172\1\340\3\172\1\342\1\172\2\340\5\172\1\340"+
    "\50\172\1\343\1\0\1\344\1\345\1\346\1\344\3\346"+
    "\1\344\1\343\1\347\1\350\3\346\1\343\1\346\1\350"+
    "\1\343\31\346\1\343\7\346\2\343\3\346\1\343\2\174"+
    "\1\0\72\174\1\0\1\174\1\351\12\174\1\352\1\174"+
    "\1\353\51\174\2\0\1\354\70\0\1\204\1\0\11\204"+
    "\1\0\42\204\1\355\12\204\1\355\1\204\3\0\1\356"+
    "\1\220\12\0\1\221\1\0\1\230\51\0\1\204\1\223"+
    "\3\204\1\206\5\204\1\0\1\206\5\204\1\206\33\204"+
    "\1\355\12\204\1\355\73\204\1\0\1\211\1\0\7\211"+
    "\1\0\44\211\1\357\12\211\1\357\2\211\1\223\3\211"+
    "\1\212\3\211\1\0\2\211\1\212\5\211\1\212\33\211"+
    "\1\357\12\211\1\357\73\211\45\0\1\360\35\0\1\361"+
    "\13\0\1\362\53\0\1\363\73\0\1\224\2\0\1\44"+
    "\3\0\1\224\5\0\1\224\1\0\16\44\1\0\12\44"+
    "\2\0\3\44\1\0\3\44\1\0\2\44\2\0\1\364"+
    "\1\0\3\364\1\365\3\225\1\364\1\0\1\364\1\365"+
    "\1\225\1\364\1\0\2\364\1\365\1\364\16\225\1\364"+
    "\12\225\2\364\3\225\1\366\6\225\2\364\15\0\1\367"+
    "\12\0\1\370\42\0\1\364\1\0\3\364\1\365\3\227"+
    "\1\364\1\0\1\364\1\365\1\227\1\364\1\0\2\364"+
    "\1\365\1\364\16\227\1\364\12\227\2\364\3\227\1\371"+
    "\6\227\2\364\23\0\1\362\51\0\1\372\72\0\1\373"+
    "\76\0\3\65\4\0\1\65\6\0\6\65\1\374\7\65"+
    "\1\0\10\65\1\375\1\65\2\0\3\65\1\0\6\65"+
    "\10\0\3\65\4\0\1\65\6\0\6\65\1\375\7\65"+
    "\1\0\10\65\1\375\1\65\2\0\3\65\1\0\6\65"+
    "\10\0\3\65\4\0\1\65\6\0\16\65\1\0\1\65"+
    "\1\376\10\65\2\0\3\65\1\0\6\65\10\0\3\65"+
    "\4\0\1\65\6\0\16\65\1\0\1\65\1\377\10\65"+
    "\2\0\3\65\1\0\6\65\2\0\1\252\1\0\7\252"+
    "\1\254\61\252\1\255\1\0\11\255\1\254\57\255\6\0"+
    "\3\260\4\0\1\260\6\0\16\260\1\0\12\260\2\0"+
    "\3\260\1\0\6\260\10\0\3\262\4\0\1\262\6\0"+
    "\16\262\1\0\12\262\2\0\3\262\1\0\6\262\26\0"+
    "\1\u0100\37\0\1\u0100\35\0\1\u0101\16\0\1\u0101\60\0"+
    "\1\u0102\10\0\1\u0102\63\0\1\u0103\20\0\1\u0103\76\0"+
    "\1\u0104\7\0\1\277\1\0\7\277\1\301\61\277\1\302"+
    "\1\0\1\303\1\u0105\1\302\1\303\3\302\1\303\1\302"+
    "\1\301\1\303\5\302\1\303\50\302\1\303\1\0\11\303"+
    "\1\301\57\303\1\302\1\0\1\303\1\u0105\1\302\1\303"+
    "\3\302\1\303\1\302\1\u0106\1\303\5\302\1\303\50\302"+
    "\13\0\1\u0107\57\0\1\303\1\0\11\303\1\u0106\57\303"+
    "\11\313\1\315\61\313\13\316\1\315\57\316\1\323\1\0"+
    "\7\323\1\325\61\323\1\326\1\0\1\327\1\u0108\1\326"+
    "\1\327\3\326\1\327\1\326\1\325\1\327\5\326\1\327"+
    "\50\326\1\327\1\0\11\327\1\325\57\327\1\326\1\0"+
    "\1\327\1\u0108\1\326\1\327\3\326\1\327\1\326\1\u0109"+
    "\1\327\5\326\1\327\50\326\13\0\1\u010a\57\0\1\327"+
    "\1\0\11\327\1\u0109\57\327\2\165\1\0\41\165\1\u010b"+
    "\30\165\1\0\20\165\1\u010c\47\165\1\340\1\0\7\340"+
    "\1\342\61\340\1\343\1\0\1\344\1\u010d\1\343\1\344"+
    "\3\343\1\344\1\343\1\342\1\344\5\343\1\344\50\343"+
    "\1\344\1\0\11\344\1\342\57\344\1\343\1\0\1\344"+
    "\1\u010d\1\343\1\344\3\343\1\344\1\343\1\u010e\1\344"+
    "\5\343\1\344\50\343\13\0\1\u010f\57\0\1\344\1\0"+
    "\11\344\1\u010e\57\344\2\174\1\0\41\174\1\u0110\30\174"+
    "\1\0\20\174\1\u0111\47\174\67\0\2\u0112\11\0\1\u0113"+
    "\107\0\1\u0114\112\0\1\u0115\26\0\1\364\1\0\10\364"+
    "\1\0\4\364\1\0\42\364\1\0\11\364\1\0\3\364"+
    "\1\365\4\364\1\0\1\364\1\365\2\364\1\0\2\364"+
    "\1\365\37\364\1\u0116\10\364\15\0\1\367\44\0\1\u0117"+
    "\25\0\1\u0118\6\0\3\u0118\5\0\1\u0118\10\0\1\u0118"+
    "\1\0\2\u0118\7\0\1\u0118\2\0\2\u0118\14\0\1\65"+
    "\1\u0119\1\65\4\0\1\65\6\0\16\65\1\0\12\65"+
    "\2\0\3\65\1\0\6\65\10\0\3\65\4\0\1\65"+
    "\6\0\14\65\1\u011a\1\65\1\0\12\65\2\0\3\65"+
    "\1\0\6\65\31\0\1\u011b\16\0\1\u011b\56\0\1\u011c"+
    "\20\0\1\u011c\50\0\1\u011d\22\0\1\u011d\45\0\1\u011e"+
    "\16\0\1\u011e\56\0\1\u011f\20\0\1\u011f\22\0\2\u0120"+
    "\1\0\3\u0120\2\0\1\306\4\u0120\1\0\2\u0120\1\0"+
    "\31\u0120\1\0\7\u0120\2\0\3\u0120\4\0\2\u0121\1\0"+
    "\3\u0121\2\0\1\332\4\u0121\1\0\2\u0121\1\0\31\u0121"+
    "\1\0\7\u0121\2\0\3\u0121\1\0\2\165\1\0\64\165"+
    "\2\u0122\4\165\1\0\21\165\1\u0123\46\165\3\0\2\u0124"+
    "\1\0\3\u0124\2\0\1\347\4\u0124\1\0\2\u0124\1\0"+
    "\31\u0124\1\0\7\u0124\2\0\3\u0124\1\0\2\174\1\0"+
    "\64\174\2\u0125\4\174\1\0\21\174\1\u0126\46\174\44\0"+
    "\1\u0127\10\0\1\u0127\42\0\1\u0128\134\0\2\u0129\64\0"+
    "\1\u0116\25\0\1\u0118\6\0\3\u0118\5\0\1\u0118\10\0"+
    "\1\u0118\1\0\2\u0118\7\0\1\u0118\1\0\1\u0117\2\u0118"+
    "\14\0\3\65\4\0\1\65\6\0\12\65\1\u012a\3\65"+
    "\1\0\12\65\2\0\3\65\1\0\6\65\10\0\3\65"+
    "\4\0\1\65\6\0\11\65\1\u012b\4\65\1\0\12\65"+
    "\2\0\3\65\1\0\6\65\45\0\1\u012c\5\0\1\u012c"+
    "\60\0\1\u012d\67\0\1\u012e\10\0\1\u012e\61\0\1\u012f"+
    "\10\0\1\u012f\64\0\1\u0130\33\0\2\165\1\0\41\165"+
    "\1\u0131\10\165\1\u0131\17\165\1\0\22\165\1\u0132\45\165"+
    "\2\174\1\0\41\174\1\u0133\10\174\1\u0133\17\174\1\0"+
    "\22\174\1\u0134\45\174\5\0\1\u0127\6\0\1\u0127\5\0"+
    "\1\u0127\76\0\1\u0135\110\0\1\u0136\10\0\1\u0136\23\0"+
    "\3\65\4\0\1\65\6\0\16\65\1\0\3\65\1\u0137"+
    "\6\65\2\0\3\65\1\0\6\65\10\0\3\65\4\0"+
    "\1\65\6\0\3\65\1\u0138\12\65\1\0\3\65\1\u0138"+
    "\6\65\2\0\3\65\1\0\6\65\46\0\1\u0139\64\0"+
    "\1\u013a\20\0\1\u013a\54\0\1\u013b\62\0\1\u013c\22\0"+
    "\1\u013c\42\0\1\u013d\37\0\1\u013d\6\0\2\165\1\0"+
    "\2\165\1\u0131\6\165\1\u0131\5\165\1\u0131\52\165\1\0"+
    "\23\165\1\u013e\44\165\2\174\1\0\2\174\1\u0133\6\174"+
    "\1\u0133\5\174\1\u0133\52\174\1\0\23\174\1\u013f\44\174"+
    "\27\0\1\u0140\50\0\1\u0136\6\0\1\u0136\5\0\1\u0136"+
    "\56\0\3\65\4\0\1\65\6\0\16\65\1\0\6\65"+
    "\1\u0141\3\65\2\0\3\65\1\0\6\65\36\0\1\u0142"+
    "\10\0\1\u0142\54\0\1\u0143\16\0\1\u0143\53\0\1\u0144"+
    "\16\0\1\u0144\24\0\2\165\1\0\24\165\1\u0145\43\165"+
    "\2\174\1\0\24\174\1\u0146\43\174\26\0\1\u0147\52\0"+
    "\3\65\4\0\1\65\6\0\6\65\1\u0148\7\65\1\0"+
    "\12\65\2\0\3\65\1\0\6\65\2\0\2\165\1\0"+
    "\23\165\1\u0149\44\165\2\174\1\0\23\174\1\u014a\44\174"+
    "\23\0\1\u014b\55\0\3\65\4\0\1\65\6\0\10\65"+
    "\1\u014c\5\65\1\0\12\65\2\0\3\65\1\0\6\65"+
    "\2\0\2\165\1\0\20\165\1\u014d\47\165\2\174\1\0"+
    "\20\174\1\u014e\47\174\6\0\3\65\4\0\1\65\6\0"+
    "\12\65\1\u014f\3\65\1\0\12\65\2\0\3\65\1\0"+
    "\6\65\10\0\3\65\4\0\1\65\6\0\16\65\1\0"+
    "\12\65\2\0\3\65\1\0\4\65\1\u0150\1\65\10\0"+
    "\3\65\4\0\1\65\6\0\10\65\1\u0151\5\65\1\0"+
    "\12\65\2\0\3\65\1\0\6\65\10\0\3\65\4\0"+
    "\1\65\6\0\10\65\1\u0152\5\65\1\0\12\65\2\0"+
    "\3\65\1\0\6\65\10\0\3\65\4\0\1\65\6\0"+
    "\16\65\1\0\3\65\1\u0153\6\65\2\0\3\65\1\0"+
    "\6\65\2\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  0,  0,  0,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1,  9,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9,  9,  1, 
     9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  9,  1, 
     9,  1,  0,  0,  1,  0,  1,  0,  0,  0,  0,  9,  1,  1,  1,  1, 
     9,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  9,  1, 
     0,  1,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     9,  1,  0,  0,  1,  1,  0,  0,  1,  0,  0,  0,  9,  0,  0,  0, 
     1,  0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  1,  1,  1,  0,  0, 
     0,  9,  1,  0,  0,  1,  1,  0,  1,  1,  1,  9,  0,  9,  0,  0, 
     0,  0,  0,  1,  1,  9,  0,  0,  9,  9,  9,  1,  1,  1,  1,  0, 
     0,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  1,  0,  1,  0,  1, 
     1,  0,  9,  0,  0,  1,  9,  0,  1,  1,  0,  0,  0,  0,  0,  0, 
     0,  1,  1,  0,  1,  1,  1,  0,  0,  1,  1,  0,  0,  0,  0,  0, 
     1,  1,  1,  1,  0,  1,  1,  1,  0,  0,  0,  9,  9,  1,  1,  0, 
     1,  9,  9,  9,  1,  1,  0,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	// where the last internal container block was found
	private int fLastInternalBlockStart = -1;

	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private String fBufferedText = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	
	// help for php container text region
	private ContextRegionContainer fBufferedEmbeddedContainer = null;
	private String f_context = null;


	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();

	// a "hint" as to what an embedded region should be evaluated
	private String fEmbeddedHint = UNDEFINED;
	// a "hint" as to what state to enter once an embedded region has 
	// been completed
	private int fEmbeddedPostState = YYINITIAL;
	// the container used to create embedded regions
	private ContextRegionContainer fEmbeddedContainer = null;
	private static final String PROXY_CONTEXT = "PROXY_CONTEXT";

	private String context = null;
	private String text = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList();

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	// the name of the current tag inside of an embedded region
	private String internalTagName = null;
	private String internalContext = null;
	
	private final XMLParserRegionFactory fRegionFactory = new XMLParserRegionFactory();
/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
	if(containsTagName(marker.getTagName()))
		return;
	fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
	fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
	if (fBlockMarkers != null) {
		Iterator blocks = fBlockMarkers.iterator();
		while (blocks.hasNext()) {
			if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
				blocks.remove();
		}
	}
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		boolean casesensitive = marker.isCaseSensitive();
		if(casesensitive && marker.getTagName().equals(name))
			return casesensitive;
		else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
			return casesensitive;
	}
	return true;
}
/* user method */
public String getBlockMarkerContext() {
	return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		if(marker.getTagName().equals(name))
			return marker.getContext();
	}
	return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
	return fBlockMarkers;
}
/* user method */
public final int getOffset() {
	return fOffset + yychar;
}
private final boolean isBlockMarker() {
	return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
	if (!fIsBlockingEnabled)
		return false;
	return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
	beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *	Tokenizer toker = new Tokenizer();
 *	toker.setCaseSensitiveBlocking(false);
 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *	toker.getRegions(); 
 *
 * Returns:
 *	BLOCK_TEXT: 0-40
 *	XML_END_TAG_OPEN: 41-42
 *	XML_TAG_NAME: 43-48
 *	XML_TAG_CLOSE: 49-49
 *	XML_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
	yybegin(ST_BLOCK_TAG_SCAN);
	fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean allowPHP, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	// Disable further block (probably)
	fIsBlockingEnabled = false;
	int searchStringLength = searchString.length();
	int n = 0;
	char lastCheckChar;
	int i;
	boolean same = false;
	while (stillSearching) {
		n = 0;
		// Ensure that enough data from the input exists to compare against the search String.
		n = yy_advance();
		while(n != YYEOF && yy_currentPos < searchStringLength)
			n = yy_advance();
		// If the input was too short or we've exhausted the input, stop immediately.
		if (n == YYEOF) {
			stillSearching = false;
		}
		else {
			
			/**
			 * Look for starting PHPs "<?"
			 */
			// Look for a PHP beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			if(allowPHP && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
					yy_buffer[yy_currentPos - 1] == '<' && 
					(yy_buffer[yy_currentPos] == '?' || (yy_buffer[yy_currentPos] == '%' && ProjectOptions.isSupportingAspTags(project)))) {
				fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			
			// 2) yy_currentPos - jspstarter.length : There's not searchStringLength of input available; check for a JSP 2 spots back in what we could read
			// ---
			// Look for a JSP beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			else if(allowPHP && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
					yy_buffer[yy_currentPos - 1] == '<' && yy_buffer[yy_currentPos] == '?') {
				fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			// 3) yy_currentPos..(yy_currentPos+jspStartlength-1) : Check at the start of the block one time
			// ---
			// Look for a JSP beginning immediately in the block area; this case wouldn't be handled by the preceding section
			// since it relies upon yy_currentPos equaling exactly the previous end +1 to work as designed.
			else if(allowPHP && yy_startRead != fLastInternalBlockStart && yy_startRead > 0 &&
					yy_startRead < yy_buffer.length - 1 && yy_buffer[yy_startRead] == '<' && yy_buffer[yy_startRead + 1] == '?') {
				fLastInternalBlockStart = yy_markedPos = yy_startRead;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}

			// Check the characters in the target versus the last targetLength characters read from the buffer
			// and see if it matches
			if (n == YYEOF) {
				stillSearching = false;
			}
			else {
				same = true;
				// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
				// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
				// Check the characters in the target versus the last targetLength characters read from the buffer
				// and see if it matches
				
				// safety check for array accesses (yy_currentPos is the *last* character we can check against)
				if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
					for(i = 0; i < searchStringLength; i++) {
						if(same && fIsCaseSensitiveBlocking)
							same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
						else if(same && !fIsCaseSensitiveBlocking)
							same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
					}
				}
				// safety check failed; no match is possible right now
				else {
					same = false;
				}
			}
			if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
				// Additional check for close tags to ensure that targetString="</script" doesn't match
				// "</scriptS"
				lastCheckChar = yy_buffer[yy_currentPos];
				// Succeed on "</script>" and "</script "
				if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
					stillSearching = false;
			}
			else {
				stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
			}
		}
	}
	if (n != YYEOF || same) {
		// We've stopped short of the end or definitely found a match
		yy_markedPos = yy_currentPos - searchStringLength;
		yy_currentPos = yy_markedPos + 1;
		// If the searchString occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if (yy_markedPos == yy_startRead) {
			yybegin(immediateFallbackState);
			return primGetNextToken();
		}
	}
	else {
		// We ran through the rest of the input
		yy_markedPos = yy_currentPos;
		yy_currentPos++;
	}
	yybegin(exitState);
	// If the ending occurs at the very beginning of what would have
	// been a Block, resume scanning normally immediately
	if(yy_markedPos == yy_startRead)
		return primGetNextToken();
	return searchContext;
}

/**
 * Method doScanEndPhp
 * 
 * @see doScan(searchString, req...) 
 * this version can handle two strings as options to search string
 * it originally written to support ?> or %> close tags to php
 * The two strings must be on the same length
 *
 * @param isAsp - whether the asp %> close is premited
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private ITextRegion bufferedTextRegion = null;
private final String doScanEndPhp(boolean isAsp, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	yypushback(1); // begin with the last char
	
	final AbstractPhpLexer phpLexer = getPhpLexer(); 
	bufferedTextRegion = new PhpScriptRegion(searchContext, yychar, project, phpLexer);

	// restore the locations / states
	reset(yy_reader, phpLexer.getZZBuffer(), phpLexer.getParamenters());
	
	yybegin(exitState);
	return searchContext;
}

/**
 * @param project
 * @param stream
 * @return a new lexer for the given project with the given stream initialized with current parameters
 */
private AbstractPhpLexer getPhpLexer() {
	final PHPVersion phpVersion = ProjectOptions.getPhpVersion(project);
	final AbstractPhpLexer lexer = PhpLexerFactory.createLexer(yy_reader, phpVersion);
	int[] currentParameters = getParamenters();
	try {
		// set initial lexer state - we use reflection here since we don't know the constant value of 
		// of this state in specific PHP version lexer 
		currentParameters[6] = lexer.getClass().getField("ST_PHP_IN_SCRIPTING").getInt(lexer);
	} catch (Exception e) {
		Logger.logException(e);
	}
	lexer.initialize(currentParameters[6]);
	lexer.reset(yy_reader, yy_buffer, currentParameters);
	lexer.setPatterns(project);

	lexer.setAspTags(ProjectOptions.isSupportingAspTags(project));
	return lexer;
}

// call the doScan without searching for PHP internal code
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	return doScan(searchString, true, requireTailSeparator, searchContext, exitState, immediateFallbackState);	
}

	/* user method */
	private final void assembleEmbeddedTagSequence(String startType, String endTagName) {
		assembleEmbeddedContainer(startType, null, endTagName);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String[] endTypes) {
		assembleEmbeddedContainer(startType, endTypes, null);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String endType) {
		assembleEmbeddedContainer(startType, new String[]{endType}, null);
	}
	/**
	 *  user method 
	 * 
	 * Assembles an embedded container beginning with the given startType as
	 * the first ContextRegion within it and of the type fEmbeddedHint.  The
	 * endTypes[] array contains the context types that will cause a successful
	 * exit.  Use of the endTagName parameter alters this behavior to force an
	 * exit on an XML_TAG_CLOSE after seeing an XML_TAG_NAME whose significant
	 * text matches the endTagName String.  All contents in between are
	 * insignificant, and yes, this means comments are allowed inside.
	 **/
	private final void assembleEmbeddedContainer(String startType, String[] endTypes, String endTagName) {
		// the context of the region being added to the embedded container
		internalContext = startType;
		// keep track of where this container began; to provide relative indeces for the regions
		int containerStart = yychar;
		boolean notFinished = true;
		// keep track of where we seem to be so that the endTagName can be checked
		boolean isInEndTag = false;
		boolean isInFirstTag = true;
		// create the embedded container and setup its "type"
		if (fEmbeddedContainer == null) {
			fEmbeddedContainer = new ContextRegionContainer();
			fEmbeddedContainer.setType(fEmbeddedHint);
			fEmbeddedContainer.setStart(containerStart);
			// TODO: parent region needs to be set .... but not sure where to get it from 
			//		fEmbeddedContainer.setParent(parentRegion);
		}
		containerStart = fEmbeddedContainer.getStart();
		while (notFinished) {
			// add the region to the container
			if (internalContext != null && internalContext != PROXY_CONTEXT) {

				ITextRegion newToken;
				// if it is php content we extract the tokens
				if (internalContext == PHP_CONTENT) {
					newToken = bufferedTextRegion; 
					bufferedTextRegion.adjustStart(-containerStart);
				} else {
					newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
				}
				fEmbeddedContainer.getRegions().add(newToken);
				fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength() );
				fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
				// DW, 4/16/2003 token regions no longer have parents
				//newToken.setParent(fEmbeddedContainer);
			}
			try {
				// longscan determines whether to attempt a blockTagScan within the embedded container
				boolean longscan = false;
				// save the tokenizer state in case of a block tag scan
				int previousState = yystate();
				String previousCurrentTagName = fCurrentTagName;
				int previousPostState = fEmbeddedPostState;
				String previousEmbeddedHint = fEmbeddedHint;
				// determine if a block tag scan is necessary
				if (internalContext == XML_TAG_NAME) {
					internalTagName = yytext();
					if(!isNestable(internalTagName)) {
						internalTagName = null;
						// snagged a tag name we shouldn't have
						fEmbeddedPostState = ST_ABORT_EMBEDDED;
						notFinished = false;
					}
				}
				else if (internalContext == XML_TAG_OPEN || internalContext == XML_END_TAG_OPEN) {
					internalTagName = null;
				}
				// do upkeep for endTagName usage; must be here since the next token could be the close
				if (internalContext == XML_END_TAG_OPEN) {
					isInEndTag = true;
				} else if (internalContext == XML_TAG_CLOSE) {
					isInFirstTag = isInEndTag = false;
				} else {
				 	ITextRegionList embeddedRegions = fEmbeddedContainer.getRegions();
					if (embeddedRegions.size() > 2 && (embeddedRegions.get(embeddedRegions.size()-1)).getType() == XML_TAG_CLOSE && (embeddedRegions.get(embeddedRegions.size() - 3)).getType() == XML_TAG_OPEN && internalTagName != null) {
						if (containsTagName(internalTagName)) {
							longscan = true;
							yybegin(ST_BLOCK_TAG_SCAN);
						}
					}
				}
				if (longscan)
					fCurrentTagName = internalTagName;
				// read the next region and context
				internalContext = primGetNextToken();
				if (longscan) {
					// Returning from a block tag scan requires restoring some state variables
					// as well as handling the block region and setting up for normal scanning
					// inside the embedded container

					ITextRegion newToken;
					// if it is php content we extract the tokens
					if (internalContext == PHP_CONTENT) {
						newToken = bufferedTextRegion; 
						bufferedTextRegion.adjustStart(-containerStart);
					} else {
						newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
					}

					fEmbeddedContainer.getRegions().add(newToken);
					fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength());
					fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
					// DW, 4/16/2003 token regions no longer have parents
					// newToken.setParent(fEmbeddedContainer);
					longscan = false;
					fEmbeddedPostState = previousPostState;
					fEmbeddedHint = previousEmbeddedHint;
					fCurrentTagName = previousCurrentTagName;
					yybegin(previousState);
					internalContext = primGetNextToken();
				}
			} catch (IOException e) {
				// primGetNextToken() calls may throw an IOException
				// catch and do nothing since the isEOF check below
				// will properly exit if the input was too short
			} catch (Exception f) {
				// some other exception happened; never should
				Logger.logException(f);
			}
			boolean isEndingType = yystate() == ST_ABORT_EMBEDDED;
			if(!isEndingType) {
				// check for ending context
				if (endTagName == null) {
					for (int i = 0; i < endTypes.length; i++) {
						isEndingType = isEndingType || (internalContext == endTypes[i]);
					}
				}
				else {
					isEndingType = ((isInEndTag && internalContext == XML_TAG_CLOSE) || (isInFirstTag && internalContext == XML_EMPTY_TAG_CLOSE)) && internalTagName != null && internalTagName.equals(endTagName);
				}
			}
			ITextRegionList embeddedList = fEmbeddedContainer.getRegions();
			notFinished = notFinished && ((!isEndingType) && !isEOF() && (endTagName != null || internalContext != UNDEFINED) && !(internalContext == PROXY_CONTEXT && (embeddedList.get(embeddedList.size()-1)).getType() == UNDEFINED));
		}
		// finish adding the last context
		if (internalContext != null && internalContext != PROXY_CONTEXT) {
			ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
			fEmbeddedContainer.getRegions().add(newToken);
			// DW, 4/16/2003 token regions no longer have parents
			//newToken.setParent(fEmbeddedContainer);
			fEmbeddedContainer.setLength(yychar - containerStart + yylength());
			fEmbeddedContainer.setTextLength(yychar - containerStart + yylength());
		}
		yybegin(fEmbeddedPostState);
	}

	/**
	 * user method
	 */
	private boolean isNestable(String tagName) {
		return true;
	}

/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
	return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}

private IProject project;

public void setProject(IProject project) {
	this.project = project;
}

public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
	this.yy_reader = reader;
	this.yy_buffer = buffer;
	this.yy_markedPos = parameters[0];
	this.yy_pushbackPos = parameters[1];
	this.yy_currentPos = parameters[2];
	this.yy_startRead = parameters[3];
	this.yy_endRead = parameters[4];
	this.yyline = parameters[5];  
	this.yychar = this.yy_startRead - this.yy_pushbackPos;
}

public int[] getParamenters(){
	return new int[]{yy_markedPos, yy_pushbackPos, yy_currentPos, yy_startRead, yy_endRead, yyline, yy_lexical_state};
}

/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
	fEmbeddedContainer = null;
	// load the starting non-whitespace token (assume that it is so)
	if (fShouldLoadBuffered) {
		if (fBufferedEmbeddedContainer != null) {
			ITextRegion container = fBufferedEmbeddedContainer;
			fBufferedEmbeddedContainer = null;
			fShouldLoadBuffered = false;
			return container;
		}
		context = fBufferedContext;
		text = fBufferedText;
		start = fBufferedStart;
		textLength = length = fBufferedLength;
		fShouldLoadBuffered = false;
	}
	else {
		context = primGetNextToken();
		if (context == PROXY_CONTEXT) {
			return fEmbeddedContainer;
		} else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		} else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		text = yytext();
		if (context == XML_TAG_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = text;
			else
				fCurrentTagName = null;
		}
		else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		}
		else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		start = yychar;
		textLength = length = yylength();
		if (yy_atEOF) {
			fTokenCount++;
			return null;
		}
	}
	
	// store the next token
	f_context = primGetNextToken();
	if (f_context == PROXY_CONTEXT) {
		fBufferedEmbeddedContainer = fEmbeddedContainer;
		fShouldLoadBuffered = true;
	} else if (f_context == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = yytext();
		else
			fCurrentTagName = null;
	} else if (f_context == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	} else if (f_context == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedContext = f_context;
	fBufferedText = yytext();
	if (fBufferedContext == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = fBufferedText;
		else
			fCurrentTagName = null;
	}
	else if (fBufferedContext == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	}
	else if (fBufferedContext == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedStart = yychar;
	fBufferedLength = yylength();
	if (fBufferedContext == WHITE_SPACE) {
		fShouldLoadBuffered = false;
		length += fBufferedLength;
	}else {
		fShouldLoadBuffered = true;
	}
	if (context == null) {
		// EOF
		if (Debug.debugTokenizer) {
			System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
		}
		return null;
	}
	fTokenCount++;

	// if it is php content we extract the tokens
	if (context == PHP_CONTENT) {
		return bufferedTextRegion; 
	} else {
		return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
	}
}

/* user method */
public PHPTokenizer(){
	super();
}
/* user method */
public PHPTokenizer(char[] charArray){
		this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
	reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
	reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
	reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
	reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
	reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
	if (Debug.debugTokenizer) {
		System.out.println("resetting tokenizer");//$NON-NLS-1$
	}
	fOffset = newOffset;

	/* the input device */
	yy_reader = in;

	/* the current state of the DFA */
	yy_state = 0;

	/* the current lexical state */
	yy_lexical_state = YYINITIAL;

	/* this buffer contains the current text to be matched and is
	the source of the yytext() string */
	java.util.Arrays.fill(yy_buffer, (char)0);

	/* the textposition at the last accepting state */
	yy_markedPos = 0;

	/* the textposition at the last state to be included in yytext */
	yy_pushbackPos = 0;

	/* the current text position in the buffer */
	yy_currentPos = 0;

	/* startRead marks the beginning of the yytext() string in the buffer */
	yy_startRead = 0;

	/** 
	 * endRead marks the last character in the buffer, that has been read
	 * from input 
	 */
	yy_endRead = 0;

	/* number of newlines encountered up to the start of the matched text */
	yyline = 0;

	/* the number of characters up to the start of the matched text */
	yychar = 0;

	/* yy_atEOF == true <=> the scanner has returned a value for EOF */
	yy_atEOF = false;

	/* denotes if the user-EOF-code has already been executed */
	yy_eof_done = false;


	/* user vars: */
	fLastInternalBlockStart = -1;	

	fTokenCount = 0;
	
	fShouldLoadBuffered = false;
	fBufferedContext = null;
	fBufferedText = null;
	fBufferedStart = 1;
	fBufferedLength = 0;
	fStateStack = new IntStack();

	context = null;
	text = null;
	start = 0;
	textLength = 0;
	length = 0;
}

	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		PHPTokenizer newInstance = new PHPTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		return newInstance;
	}
/* user method */
private final String scanXMLCommentText() throws IOException {
	// Scan for '-->' and return the text up to that point as
	//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
	//  case change to the ST_XML_COMMENT_END state and return the next
	//  context as usual.
	return doScan("-->", true, false,  XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHPTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHPTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[13747];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4212) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1372) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      boolean yy_counted = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\r':
          yyline++;
          yy_counted = true;
          break;
        case '\n':
          if (yy_counted)
            yy_counted = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_counted = false;
        }
      }

      if (yy_counted) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 338: 
          { 
	if(Debug.debugTokenizer)
		dump("XSL processing instruction target");//$NON-NLS-1$
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 340: break;
        case 330: 
        case 332: 
        case 333: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
 }
        case 341: break;
        case 323: 
          { 
	if(Debug.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
 }
        case 342: break;
        case 322: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
 }
        case 343: break;
        case 321: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
 }
        case 344: break;
        case 316: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 345: break;
        case 315: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 346: break;
        case 311: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 347: break;
        case 309: 
          { 
    if (ProjectOptions.isSupportingAspTags(project) ||yytext().charAt(1) != '%') {
		//removeing trailing whitespaces for the php open
		String phpStart = yytext();
		int i = phpStart.length() - 1; 
		while(i >= 0 && Character.isWhitespace(phpStart.charAt(i--))){
			yypushback(1);
		}

		fStateStack.push(yystate());
		if(fStateStack.peek()==YYINITIAL) {
			// the simple case, just a regular scriptlet out in content
			yybegin(ST_PHP_CONTENT);
			return PHP_OPEN;
		}
		else {
			if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
			else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
			else if(yystate() == ST_CDATA_TEXT) {
				fEmbeddedPostState = ST_CDATA_TEXT;
				fEmbeddedHint = XML_CDATA_TEXT;
			}
			yybegin(ST_PHP_CONTENT);
			assembleEmbeddedContainer(PHP_OPEN, PHP_CLOSE);
			if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
				yybegin(ST_BLOCK_TAG_SCAN);
				return BLOCK_TEXT;
			}
			// required help for successive embedded regions
			if(yystate() == ST_XML_TAG_NAME) {
				fEmbeddedHint = XML_TAG_NAME;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			}
			else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
				fEmbeddedPostState = ST_XML_EQUALS;
			}
			else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			}
			return PROXY_CONTEXT;
		}
    }
    yypushback(1);
	yybegin(ST_XML_TAG_NAME);
	return XML_TAG_OPEN;
 }
        case 348: break;
        case 278: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
 }
        case 349: break;
        case 274: 
          { 
	if(Debug.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	fEmbeddedHint = XML_COMMENT_TEXT;
	fEmbeddedPostState = ST_XML_COMMENT;
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
 }
        case 350: break;
        case 254: 
          { 
	if(Debug.debugTokenizer)
		dump("PHP processing instruction target");//$NON-NLS-1$
	//fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	//fEmbeddedPostState = ST_XML_EQUALS;
        //yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        //return XML_TAG_NAME;
        yybegin(ST_PHP_CONTENT);
		return PHP_OPEN;
 }
        case 351: break;
        case 251: 
        case 252: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 352: break;
        case 250: 
          { 
	if(Debug.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
 }
        case 353: break;
        case 249: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
 }
        case 354: break;
        case 248: 
          { 
	if(Debug.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
 }
        case 355: break;
        case 245: 
          { 
	if(Debug.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
 }
        case 356: break;
        case 237: 
          { 
	// begin embedded region: " + fEmbeddedHint);//$NON-NLS-1$
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	// Php attribute value start - end tag
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_END_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 357: break;
        case 235: 
          { 
	yybegin(fStateStack.pop());
	return PHP_CLOSE;
	
 }
        case 358: break;
        case 186: 
        case 200: 
        case 208: 
          { 
	return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 359: break;
        case 177: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 360: break;
        case 175: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_EQUALS);
	return PROXY_CONTEXT;
 }
        case 361: break;
        case 174: 
          { 
        yybegin(YYINITIAL);
	fEmbeddedHint = UNDEFINED;
	// empty tag close
    return XML_EMPTY_TAG_CLOSE;
 }
        case 362: break;
        case 161: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 363: break;
        case 160: 
          { 
		// ended with nothing inside
		fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 364: break;
        case 155: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 365: break;
        case 145: 
          { 
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
 }
        case 366: break;
        case 143: 
        case 144: 
        case 219: 
        case 220: 
        case 232: 
        case 233: 
        case 294: 
        case 304: 
        case 306: 
          { 
	if(Debug.debugTokenizer)
		dump("\nprocessing instruction start");//$NON-NLS-1$
	if ("<?".equals(yytext())
			&& !(ProjectOptions.useShortTags(project) && Character.isWhitespace(yy_buffer[yy_currentPos - 1]))) {
		yybegin(ST_PI);
		return XML_PI_OPEN;

	} else {
		// removeing trailing whitespaces for the php open
		String phpStart = yytext();
		int i = phpStart.length() - 1;
		while (i >= 0
				&& Character.isWhitespace(phpStart.charAt(i--))) {
			yypushback(1);
		}
		fStateStack.push(yystate());// YYINITIAL
		if (fStateStack.peek() == YYINITIAL) {
			// the simple case, just a regular scriptlet out in
			// content
			yybegin(ST_PHP_CONTENT);
			return PHP_OPEN;
		} else {
			if (yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
			else if (yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
			else if (yystate() == ST_CDATA_TEXT) {
				fEmbeddedPostState = ST_CDATA_TEXT;
				fEmbeddedHint = XML_CDATA_TEXT;
			}
			yybegin(ST_PHP_CONTENT);
			assembleEmbeddedContainer(PHP_OPEN, PHP_CLOSE);
			if (yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
				yybegin(ST_BLOCK_TAG_SCAN);
				return BLOCK_TEXT;
			}
			// required help for successive embedded regions
			if (yystate() == ST_XML_TAG_NAME) {
				fEmbeddedHint = XML_TAG_NAME;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			} else if ((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
				fEmbeddedPostState = ST_XML_EQUALS;
			} else if (yystate() == ST_XML_ATTRIBUTE_VALUE) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			}
			return PROXY_CONTEXT;
		}
	}

 }
        case 367: break;
        case 142: 
          { 
	// end tag open
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_TAG_NAME);
        return XML_END_TAG_OPEN;
 }
        case 368: break;
        case 138: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE_DQUOTE;
 }
        case 369: break;
        case 134: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE_SQUOTE;
 }
        case 370: break;
        case 132: 
          { 
	// begin embedded region: " + fEmbeddedHint
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	// tag inside of JSP attribute value start
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 371: break;
        case 131: 
        case 133: 
        case 136: 
        case 137: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 372: break;
        case 128: 
        case 129: 
        case 130: 
          { 
	return doScanEndPhp(ProjectOptions.isSupportingAspTags(project), PHP_CONTENT, ST_PHP_CONTENT, ST_PHP_CONTENT);
 }
        case 373: break;
        case 64: 
        case 66: 
        case 164: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 374: break;
        case 63: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 375: break;
        case 62: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 376: break;
        case 58: 
        case 59: 
        case 60: 
          { 
		// block scan until close is found
	return doScan("?>", false, false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
 }
        case 377: break;
        case 57: 
          { 
        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
 }
        case 378: break;
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 253: 
        case 280: 
        case 281: 
        case 297: 
        case 298: 
        case 310: 
        case 320: 
        case 327: 
        case 331: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_CONTENT;
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
 }
        case 379: break;
        case 46: 
        case 47: 
        case 48: 
          { 
	if(Debug.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
 }
        case 380: break;
        case 45: 
        case 141: 
          { 
	if(Debug.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 381: break;
        case 40: 
        case 41: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	fEmbeddedPostState = ST_CDATA_TEXT;
	fEmbeddedHint = XML_CDATA_TEXT;
	String blockContext = doBlockScan("]]>", XML_CDATA_TEXT, ST_CDATA_END);//$NON-NLS-1$
	if(blockContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return blockContext;
 }
        case 382: break;
        case 0: 
        case 35: 
        case 37: 
        case 148: 
        case 150: 
        case 243: 
        case 244: 
        case 277: 
          { 
	if(Debug.debugTokenizer)
		dump("\nXML content");//$NON-NLS-1$
	return XML_CONTENT;
 }
        case 383: break;
        case 5: 
        case 8: 
        case 9: 
        case 10: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 28: 
        case 51: 
        case 85: 
          { 
	if(Debug.debugTokenizer)
		dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 384: break;
        case 14: 
        case 74: 
        case 76: 
        case 77: 
        case 171: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 385: break;
        case 16: 
        case 78: 
        case 81: 
          { 
	// inappropriate tag name
	if(!fStateStack.empty() && (fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_SQUOTED||fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_DQUOTED)) {
		yybegin(ST_ABORT_EMBEDDED);
		yypushback(yylength()-1);
		return XML_TAG_ATTRIBUTE_VALUE;
	}
	yybegin(YYINITIAL);
        return XML_CONTENT;
 }
        case 386: break;
        case 27: 
        case 116: 
        case 117: 
        case 221: 
        case 266: 
        case 267: 
        case 289: 
        case 290: 
        case 305: 
        case 317: 
        case 324: 
        case 328: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
 }
        case 387: break;
        case 29: 
        case 123: 
        case 124: 
        case 234: 
        case 271: 
        case 272: 
        case 292: 
        case 293: 
        case 307: 
        case 318: 
        case 325: 
        case 329: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
 }
        case 388: break;
        case 36: 
        case 84: 
        case 89: 
        case 93: 
          { 
	if(Debug.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_TAG_NAME);
    return XML_TAG_OPEN;
 }
        case 389: break;
        case 38: 
        case 39: 
        case 42: 
        case 43: 
        case 44: 
        case 49: 
        case 50: 
        case 61: 
        case 65: 
        case 67: 
        case 68: 
        case 69: 
        case 71: 
        case 75: 
        case 80: 
        case 90: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 100: 
        case 101: 
        case 103: 
        case 108: 
        case 113: 
        case 120: 
        case 135: 
        case 139: 
        case 140: 
          { 
	if (Debug.debugTokenizer)
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	return UNDEFINED;
 }
        case 390: break;
        case 70: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 391: break;
        case 72: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_DHTML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 392: break;
        case 73: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_DHTML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 393: break;
        case 79: 
          { 
	// tag close
	fEmbeddedHint = UNDEFINED;
	if(isBlockMarker()) {
		fEmbeddedHint = getBlockMarkerContext();
		fEmbeddedPostState = ST_BLOCK_TAG_SCAN;
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else
        	yybegin(YYINITIAL);
        return XML_TAG_CLOSE;
 }
        case 394: break;
        case 82: 
        case 83: 
          { 
	if(Debug.debugTokenizer)
		dump("tag name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 395: break;
        case 86: 
          { 
	// attr name
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 396: break;
        case 87: 
          { 
	// equals
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 397: break;
        case 88: 
        case 179: 
          { 
	// attr value
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 398: break;
        case 91: 
          { 
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_DQUOTED);
	fStateStack.push(yystate());
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_DQUOTE, XML_TAG_ATTRIBUTE_VALUE_DQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 399: break;
        case 92: 
          { 
	// begin embedded region: " + fEmbeddedHint
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_SQUOTED);
	fStateStack.push(yystate());
	// JSP attribute value start - complex single quoted
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_SQUOTE, XML_TAG_ATTRIBUTE_VALUE_SQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 400: break;
        case 94: 
          { 
	if(Debug.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 401: break;
        case 99: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
 }
        case 402: break;
        case 102: 
        case 104: 
        case 105: 
        case 106: 
        case 192: 
        case 193: 
        case 196: 
        case 197: 
        case 261: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 403: break;
        case 107: 
        case 109: 
        case 110: 
        case 111: 
        case 204: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 404: break;
        case 112: 
        case 114: 
        case 115: 
        case 212: 
        case 213: 
        case 216: 
        case 217: 
        case 264: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
 }
        case 405: break;
        case 118: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 406: break;
        case 119: 
        case 121: 
        case 122: 
        case 225: 
        case 226: 
        case 229: 
        case 230: 
        case 269: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
 }
        case 407: break;
        case 125: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 408: break;
        case 126: 
        case 127: 
          { 
		return doBlockTagScan();
	 }
        case 409: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
