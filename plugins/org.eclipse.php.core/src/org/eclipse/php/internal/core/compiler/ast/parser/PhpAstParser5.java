
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 11 11:41:36 GMT+02:00 2008
//----------------------------------------------------

package org.eclipse.php.internal.core.compiler.ast.parser;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.internal.core.compiler.ast.nodes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 11 11:41:36 GMT+02:00 2008
  */
public class PhpAstParser5 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PhpAstParser5() {super();}

  /** Constructor which sets the default scanner. */
  public PhpAstParser5(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PhpAstParser5(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\006\000\002\006\004\000" +
    "\002\006\002\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\006\000\002\005\003\000\002\005" +
    "\003\000\002\010\005\000\002\010\011\000\002\010\014" +
    "\000\002\010\007\000\002\010\011\000\002\010\013\000" +
    "\002\010\007\000\002\010\004\000\002\010\005\000\002" +
    "\010\004\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\010\004\000" +
    "\002\010\005\000\002\010\007\000\002\010\012\000\002" +
    "\010\012\000\002\010\007\000\002\010\003\000\002\010" +
    "\017\000\002\010\005\000\002\010\003\000\002\123\003" +
    "\000\002\123\002\000\002\124\003\000\002\124\004\000" +
    "\002\125\012\000\002\011\003\000\002\011\005\000\002" +
    "\012\003\000\002\013\003\000\002\013\005\000\002\120" +
    "\003\000\002\121\003\000\002\044\002\000\002\044\003" +
    "\000\002\126\013\000\002\127\011\000\002\127\010\000" +
    "\002\105\003\000\002\105\003\000\002\130\003\000\002" +
    "\130\004\000\002\130\004\000\002\131\002\000\002\131" +
    "\004\000\002\103\003\000\002\104\002\000\002\104\004" +
    "\000\002\132\002\000\002\132\004\000\002\133\003\000" +
    "\002\133\005\000\002\014\002\000\002\014\004\000\002" +
    "\015\003\000\002\015\004\000\002\016\003\000\002\016" +
    "\006\000\002\017\003\000\002\017\006\000\002\020\003" +
    "\000\002\020\006\000\002\021\005\000\002\021\007\000" +
    "\002\022\005\000\002\022\006\000\002\022\006\000\002" +
    "\022\007\000\002\023\002\000\002\023\007\000\002\023" +
    "\006\000\002\024\003\000\002\024\003\000\002\025\003" +
    "\000\002\025\006\000\002\026\002\000\002\026\010\000" +
    "\002\027\002\000\002\027\011\000\002\030\002\000\002" +
    "\030\004\000\002\031\002\000\002\031\005\000\002\032" +
    "\003\000\002\032\002\000\002\033\003\000\002\033\005" +
    "\000\002\034\004\000\002\034\005\000\002\034\006\000" +
    "\002\034\007\000\002\134\002\000\002\134\003\000\002" +
    "\134\003\000\002\035\003\000\002\035\002\000\002\036" +
    "\003\000\002\036\003\000\002\036\004\000\002\036\005" +
    "\000\002\036\005\000\002\036\006\000\002\037\005\000" +
    "\002\037\003\000\002\040\003\000\002\040\004\000\002" +
    "\040\006\000\002\041\005\000\002\041\007\000\002\041" +
    "\003\000\002\041\005\000\002\042\004\000\002\042\002" +
    "\000\002\043\005\000\002\043\004\000\002\043\012\000" +
    "\002\043\003\000\002\113\003\000\002\113\005\000\002" +
    "\136\003\000\002\136\003\000\002\112\002\000\002\112" +
    "\003\000\002\114\003\000\002\114\004\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\110\005\000\002" +
    "\110\007\000\002\110\003\000\002\110\005\000\002\111" +
    "\007\000\002\111\006\000\002\045\005\000\002\045\003" +
    "\000\002\046\002\000\002\046\003\000\002\047\005\000" +
    "\002\047\003\000\002\050\010\000\002\050\005\000\002" +
    "\050\006\000\002\050\010\000\002\050\005\000\002\050" +
    "\004\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\007\000\002\050\003\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\003\000\002\050\006\000" +
    "\002\050\005\000\002\050\004\000\002\051\006\000\002" +
    "\051\010\000\002\051\010\000\002\051\006\000\002\107" +
    "\003\000\002\145\003\000\002\145\003\000\002\147\006" +
    "\000\002\147\003\000\002\151\004\000\002\151\002\000" +
    "\002\152\004\000\002\052\002\000\002\052\004\000\002" +
    "\052\005\000\002\053\002\000\002\053\005\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\004\000\002\055\004\000\002\055\006\000\002\055" +
    "\003\000\002\153\005\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\005\000" +
    "\002\056\005\000\002\057\002\000\002\057\004\000\002" +
    "\060\002\000\002\060\003\000\002\061\007\000\002\061" +
    "\005\000\002\061\005\000\002\061\003\000\002\062\003" +
    "\000\002\062\003\000\002\135\003\000\002\106\003\000" +
    "\002\137\003\000\002\122\007\000\002\122\003\000\002" +
    "\117\004\000\002\117\002\000\002\141\005\000\002\116" +
    "\005\000\002\116\002\000\002\140\003\000\002\140\004" +
    "\000\002\142\005\000\002\154\003\000\002\154\003\000" +
    "\002\150\003\000\002\150\004\000\002\150\003\000\002" +
    "\063\006\000\002\063\006\000\002\063\003\000\002\064" +
    "\003\000\002\064\006\000\002\065\002\000\002\065\003" +
    "\000\002\066\003\000\002\066\003\000\002\067\006\000" +
    "\002\067\006\000\002\067\003\000\002\070\003\000\002" +
    "\070\005\000\002\071\003\000\002\071\004\000\002\072" +
    "\005\000\002\072\003\000\002\073\003\000\002\073\006" +
    "\000\002\073\002\000\002\074\002\000\002\074\004\000" +
    "\002\075\007\000\002\075\005\000\002\075\005\000\002" +
    "\075\003\000\002\075\010\000\002\075\006\000\002\075" +
    "\006\000\002\075\004\000\002\076\004\000\002\076\004" +
    "\000\002\076\002\000\002\077\003\000\002\077\006\000" +
    "\002\077\005\000\002\077\005\000\002\077\010\000\002" +
    "\077\005\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\101\006\000\002\101\006\000\002\101\004" +
    "\000\002\101\004\000\002\101\006\000\002\101\004\000" +
    "\002\101\004\000\002\143\003\000\002\143\005\000\002" +
    "\146\005\000\002\144\003\000\002\102\003\000\002\102" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02ca\000\002\001\ufffe\000\004\002\u02cc\001\002\000" +
    "\222\003\115\004\140\005\152\006\106\007\012\010\034" +
    "\011\053\012\061\014\074\016\126\017\121\020\117\021" +
    "\044\023\033\025\101\027\151\032\103\034\127\040\055" +
    "\041\120\042\107\044\134\045\041\047\147\050\025\051" +
    "\011\053\076\054\143\055\030\056\057\057\032\060\137" +
    "\065\144\066\013\067\020\070\045\071\047\072\131\073" +
    "\006\074\035\100\064\103\024\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\134\010\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\204\042\205\062\206\017\212\145\215\100\216\112" +
    "\217\060\001\001\000\002\001\uff04\000\004\212\u02c9\001" +
    "\002\000\002\001\uffd9\000\006\012\u02be\215\u02bf\001\002" +
    "\000\002\001\uff07\000\004\212\u02a9\001\002\000\002\001" +
    "\uff1d\000\132\004\140\006\106\007\012\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\144\066" +
    "\013\067\020\070\045\071\047\072\131\073\006\074\035" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\015\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\067\175\036\200\075\212\145\215\100\216\112\217\060" +
    "\001\002\000\070\031\177\113\166\114\206\115\157\133" +
    "\163\134\u02a7\135\160\136\201\137\161\140\170\141\200" +
    "\142\205\143\171\144\155\145\167\146\204\147\203\150" +
    "\164\151\202\152\176\153\172\154\207\155\165\156\175" +
    "\157\173\160\156\163\162\001\002\000\004\057\u02a6\001" +
    "\002\000\002\001\uff03\000\002\001\ufed8\000\002\001\uffca" +
    "\000\036\117\u012b\120\u012f\121\u012c\122\u0135\123\u012e\124" +
    "\u0134\125\u0131\126\u0133\127\u012d\130\u012a\131\u0130\132\u0132" +
    "\164\ufee7\165\ufee7\001\ufee9\000\002\001\ufff2\000\006\016" +
    "\u02a2\212\u02a0\001\002\000\132\004\140\006\106\007\012" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\144\066\013\067\020\070\045\071\047\072\131" +
    "\073\006\074\035\104\056\105\027\106\070\107\050\110" +
    "\123\111\105\116\063\154\104\155\066\161\141\162\015" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\067\175\036\200\075\212\145\215\100" +
    "\216\112\217\060\001\002\000\132\004\140\006\106\007" +
    "\012\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\212\145\215" +
    "\100\216\112\217\060\001\002\000\004\212\u029b\001\002" +
    "\000\004\102\u0299\001\002\000\002\001\uffc2\000\004\212" +
    "\u0288\001\002\000\004\102\uff15\001\ufea1\000\002\001\ufeb6" +
    "\000\132\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\212\145\215\100\216\112\217\060\001" +
    "\002\000\002\001\ufedc\000\132\004\140\006\106\007\012" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\144\066\013\067\020\070\045\071\047\072\131" +
    "\073\006\074\035\104\056\105\027\106\070\107\050\110" +
    "\123\111\105\116\063\154\104\155\066\161\141\162\015" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\067\175\036\200\075\212\145\215\100" +
    "\216\112\217\060\001\002\000\004\100\u026d\001\002\000" +
    "\004\012\u025a\001\002\000\002\001\ufedb\000\004\212\u0264" +
    "\001\002\000\002\001\uff02\000\004\010\u024e\001\002\000" +
    "\002\001\uff01\000\004\212\u024b\001\002\000\004\063\u0240" +
    "\001\ufee5\000\012\010\034\012\061\104\056\215\100\001" +
    "\002\000\002\001\ufef8\000\010\100\227\176\230\212\ufedf" +
    "\001\ufeda\000\134\004\140\006\106\007\012\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\104\056\105\027\106\070\107\050\110\123\111\105" +
    "\116\063\134\u023c\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\212\145\215\100\216" +
    "\112\217\060\001\002\000\002\001\ufea0\000\004\212\u0239" +
    "\001\002\000\002\001\ufeb6\000\002\001\ufea2\000\004\057" +
    "\u0236\001\002\000\132\004\140\006\106\007\012\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\144\066\013\067\020\070\045\071\047\072\131\073\006" +
    "\074\035\104\056\105\027\106\070\107\050\110\123\111" +
    "\105\116\063\154\104\155\066\161\141\162\015\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\067\175\036\200\075\212\145\215\100\216\112" +
    "\217\060\001\002\000\002\001\ufff8\000\002\001\uff27\000" +
    "\132\004\140\006\106\007\012\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\015\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\067\175" +
    "\036\200\075\212\145\215\100\216\112\217\060\001\002" +
    "\000\132\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\212\145\215\100\216\112\217\060\001" +
    "\002\000\132\004\140\006\106\007\012\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\144\066" +
    "\013\067\020\070\045\071\047\072\131\073\006\074\035" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\015\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\067\175\036\200\075\212\145\215\100\216\112\217\060" +
    "\001\002\000\006\012\061\215\243\001\002\000\132\004" +
    "\140\006\106\007\012\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\104\056\105\027" +
    "\106\070\107\050\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\212\145\215\100\216\112\217\060\001\002\000\002" +
    "\001\ufef7\000\002\001\uffe0\000\010\010\225\012\061\215" +
    "\100\001\002\000\004\212\u0224\001\002\000\006\164\u0222" +
    "\165\u0223\001\002\000\004\100\244\001\ufec9\000\004\212" +
    "\u020b\001\002\000\002\001\ufffc\000\132\004\140\006\106" +
    "\007\012\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\015\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\067\175\036\200\075\212\145" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\002\000\132\004\140" +
    "\006\106\007\012\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\104\056\105\027\106" +
    "\070\107\050\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\212\145\215\100\216\112\217\060\001\002\000\002\001" +
    "\uff08\000\004\141\u01be\001\uffc9\000\002\001\ufef6\000\002" +
    "\001\ufff3\000\002\001\ufeb6\000\002\001\ufed4\000\004\010" +
    "\u01a2\001\002\000\002\001\uffd6\000\002\001\ufed5\000\206" +
    "\003\115\004\140\005\152\006\106\007\012\010\034\011" +
    "\053\012\061\014\074\016\126\017\121\020\117\021\044" +
    "\023\033\025\101\027\151\032\103\034\127\040\055\041" +
    "\120\044\134\045\041\047\147\050\025\051\011\053\076" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\100\064\103\024\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\134" +
    "\010\154\104\155\066\161\141\162\015\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\067\175\036\200\075\204\042\212\145\215\100\216\112" +
    "\217\060\001\002\000\134\004\140\006\106\007\012\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\144\066\013\067\020\070\045\071\047\072\131\073" +
    "\006\074\035\104\056\105\027\106\070\107\050\110\123" +
    "\111\105\116\063\134\u0199\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\212\145\215" +
    "\100\216\112\217\060\001\002\000\132\004\140\006\106" +
    "\007\012\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\015\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\067\175\036\200\075\212\145" +
    "\215\100\216\112\217\060\001\002\000\002\001\ufffb\000" +
    "\132\004\140\006\106\007\012\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\015\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\067\175" +
    "\036\200\075\212\145\215\100\216\112\217\060\001\002" +
    "\000\004\212\u0152\001\ufef9\000\132\004\140\006\106\007" +
    "\012\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\212\145\215" +
    "\100\216\112\217\060\001\002\000\002\001\uff06\000\004" +
    "\212\u0177\001\002\000\132\004\140\006\106\007\012\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\144\066\013\067\020\070\045\071\047\072\131\073" +
    "\006\074\035\104\056\105\027\106\070\107\050\110\123" +
    "\111\105\116\063\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\212\145\215\100\216" +
    "\112\217\060\001\002\000\002\001\uff05\000\002\001\uffcb" +
    "\000\132\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\212\145\215\100\216\112\217\060\001" +
    "\002\000\134\004\140\006\106\007\012\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\144\066" +
    "\013\067\020\070\045\071\047\072\131\073\006\074\035" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\134\u0170\154\104\155\066\161\141\162\015\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\067\175\036\200\075\212\145\215\100\216\112" +
    "\217\060\001\002\000\002\001\ufeea\000\002\001\ufeeb\000" +
    "\002\001\uffbd\000\004\212\u016b\001\uff0d\000\132\004\140" +
    "\006\106\007\012\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\104\056\105\027\106" +
    "\070\107\050\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\212\145\215\100\216\112\217\060\001\002\000\002\001" +
    "\ufffd\000\004\212\u0164\001\002\000\004\212\u0157\001\002" +
    "\000\132\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\212\145\215\100\216\112\217\060\001" +
    "\002\000\012\010\034\012\061\104\056\215\100\001\002" +
    "\000\132\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\212\145\215\100\216\112\217\060\001" +
    "\002\000\002\001\uffff\000\004\212\360\001\002\000\004" +
    "\212\153\001\002\000\132\004\140\006\106\007\012\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\144\066\013\067\020\070\045\071\047\072\131\073" +
    "\006\074\035\104\056\105\027\106\070\107\050\110\123" +
    "\111\105\116\063\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\212\145\215\100\216" +
    "\112\217\060\001\002\000\070\031\177\113\166\114\206" +
    "\115\157\133\163\135\160\136\201\137\161\140\170\141" +
    "\200\142\205\143\171\144\155\145\167\146\204\147\203" +
    "\150\164\151\202\152\176\153\172\154\207\155\165\156" +
    "\175\157\173\160\156\163\162\213\174\001\002\000\132" +
    "\004\140\006\106\007\012\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\144\066\013\067\020" +
    "\070\045\071\047\072\131\073\006\074\035\104\056\105" +
    "\027\106\070\107\050\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\015\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\067\175\036" +
    "\200\075\212\145\215\100\216\112\217\060\001\002\000" +
    "\132\004\140\006\106\007\012\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\015\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\067\175" +
    "\036\200\075\212\145\215\100\216\112\217\060\001\002" +
    "\000\132\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\212\145\215\100\216\112\217\060\001" +
    "\002\000\132\004\140\006\106\007\012\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\144\066" +
    "\013\067\020\070\045\071\047\072\131\073\006\074\035" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\015\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\067\175\036\200\075\212\145\215\100\216\112\217\060" +
    "\001\002\000\132\004\140\006\106\007\012\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\104\056\105\027\106\070\107\050\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\015\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\067\175\036\200\075\212\145\215\100\216\112\217" +
    "\060\001\002\000\132\004\140\006\106\007\012\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\144\066\013\067\020\070\045\071\047\072\131\073\006" +
    "\074\035\104\056\105\027\106\070\107\050\110\123\111" +
    "\105\116\063\154\104\155\066\161\141\162\015\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\067\175\036\200\075\212\145\215\100\216\112" +
    "\217\060\001\002\000\132\004\140\006\106\007\012\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\144\066\013\067\020\070\045\071\047\072\131\073" +
    "\006\074\035\104\056\105\027\106\070\107\050\110\123" +
    "\111\105\116\063\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\212\145\215\100\216" +
    "\112\217\060\001\002\000\132\004\140\006\106\007\012" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\144\066\013\067\020\070\045\071\047\072\131" +
    "\073\006\074\035\104\056\105\027\106\070\107\050\110" +
    "\123\111\105\116\063\154\104\155\066\161\141\162\015" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\067\175\036\200\075\212\145\215\100" +
    "\216\112\217\060\001\002\000\132\004\140\006\106\007" +
    "\012\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\212\145\215" +
    "\100\216\112\217\060\001\002\000\132\004\140\006\106" +
    "\007\012\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\015\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\067\175\036\200\075\212\145" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\002\000\132\004\140" +
    "\006\106\007\012\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\104\056\105\027\106" +
    "\070\107\050\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\212\145\215\100\216\112\217\060\001\002\000\132\004" +
    "\140\006\106\007\012\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\104\056\105\027" +
    "\106\070\107\050\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\212\145\215\100\216\112\217\060\001\002\000\132" +
    "\004\140\006\106\007\012\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\144\066\013\067\020" +
    "\070\045\071\047\072\131\073\006\074\035\104\056\105" +
    "\027\106\070\107\050\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\015\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\067\175\036" +
    "\200\075\212\145\215\100\216\112\217\060\001\002\000" +
    "\132\004\140\006\106\007\012\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\015\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\067\175" +
    "\036\200\075\212\145\215\100\216\112\217\060\001\002" +
    "\000\210\003\115\004\140\005\152\006\106\007\012\010" +
    "\034\011\053\012\061\014\074\016\126\017\121\020\117" +
    "\021\044\023\033\025\101\027\151\032\103\034\127\040" +
    "\055\041\120\044\134\045\041\047\147\050\025\051\011" +
    "\053\076\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\100\064\103\024" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\134\010\154\104\155\066\161\141\162\015\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\067\175\036\200\075\204\042\212\145\214\276" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\002\000\132\004\140" +
    "\006\106\007\012\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\104\056\105\027\106" +
    "\070\107\050\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\212\145\215\100\216\112\217\060\001\002\000\010\010" +
    "\225\012\061\215\100\001\002\000\132\004\140\006\106" +
    "\007\012\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\015\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\067\175\036\200\075\212\145" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\002\000\132\004\140" +
    "\006\106\007\012\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\104\056\105\027\106" +
    "\070\107\050\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\212\145\215\100\216\112\217\060\001\002\000\132\004" +
    "\140\006\106\007\012\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\104\056\105\027" +
    "\106\070\107\050\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\212\145\215\100\216\112\217\060\001\002\000\132" +
    "\004\140\006\106\007\012\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\144\066\013\067\020" +
    "\070\045\071\047\072\131\073\006\074\035\104\056\105" +
    "\027\106\070\107\050\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\015\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\067\175\036" +
    "\200\075\212\145\215\100\216\112\217\060\001\002\000" +
    "\132\004\140\006\106\007\012\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\015\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\067\175" +
    "\036\200\075\212\145\215\100\216\112\217\060\001\002" +
    "\000\132\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\212\145\215\100\216\112\217\060\001" +
    "\002\000\132\004\140\006\106\007\012\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\144\066" +
    "\013\067\020\070\045\071\047\072\131\073\006\074\035" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\015\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\067\175\036\200\075\212\145\215\100\216\112\217\060" +
    "\001\002\000\012\031\177\156\175\157\173\160\156\001" +
    "\uff3d\000\062\031\177\115\157\133\163\135\160\136\201" +
    "\137\161\140\170\141\200\142\205\143\171\144\155\145" +
    "\167\146\204\147\203\150\164\151\202\152\176\153\172" +
    "\154\207\155\165\156\175\157\173\160\156\163\162\001" +
    "\uff42\000\034\031\177\146\204\147\203\150\164\151\202" +
    "\152\176\153\172\154\207\155\165\156\175\157\173\160" +
    "\156\163\162\001\uff30\000\024\031\177\152\176\153\172" +
    "\154\207\155\165\156\175\157\173\160\156\163\162\001" +
    "\uff2d\000\024\031\177\152\176\153\172\154\207\155\165" +
    "\156\175\157\173\160\156\163\162\001\uff2b\000\024\031" +
    "\177\152\176\153\172\154\207\155\165\156\175\157\173" +
    "\160\156\163\162\001\uff2c\000\052\031\177\137\161\140" +
    "\170\141\200\142\205\143\171\144\155\145\167\146\204" +
    "\147\203\150\164\151\202\152\176\153\172\154\207\155" +
    "\165\156\175\157\173\160\156\163\162\001\uff45\000\044" +
    "\031\177\142\205\143\171\144\155\145\167\146\204\147" +
    "\203\150\164\151\202\152\176\153\172\154\207\155\165" +
    "\156\175\157\173\160\156\163\162\001\uff40\000\002\001" +
    "\uff2a\000\004\063\250\001\uff11\000\002\001\uff13\000\006" +
    "\012\061\215\243\001\002\000\004\102\236\001\002\000" +
    "\004\102\uff15\001\uff14\000\006\100\227\176\230\001\ufeda" +
    "\000\132\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\212\145\215\100\216\112\217\060\001" +
    "\002\000\132\004\140\006\106\007\012\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\144\066" +
    "\013\067\020\070\045\071\047\072\131\073\006\074\035" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\015\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\067\175\036\200\075\212\145\215\100\216\112\217\060" +
    "\001\ufed2\000\004\177\233\001\002\000\066\031\177\113" +
    "\166\114\206\115\157\133\163\135\160\136\201\137\161" +
    "\140\170\141\200\142\205\143\171\144\155\145\167\146" +
    "\204\147\203\150\164\151\202\152\176\153\172\154\207" +
    "\155\165\156\175\157\173\160\156\163\162\001\ufed1\000" +
    "\002\001\ufed7\000\070\031\177\101\235\113\166\114\206" +
    "\115\157\133\163\135\160\136\201\137\161\140\170\141" +
    "\200\142\205\143\171\144\155\145\167\146\204\147\203" +
    "\150\164\151\202\152\176\153\172\154\207\155\165\156" +
    "\175\157\173\160\156\163\162\001\002\000\002\001\ufed6" +
    "\000\006\012\061\215\100\001\002\000\002\001\ufedd\000" +
    "\006\012\061\215\243\001\002\000\006\100\227\176\230" +
    "\001\ufedf\000\006\100\227\176\230\001\ufede\000\004\100" +
    "\244\001\ufec8\000\132\004\140\006\106\007\012\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\144\066\013\067\020\070\045\071\047\072\131\073\006" +
    "\074\035\104\056\105\027\106\070\107\050\110\123\111" +
    "\105\116\063\154\104\155\066\161\141\162\015\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\067\175\036\200\075\212\145\215\100\216\112" +
    "\217\060\001\002\000\070\031\177\101\246\113\166\114" +
    "\206\115\157\133\163\135\160\136\201\137\161\140\170" +
    "\141\200\142\205\143\171\144\155\145\167\146\204\147" +
    "\203\150\164\151\202\152\176\153\172\154\207\155\165" +
    "\156\175\157\173\160\156\163\162\001\002\000\002\001" +
    "\ufed3\000\006\100\227\176\230\001\ufed9\000\014\010\257" +
    "\012\061\100\256\104\056\215\100\001\002\000\002\001" +
    "\ufecb\000\002\001\ufecc\000\002\001\ufecf\000\002\001\uff0f" +
    "\000\006\100\262\176\263\001\ufed0\000\132\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\002\000\002\001\ufea1" +
    "\000\070\031\177\101\261\113\166\114\206\115\157\133" +
    "\163\135\160\136\201\137\161\140\170\141\200\142\205" +
    "\143\171\144\155\145\167\146\204\147\203\150\164\151" +
    "\202\152\176\153\172\154\207\155\165\156\175\157\173" +
    "\160\156\163\162\001\002\000\002\001\ufeca\000\132\004" +
    "\140\006\106\007\012\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\104\056\105\027" +
    "\106\070\107\050\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\212\145\215\100\216\112\217\060\001\002\000\132" +
    "\004\140\006\106\007\012\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\144\066\013\067\020" +
    "\070\045\071\047\072\131\073\006\074\035\104\056\105" +
    "\027\106\070\107\050\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\015\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\067\175\036" +
    "\200\075\212\145\215\100\216\112\217\060\001\ufed2\000" +
    "\004\177\265\001\002\000\002\001\ufece\000\070\031\177" +
    "\101\267\113\166\114\206\115\157\133\163\135\160\136" +
    "\201\137\161\140\170\141\200\142\205\143\171\144\155" +
    "\145\167\146\204\147\203\150\164\151\202\152\176\153" +
    "\172\154\207\155\165\156\175\157\173\160\156\163\162" +
    "\001\002\000\002\001\ufecd\000\004\063\272\001\uff12\000" +
    "\002\001\uff10\000\014\010\257\012\061\100\256\104\056" +
    "\215\100\001\002\000\002\001\uff0e\000\020\031\177\154" +
    "\207\155\165\156\175\157\173\160\156\163\162\001\uff38" +
    "\000\004\031\177\001\uff3b\000\002\001\ufff8\000\002\001" +
    "\uff9f\000\006\202\303\203\302\001\uff9b\000\002\001\ufff0" +
    "\000\206\003\115\004\140\005\152\006\106\007\012\010" +
    "\034\011\053\012\061\014\074\016\126\017\121\020\117" +
    "\021\044\023\033\025\101\027\151\032\103\034\127\040" +
    "\055\041\120\044\134\045\041\047\147\050\025\051\011" +
    "\053\076\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\100\064\103\024" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\134\010\154\104\155\066\161\141\162\015\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\067\175\036\200\075\204\042\212\145\215\100" +
    "\216\112\217\060\001\002\000\004\212\304\001\002\000" +
    "\132\004\140\006\106\007\012\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\015\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\067\175" +
    "\036\200\075\212\145\215\100\216\112\217\060\001\002" +
    "\000\070\031\177\113\166\114\206\115\157\133\163\135" +
    "\160\136\201\137\161\140\170\141\200\142\205\143\171" +
    "\144\155\145\167\146\204\147\203\150\164\151\202\152" +
    "\176\153\172\154\207\155\165\156\175\157\173\160\156" +
    "\163\162\213\306\001\002\000\206\003\115\004\140\005" +
    "\152\006\106\007\012\010\034\011\053\012\061\014\074" +
    "\016\126\017\121\020\117\021\044\023\033\025\101\027" +
    "\151\032\103\034\127\040\055\041\120\044\134\045\041" +
    "\047\147\050\025\051\011\053\076\054\143\055\030\065" +
    "\144\066\013\067\020\070\045\071\047\072\131\073\006" +
    "\074\035\100\064\103\024\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\134\010\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\204\042\212\145\215\100\216\112\217\060\001\002\000" +
    "\002\001\uff9e\000\002\001\uff9a\000\222\003\115\004\140" +
    "\005\152\006\106\007\012\010\034\011\053\012\061\014" +
    "\074\016\126\017\121\020\117\021\044\023\033\025\101" +
    "\027\151\032\103\034\127\040\055\041\120\042\107\044" +
    "\134\045\041\047\147\050\025\051\011\053\076\054\143" +
    "\055\030\056\313\057\032\060\137\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\100\064" +
    "\103\024\104\056\105\027\106\070\107\050\110\123\111" +
    "\105\116\063\134\010\154\104\155\066\161\141\162\015" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\067\175\036\200\075\204\042\205\062" +
    "\206\017\212\145\215\100\216\112\217\060\001\uff9d\000" +
    "\002\001\ufff9\000\004\212\334\001\002\000\002\001\ufff6" +
    "\000\006\202\322\203\321\001\uff99\000\002\001\ufff5\000" +
    "\002\001\ufff7\000\004\201\332\001\002\000\004\214\330" +
    "\001\002\000\004\212\323\001\002\000\132\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\002\000\070\031\177" +
    "\113\166\114\206\115\157\133\163\135\160\136\201\137" +
    "\161\140\170\141\200\142\205\143\171\144\155\145\167" +
    "\146\204\147\203\150\164\151\202\152\176\153\172\154" +
    "\207\155\165\156\175\157\173\160\156\163\162\213\325" +
    "\001\002\000\004\214\326\001\002\000\002\001\ufff8\000" +
    "\222\003\115\004\140\005\152\006\106\007\012\010\034" +
    "\011\053\012\061\014\074\016\126\017\121\020\117\021" +
    "\044\023\033\025\101\027\151\032\103\034\127\040\055" +
    "\041\120\042\107\044\134\045\041\047\147\050\025\051" +
    "\011\053\076\054\143\055\030\056\313\057\032\060\137" +
    "\065\144\066\013\067\020\070\045\071\047\072\131\073" +
    "\006\074\035\100\064\103\024\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\134\010\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\204\042\205\062\206\017\212\145\215\100\216\112" +
    "\217\060\001\uff9c\000\002\001\ufff8\000\222\003\115\004" +
    "\140\005\152\006\106\007\012\010\034\011\053\012\061" +
    "\014\074\016\126\017\121\020\117\021\044\023\033\025" +
    "\101\027\151\032\103\034\127\040\055\041\120\042\107" +
    "\044\134\045\041\047\147\050\025\051\011\053\076\054" +
    "\143\055\030\056\313\057\032\060\137\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\100" +
    "\064\103\024\104\056\105\027\106\070\107\050\110\123" +
    "\111\105\116\063\134\010\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\204\042\205" +
    "\062\206\017\212\145\215\100\216\112\217\060\001\uff98" +
    "\000\004\134\333\001\002\000\002\001\uffef\000\004\213" +
    "\335\001\002\000\004\134\336\001\002\000\002\001\ufff4" +
    "\000\004\031\177\001\uff3a\000\020\031\177\154\207\155" +
    "\165\156\175\157\173\160\156\163\162\001\uff37\000\034" +
    "\031\177\146\204\147\203\150\164\151\202\152\176\153" +
    "\172\154\207\155\165\156\175\157\173\160\156\163\162" +
    "\001\uff2f\000\046\031\177\141\200\142\205\143\171\144" +
    "\155\145\167\146\204\147\203\150\164\151\202\152\176" +
    "\153\172\154\207\155\165\156\175\157\173\160\156\163" +
    "\162\001\uff3f\000\034\031\177\146\204\147\203\150\164" +
    "\151\202\152\176\153\172\154\207\155\165\156\175\157" +
    "\173\160\156\163\162\001\uff31\000\064\031\177\114\206" +
    "\115\157\133\163\135\160\136\201\137\161\140\170\141" +
    "\200\142\205\143\171\144\155\145\167\146\204\147\203" +
    "\150\164\151\202\152\176\153\172\154\207\155\165\156" +
    "\175\157\173\160\156\163\162\001\uff44\000\012\031\177" +
    "\156\175\157\173\160\156\001\uff3c\000\024\031\177\152" +
    "\176\153\172\154\207\155\165\156\175\157\173\160\156" +
    "\163\162\001\uff2e\000\070\031\177\113\166\114\206\115" +
    "\157\133\163\135\160\136\201\137\161\140\170\141\200" +
    "\142\205\143\171\144\155\145\167\146\204\147\203\150" +
    "\164\151\202\152\176\153\172\154\207\155\165\156\175" +
    "\157\173\160\156\163\162\214\350\001\002\000\132\004" +
    "\140\006\106\007\012\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\104\056\105\027" +
    "\106\070\107\050\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\212\145\215\100\216\112\217\060\001\002\000\066" +
    "\031\177\113\166\114\206\115\157\133\163\135\160\136" +
    "\201\137\161\140\170\141\200\142\205\143\171\144\155" +
    "\145\167\146\204\147\203\150\164\151\202\152\176\153" +
    "\172\154\207\155\165\156\175\157\173\160\156\163\162" +
    "\001\uff28\000\012\031\177\156\175\157\173\160\156\001" +
    "\uff3e\000\050\031\177\140\170\141\200\142\205\143\171" +
    "\144\155\145\167\146\204\147\203\150\164\151\202\152" +
    "\176\153\172\154\207\155\165\156\175\157\173\160\156" +
    "\163\162\001\uff41\000\054\031\177\136\201\137\161\140" +
    "\170\141\200\142\205\143\171\144\155\145\167\146\204" +
    "\147\203\150\164\151\202\152\176\153\172\154\207\155" +
    "\165\156\175\157\173\160\156\163\162\001\uff46\000\060" +
    "\031\177\133\163\135\160\136\201\137\161\140\170\141" +
    "\200\142\205\143\171\144\155\145\167\146\204\147\203" +
    "\150\164\151\202\152\176\153\172\154\207\155\165\156" +
    "\175\157\173\160\156\163\162\001\uff43\000\004\031\177" +
    "\001\uff39\000\034\031\177\146\204\147\203\150\164\151" +
    "\202\152\176\153\172\154\207\155\165\156\175\157\173" +
    "\160\156\163\162\001\uff32\000\006\010\257\104\056\001" +
    "\002\000\006\112\u010d\213\u010c\001\002\000\004\117\363" +
    "\001\002\000\034\006\106\007\012\010\372\016\126\066" +
    "\366\067\020\070\045\071\047\072\131\073\006\104\056" +
    "\154\364\155\373\001\002\000\034\006\106\007\012\010" +
    "\372\016\126\066\366\067\020\070\045\071\047\072\131" +
    "\073\006\104\056\154\364\155\373\001\002\000\002\001" +
    "\ufeff\000\004\212\377\001\002\000\002\001\uff00\000\002" +
    "\001\uffac\000\002\001\ufefb\000\004\102\375\001\ufea1\000" +
    "\034\006\106\007\012\010\372\016\126\066\366\067\020" +
    "\070\045\071\047\072\131\073\006\104\056\154\364\155" +
    "\373\001\002\000\002\001\ufefd\000\004\010\376\001\002" +
    "\000\002\001\ufefa\000\034\006\106\007\012\010\372\016" +
    "\126\066\366\067\020\070\045\071\047\072\131\073\006" +
    "\104\056\154\364\155\373\001\ufef3\000\004\213\u010a\001" +
    "\002\000\004\112\u0105\001\ufef1\000\004\064\u0103\001\ufeec" +
    "\000\034\006\106\007\012\010\372\016\126\066\366\067" +
    "\020\070\045\071\047\072\131\073\006\104\056\154\364" +
    "\155\373\001\002\000\002\001\ufeed\000\034\006\106\007" +
    "\012\010\372\016\126\066\366\067\020\070\045\071\047" +
    "\072\131\073\006\104\056\154\364\155\373\001\ufef0\000" +
    "\002\001\ufef2\000\004\064\u0108\001\ufeee\000\034\006\106" +
    "\007\012\010\372\016\126\066\366\067\020\070\045\071" +
    "\047\072\131\073\006\104\056\154\364\155\373\001\002" +
    "\000\002\001\ufeef\000\002\001\ufefc\000\002\001\ufefe\000" +
    "\210\003\115\004\140\005\152\006\106\007\012\010\034" +
    "\011\053\012\061\014\074\016\126\017\121\020\117\021" +
    "\044\023\033\025\101\027\151\032\103\034\127\040\055" +
    "\041\120\044\134\045\041\047\147\050\025\051\011\053" +
    "\076\054\143\055\030\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\100\064\103\024\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\134\010\154\104\155\066\161\141\162\015\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\067\175\036\200\075\204\042\212\145\214\u0112\215" +
    "\100\216\112\217\060\001\002\000\006\010\257\104\056" +
    "\001\002\000\004\117\u010f\001\002\000\034\006\106\007" +
    "\012\010\372\016\126\066\366\067\020\070\045\071\047" +
    "\072\131\073\006\104\056\154\364\155\373\001\002\000" +
    "\002\001\uffab\000\002\001\uffda\000\002\001\ufff8\000\002" +
    "\001\uffae\000\224\003\115\004\140\005\152\006\106\007" +
    "\012\010\034\011\053\012\061\014\074\016\126\017\121" +
    "\020\117\021\044\023\033\025\101\027\151\030\u0115\032" +
    "\103\034\127\040\055\041\120\042\107\044\134\045\041" +
    "\047\147\050\025\051\011\053\076\054\143\055\030\056" +
    "\313\057\032\060\137\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\100\064\103\024\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\134\010\154\104\155\066\161\141\162\015\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\067\175\036\200\075\204\042\205\062\206\017\212" +
    "\145\215\100\216\112\217\060\001\002\000\004\134\u0116" +
    "\001\002\000\002\001\uffad\000\070\031\177\113\166\114" +
    "\206\115\157\133\163\134\u0118\135\160\136\201\137\161" +
    "\140\170\141\200\142\205\143\171\144\155\145\167\146" +
    "\204\147\203\150\164\151\202\152\176\153\172\154\207" +
    "\155\165\156\175\157\173\160\156\163\162\001\002\000" +
    "\002\001\uffd7\000\004\212\u0152\001\002\000\002\001\ufee7" +
    "\000\002\001\uff47\000\004\102\u011d\001\002\000\010\010" +
    "\u011f\012\061\215\100\001\002\000\004\212\u014f\001\ufedd" +
    "\000\004\212\u0120\001\002\000\134\004\140\006\106\007" +
    "\012\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\141\u0124\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\uff8b\000\004\112\u014a" +
    "\001\uff8c\000\042\112\uff89\117\u012b\120\u012f\121\u012c\122" +
    "\u0135\123\u012e\124\u0134\125\u0131\126\u0133\127\u012d\130\u012a" +
    "\131\u0130\132\u0132\164\ufee7\165\ufee7\213\uff89\001\ufee9\000" +
    "\004\213\u0129\001\002\000\012\010\034\012\061\104\056" +
    "\215\100\001\002\000\066\031\177\113\166\114\206\115" +
    "\157\133\163\135\160\136\201\137\161\140\170\141\200" +
    "\142\205\143\171\144\155\145\167\146\204\147\203\150" +
    "\164\151\202\152\176\153\172\154\207\155\165\156\175" +
    "\157\173\160\156\163\162\001\002\000\006\112\uff8a\213" +
    "\uff8a\001\ufeea\000\002\001\uff88\000\002\001\ufee8\000\002" +
    "\001\uff18\000\132\004\140\006\106\007\012\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\104\056\105\027\106\070\107\050\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\015\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\067\175\036\200\075\212\145\215\100\216\112\217" +
    "\060\001\002\000\134\004\140\006\106\007\012\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\144\066\013\067\020\070\045\071\047\072\131\073\006" +
    "\074\035\104\056\105\027\106\070\107\050\110\123\111" +
    "\105\116\063\141\u0140\154\104\155\066\161\141\162\015" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\067\175\036\200\075\212\145\215\100" +
    "\216\112\217\060\001\002\000\132\004\140\006\106\007" +
    "\012\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\212\145\215" +
    "\100\216\112\217\060\001\002\000\132\004\140\006\106" +
    "\007\012\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\015\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\067\175\036\200\075\212\145" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\002\000\132\004\140" +
    "\006\106\007\012\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\104\056\105\027\106" +
    "\070\107\050\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\212\145\215\100\216\112\217\060\001\002\000\132\004" +
    "\140\006\106\007\012\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\104\056\105\027" +
    "\106\070\107\050\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\212\145\215\100\216\112\217\060\001\002\000\132" +
    "\004\140\006\106\007\012\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\144\066\013\067\020" +
    "\070\045\071\047\072\131\073\006\074\035\104\056\105" +
    "\027\106\070\107\050\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\015\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\067\175\036" +
    "\200\075\212\145\215\100\216\112\217\060\001\002\000" +
    "\132\004\140\006\106\007\012\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\015\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\067\175" +
    "\036\200\075\212\145\215\100\216\112\217\060\001\002" +
    "\000\132\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\212\145\215\100\216\112\217\060\001" +
    "\002\000\132\004\140\006\106\007\012\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\144\066" +
    "\013\067\020\070\045\071\047\072\131\073\006\074\035" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\015\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\067\175\036\200\075\212\145\215\100\216\112\217\060" +
    "\001\002\000\132\004\140\006\106\007\012\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\104\056\105\027\106\070\107\050\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\015\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\067\175\036\200\075\212\145\215\100\216\112\217" +
    "\060\001\002\000\060\031\177\133\163\135\160\136\201" +
    "\137\161\140\170\141\200\142\205\143\171\144\155\145" +
    "\167\146\204\147\203\150\164\151\202\152\176\153\172" +
    "\154\207\155\165\156\175\157\173\160\156\163\162\001" +
    "\uff53\000\060\031\177\133\163\135\160\136\201\137\161" +
    "\140\170\141\200\142\205\143\171\144\155\145\167\146" +
    "\204\147\203\150\164\151\202\152\176\153\172\154\207" +
    "\155\165\156\175\157\173\160\156\163\162\001\uff51\000" +
    "\060\031\177\133\163\135\160\136\201\137\161\140\170" +
    "\141\200\142\205\143\171\144\155\145\167\146\204\147" +
    "\203\150\164\151\202\152\176\153\172\154\207\155\165" +
    "\156\175\157\173\160\156\163\162\001\uff4f\000\060\031" +
    "\177\133\163\135\160\136\201\137\161\140\170\141\200" +
    "\142\205\143\171\144\155\145\167\146\204\147\203\150" +
    "\164\151\202\152\176\153\172\154\207\155\165\156\175" +
    "\157\173\160\156\163\162\001\uff4b\000\060\031\177\133" +
    "\163\135\160\136\201\137\161\140\170\141\200\142\205" +
    "\143\171\144\155\145\167\146\204\147\203\150\164\151" +
    "\202\152\176\153\172\154\207\155\165\156\175\157\173" +
    "\160\156\163\162\001\uff50\000\060\031\177\133\163\135" +
    "\160\136\201\137\161\140\170\141\200\142\205\143\171" +
    "\144\155\145\167\146\204\147\203\150\164\151\202\152" +
    "\176\153\172\154\207\155\165\156\175\157\173\160\156" +
    "\163\162\001\uff4c\000\060\031\177\133\163\135\160\136" +
    "\201\137\161\140\170\141\200\142\205\143\171\144\155" +
    "\145\167\146\204\147\203\150\164\151\202\152\176\153" +
    "\172\154\207\155\165\156\175\157\173\160\156\163\162" +
    "\001\uff55\000\060\031\177\133\163\135\160\136\201\137" +
    "\161\140\170\141\200\142\205\143\171\144\155\145\167" +
    "\146\204\147\203\150\164\151\202\152\176\153\172\154" +
    "\207\155\165\156\175\157\173\160\156\163\162\001\uff52" +
    "\000\060\031\177\133\163\135\160\136\201\137\161\140" +
    "\170\141\200\142\205\143\171\144\155\145\167\146\204" +
    "\147\203\150\164\151\202\152\176\153\172\154\207\155" +
    "\165\156\175\157\173\160\156\163\162\001\uff4e\000\060" +
    "\031\177\133\163\135\160\136\201\137\161\140\170\141" +
    "\200\142\205\143\171\144\155\145\167\146\204\147\203" +
    "\150\164\151\202\152\176\153\172\154\207\155\165\156" +
    "\175\157\173\160\156\163\162\001\uff54\000\014\010\034" +
    "\012\061\104\056\200\u0142\215\100\001\002\000\060\031" +
    "\177\133\163\135\160\136\201\137\161\140\170\141\200" +
    "\142\205\143\171\144\155\145\167\146\204\147\203\150" +
    "\164\151\202\152\176\153\172\154\207\155\165\156\175" +
    "\157\173\160\156\163\162\001\uff5a\000\010\010\225\012" +
    "\061\215\100\001\002\000\002\001\uff59\000\004\212\u0146" +
    "\001\uff0a\000\002\001\uff58\000\134\004\140\006\106\007" +
    "\012\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\141\u0124\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\uff8b\000\004\213\u0148" +
    "\001\002\000\002\001\uff09\000\060\031\177\133\163\135" +
    "\160\136\201\137\161\140\170\141\200\142\205\143\171" +
    "\144\155\145\167\146\204\147\203\150\164\151\202\152" +
    "\176\153\172\154\207\155\165\156\175\157\173\160\156" +
    "\163\162\001\uff4d\000\134\004\140\006\106\007\012\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\144\066\013\067\020\070\045\071\047\072\131\073" +
    "\006\074\035\104\056\105\027\106\070\107\050\110\123" +
    "\111\105\116\063\141\u014c\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\212\145\215" +
    "\100\216\112\217\060\001\002\000\042\112\uff86\117\u012b" +
    "\120\u012f\121\u012c\122\u0135\123\u012e\124\u0134\125\u0131\126" +
    "\u0133\127\u012d\130\u012a\131\u0130\132\u0132\164\ufee7\165\ufee7" +
    "\213\uff86\001\ufee9\000\012\010\034\012\061\104\056\215" +
    "\100\001\002\000\006\112\uff87\213\uff87\001\ufeea\000\002" +
    "\001\uff85\000\134\004\140\006\106\007\012\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\104\056\105\027\106\070\107\050\110\123\111\105" +
    "\116\063\141\u0124\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\212\145\215\100\216" +
    "\112\217\060\001\uff8b\000\004\213\u0151\001\002\000\002" +
    "\001\uff17\000\134\004\140\006\106\007\012\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\104\056\105\027\106\070\107\050\110\123\111\105" +
    "\116\063\141\u0124\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\212\145\215\100\216" +
    "\112\217\060\001\uff8b\000\004\213\u0154\001\002\000\002" +
    "\001\uff19\000\070\031\177\113\166\114\206\115\157\133" +
    "\163\135\160\136\201\137\161\140\170\141\200\142\205" +
    "\143\171\144\155\145\167\146\204\147\203\150\164\151" +
    "\202\152\176\153\172\154\207\155\165\156\175\157\173" +
    "\160\156\163\162\213\u0156\001\002\000\002\001\uff29\000" +
    "\014\010\034\012\061\065\u015b\104\056\215\100\001\ufec3" +
    "\000\006\112\u015f\213\u0161\001\002\000\002\001\ufec6\000" +
    "\002\001\ufec5\000\004\212\u015c\001\002\000\014\010\034" +
    "\012\061\065\u015b\104\056\215\100\001\ufec3\000\006\112" +
    "\u015f\213\u015e\001\002\000\002\001\ufec4\000\014\010\034" +
    "\012\061\065\u015b\104\056\215\100\001\ufec3\000\002\001" +
    "\ufec7\000\004\117\u0162\001\002\000\132\004\140\006\106" +
    "\007\012\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\015\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\067\175\036\200\075\212\145" +
    "\215\100\216\112\217\060\001\002\000\060\031\177\133" +
    "\163\135\160\136\201\137\161\140\170\141\200\142\205" +
    "\143\171\144\155\145\167\146\204\147\203\150\164\151" +
    "\202\152\176\153\172\154\207\155\165\156\175\157\173" +
    "\160\156\163\162\001\uff5b\000\012\010\034\012\061\104" +
    "\056\215\100\001\002\000\002\001\ufea5\000\006\112\u0168" +
    "\213\u0167\001\002\000\002\001\ufeac\000\012\010\034\012" +
    "\061\104\056\215\100\001\002\000\002\001\ufea4\000\004" +
    "\031\177\001\uff34\000\134\004\140\006\106\007\012\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\144\066\013\067\020\070\045\071\047\072\131\073" +
    "\006\074\035\104\056\105\027\106\070\107\050\110\123" +
    "\111\105\116\063\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\212\145\213\u016e\215" +
    "\100\216\112\217\060\001\002\000\002\001\uff1f\000\070" +
    "\031\177\113\166\114\206\115\157\133\163\135\160\136" +
    "\201\137\161\140\170\141\200\142\205\143\171\144\155" +
    "\145\167\146\204\147\203\150\164\151\202\152\176\153" +
    "\172\154\207\155\165\156\175\157\173\160\156\163\162" +
    "\213\u016f\001\002\000\002\001\uff0c\000\002\001\uff0b\000" +
    "\002\001\uffe6\000\040\117\u012b\120\u012f\121\u012c\122\u0135" +
    "\123\u012e\124\u0134\125\u0131\126\u0133\127\u012d\130\u012a\131" +
    "\u0130\132\u0132\134\u0174\164\ufee7\165\ufee7\001\ufee9\000\004" +
    "\134\u0173\001\ufeea\000\002\001\uffe5\000\002\001\uffe4\000" +
    "\002\001\uff21\000\002\001\uff25\000\132\004\140\006\106" +
    "\007\012\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\015\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\067\175\036\200\075\212\145" +
    "\215\100\216\112\217\060\001\002\000\070\031\177\113" +
    "\166\114\206\115\157\133\163\135\160\136\201\137\161" +
    "\140\170\141\200\142\205\143\171\144\155\145\167\146" +
    "\204\147\203\150\164\151\202\152\176\153\172\154\207" +
    "\155\165\156\175\157\173\160\156\163\162\213\u0179\001" +
    "\002\000\006\100\u017b\214\u017c\001\002\000\002\001\uffeb" +
    "\000\004\134\u018e\001\uffa6\000\004\134\u017e\001\uffa6\000" +
    "\010\035\u018b\036\u0181\037\u0182\001\002\000\002\001\uffa6" +
    "\000\010\035\u0180\036\u0181\037\u0182\001\002\000\004\134" +
    "\u018a\001\002\000\132\004\140\006\106\007\012\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\144\066\013\067\020\070\045\071\047\072\131\073\006" +
    "\074\035\104\056\105\027\106\070\107\050\110\123\111" +
    "\105\116\063\154\104\155\066\161\141\162\015\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\067\175\036\200\075\212\145\215\100\216\112" +
    "\217\060\001\002\000\006\134\u0185\214\u0184\001\002\000" +
    "\002\001\ufff8\000\002\001\uffa3\000\002\001\uffa2\000\222" +
    "\003\115\004\140\005\152\006\106\007\012\010\034\011" +
    "\053\012\061\014\074\016\126\017\121\020\117\021\044" +
    "\023\033\025\101\027\151\032\103\034\127\040\055\041" +
    "\120\042\107\044\134\045\041\047\147\050\025\051\011" +
    "\053\076\054\143\055\030\056\313\057\032\060\137\065" +
    "\144\066\013\067\020\070\045\071\047\072\131\073\006" +
    "\074\035\100\064\103\024\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\134\010\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\204\042\205\062\206\017\212\145\215\100\216\112\217" +
    "\060\001\uffa4\000\072\031\177\113\166\114\206\115\157" +
    "\133\163\134\u0185\135\160\136\201\137\161\140\170\141" +
    "\200\142\205\143\171\144\155\145\167\146\204\147\203" +
    "\150\164\151\202\152\176\153\172\154\207\155\165\156" +
    "\175\157\173\160\156\163\162\214\u0184\001\002\000\002" +
    "\001\ufff8\000\222\003\115\004\140\005\152\006\106\007" +
    "\012\010\034\011\053\012\061\014\074\016\126\017\121" +
    "\020\117\021\044\023\033\025\101\027\151\032\103\034" +
    "\127\040\055\041\120\042\107\044\134\045\041\047\147" +
    "\050\025\051\011\053\076\054\143\055\030\056\313\057" +
    "\032\060\137\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\100\064\103\024\104\056\105" +
    "\027\106\070\107\050\110\123\111\105\116\063\134\010" +
    "\154\104\155\066\161\141\162\015\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\067" +
    "\175\036\200\075\204\042\205\062\206\017\212\145\215" +
    "\100\216\112\217\060\001\uffa5\000\002\001\uffa7\000\004" +
    "\134\u018c\001\002\000\002\001\uffa8\000\010\036\u0181\037" +
    "\u0182\101\u0191\001\002\000\002\001\uffa6\000\010\036\u0181" +
    "\037\u0182\101\u0190\001\002\000\002\001\uffa9\000\002\001" +
    "\uffaa\000\002\001\uff23\000\066\031\177\113\166\114\206" +
    "\115\157\133\163\135\160\136\201\137\161\140\170\141" +
    "\200\142\205\143\171\144\155\145\167\146\204\147\203" +
    "\150\164\151\202\152\176\153\172\154\207\155\165\156" +
    "\175\157\173\160\156\163\162\001\ufea7\000\006\112\u0196" +
    "\134\u0197\001\002\000\066\031\177\113\166\114\206\115" +
    "\157\133\163\135\160\136\201\137\161\140\170\141\200" +
    "\142\205\143\171\144\155\145\167\146\204\147\203\150" +
    "\164\151\202\152\176\153\172\154\207\155\165\156\175" +
    "\157\173\160\156\163\162\001\uff60\000\132\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\002\000\002\001\uffe1" +
    "\000\066\031\177\113\166\114\206\115\157\133\163\135" +
    "\160\136\201\137\161\140\170\141\200\142\205\143\171" +
    "\144\155\145\167\146\204\147\203\150\164\151\202\152" +
    "\176\153\172\154\207\155\165\156\175\157\173\160\156" +
    "\163\162\001\uff61\000\002\001\uffe8\000\070\031\177\113" +
    "\166\114\206\115\157\133\163\134\u019b\135\160\136\201" +
    "\137\161\140\170\141\200\142\205\143\171\144\155\145" +
    "\167\146\204\147\203\150\164\151\202\152\176\153\172" +
    "\154\207\155\165\156\175\157\173\160\156\163\162\001" +
    "\002\000\002\001\uffe7\000\004\021\u019d\001\002\000\004" +
    "\212\u019e\001\002\000\132\004\140\006\106\007\012\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\144\066\013\067\020\070\045\071\047\072\131\073" +
    "\006\074\035\104\056\105\027\106\070\107\050\110\123" +
    "\111\105\116\063\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\212\145\215\100\216" +
    "\112\217\060\001\002\000\070\031\177\113\166\114\206" +
    "\115\157\133\163\135\160\136\201\137\161\140\170\141" +
    "\200\142\205\143\171\144\155\145\167\146\204\147\203" +
    "\150\164\151\202\152\176\153\172\154\207\155\165\156" +
    "\175\157\173\160\156\163\162\213\u01a0\001\002\000\004" +
    "\134\u01a1\001\002\000\002\001\uffed\000\004\061\u01a4\001" +
    "\uffbc\000\004\100\u01aa\001\002\000\004\010\u01a7\001\002" +
    "\000\004\112\u01a8\001\uffbb\000\002\001\uffb8\000\002\001" +
    "\uff15\000\004\010\u01a7\001\002\000\002\001\uffb7\000\002" +
    "\001\uff7a\000\026\043\u01b7\052\u01ae\101\u01b4\103\u01bb\204" +
    "\u01b1\205\u01b3\206\u01b6\207\u01b9\210\u01af\211\u01b0\001\uff71" +
    "\000\002\001\uff7b\000\006\112\u01e3\134\u01e4\001\002\000" +
    "\002\001\uff72\000\002\001\uff6c\000\002\001\uff6d\000\002" +
    "\001\uff6a\000\002\001\uff6f\000\002\001\uff69\000\002\001" +
    "\uffc5\000\004\012\u01da\001\002\000\002\001\uff68\000\004" +
    "\010\u01d7\001\002\000\020\042\uff70\204\u01b1\205\u01b3\206" +
    "\u01b6\207\u01b9\210\u01af\211\u01b0\001\uff73\000\002\001\uff6b" +
    "\000\004\042\u01bc\001\002\000\002\001\uff76\000\004\141" +
    "\u01be\001\uffc9\000\006\010\257\104\056\001\002\000\002" +
    "\001\uffc8\000\004\212\u01c0\001\002\000\010\010\u01c3\066" +
    "\u01c1\213\uff96\001\uff8f\000\002\001\uff8d\000\006\012\u01d0" +
    "\141\u01cf\001\002\000\002\001\uff8e\000\004\213\u01c9\001" +
    "\002\000\004\112\u01c7\001\uff97\000\002\001\uff95\000\006" +
    "\010\u01c3\066\u01c1\001\uff8f\000\002\001\uff94\000\006\100" +
    "\u01cb\134\u01cc\001\002\000\002\001\uff77\000\002\001\ufff8" +
    "\000\002\001\uff75\000\224\003\115\004\140\005\152\006" +
    "\106\007\012\010\034\011\053\012\061\014\074\016\126" +
    "\017\121\020\117\021\044\023\033\025\101\027\151\032" +
    "\103\034\127\040\055\041\120\042\107\044\134\045\041" +
    "\047\147\050\025\051\011\053\076\054\143\055\030\056" +
    "\313\057\032\060\137\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\100\064\101\u01ce\103" +
    "\024\104\056\105\027\106\070\107\050\110\123\111\105" +
    "\116\063\134\010\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\204\042\205\062\206" +
    "\017\212\145\215\100\216\112\217\060\001\002\000\002" +
    "\001\uff74\000\004\012\u01d3\001\002\000\004\117\u01d1\001" +
    "\uff93\000\034\006\106\007\012\010\372\016\126\066\366" +
    "\067\020\070\045\071\047\072\131\073\006\104\056\154" +
    "\364\155\373\001\002\000\002\001\uff91\000\004\117\u01d4" +
    "\001\uff92\000\034\006\106\007\012\010\372\016\126\066" +
    "\366\067\020\070\045\071\047\072\131\073\006\104\056" +
    "\154\364\155\373\001\002\000\002\001\uff90\000\002\001" +
    "\uff6e\000\004\117\u01d8\001\002\000\034\006\106\007\012" +
    "\010\372\016\126\066\366\067\020\070\045\071\047\072" +
    "\131\073\006\104\056\154\364\155\373\001\002\000\002" +
    "\001\uff62\000\004\117\u01e1\001\uff65\000\006\112\u01dc\134" +
    "\u01dd\001\002\000\004\012\u01de\001\002\000\002\001\uff79" +
    "\000\004\117\u01df\001\uff67\000\034\006\106\007\012\010" +
    "\372\016\126\066\366\067\020\070\045\071\047\072\131" +
    "\073\006\104\056\154\364\155\373\001\002\000\002\001" +
    "\uff66\000\034\006\106\007\012\010\372\016\126\066\366" +
    "\067\020\070\045\071\047\072\131\073\006\104\056\154" +
    "\364\155\373\001\002\000\002\001\uff64\000\004\010\u01e5" +
    "\001\002\000\002\001\uff78\000\004\117\u01e6\001\002\000" +
    "\034\006\106\007\012\010\372\016\126\066\366\067\020" +
    "\070\045\071\047\072\131\073\006\104\056\154\364\155" +
    "\373\001\002\000\002\001\uff63\000\014\012\061\015\u01ee" +
    "\076\u01ed\077\u01eb\216\u01ec\001\002\000\006\063\u01f9\176" +
    "\u01f8\001\ufeb5\000\002\001\ufeb8\000\012\010\034\012\061" +
    "\104\056\215\100\001\002\000\002\001\ufef5\000\132\004" +
    "\140\006\106\007\012\010\034\011\u01ef\012\061\016\126" +
    "\032\103\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\104\056\105\027" +
    "\106\070\107\050\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\212\145\215\100\216\112\217\060\001\002\000\002" +
    "\001\ufeb7\000\004\176\u01f2\001\ufef8\000\070\031\177\101" +
    "\u01f1\113\166\114\206\115\157\133\163\135\160\136\201" +
    "\137\161\140\170\141\200\142\205\143\171\144\155\145" +
    "\167\146\204\147\203\150\164\151\202\152\176\153\172" +
    "\154\207\155\165\156\175\157\173\160\156\163\162\001" +
    "\002\000\002\001\ufeb2\000\132\004\140\006\106\007\012" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\144\066\013\067\020\070\045\071\047\072\131" +
    "\073\006\074\035\104\056\105\027\106\070\107\050\110" +
    "\123\111\105\116\063\154\104\155\066\161\141\162\015" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\067\175\036\200\075\212\145\215\100" +
    "\216\112\217\060\001\002\000\070\031\177\113\166\114" +
    "\206\115\157\133\163\135\160\136\201\137\161\140\170" +
    "\141\200\142\205\143\171\144\155\145\167\146\204\147" +
    "\203\150\164\151\202\152\176\153\172\154\207\155\165" +
    "\156\175\157\173\160\156\163\162\177\u01f4\001\002\000" +
    "\004\101\u01f5\001\002\000\002\001\ufeb1\000\004\101\u01f7" +
    "\001\002\000\002\001\ufeb0\000\012\010\257\012\061\013" +
    "\u01fe\104\056\001\002\000\006\010\257\104\056\001\002" +
    "\000\002\001\ufeb3\000\002\001\ufead\000\004\177\u01ff\001" +
    "\002\000\002\001\ufeaf\000\002\001\ufeae\000\002\001\ufeb4" +
    "\000\006\010\257\104\056\001\002\000\004\212\u0202\001" +
    "\002\000\010\010\u01c3\066\u01c1\213\uff96\001\uff8f\000\004" +
    "\213\u0204\001\002\000\004\100\u0205\001\002\000\002\001" +
    "\ufff8\000\224\003\115\004\140\005\152\006\106\007\012" +
    "\010\034\011\053\012\061\014\074\016\126\017\121\020" +
    "\117\021\044\023\033\025\101\027\151\032\103\034\127" +
    "\040\055\041\120\042\107\044\134\045\041\047\147\050" +
    "\025\051\011\053\076\054\143\055\030\056\313\057\032" +
    "\060\137\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\100\064\101\u0207\103\024\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\134" +
    "\010\154\104\155\066\161\141\162\015\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\067\175\036\200\075\204\042\205\062\206\017\212\145" +
    "\215\100\216\112\217\060\001\002\000\002\001\uffc7\000" +
    "\066\031\177\113\166\114\206\115\157\133\163\135\160" +
    "\136\201\137\161\140\170\141\200\142\205\143\171\144" +
    "\155\145\167\146\204\147\203\150\164\151\202\152\176" +
    "\153\172\154\207\155\165\156\175\157\173\160\156\163" +
    "\162\001\ufea6\000\012\031\177\156\175\157\173\160\156" +
    "\001\uff36\000\002\001\uff56\000\132\004\140\006\106\007" +
    "\012\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\212\145\215" +
    "\100\216\112\217\060\001\002\000\040\033\u021d\117\u012b" +
    "\120\u012f\121\u012c\122\u0135\123\u012e\124\u0134\125\u0131\126" +
    "\u0133\127\u012d\130\u012a\131\u0130\132\u0132\164\ufee7\165\ufee7" +
    "\001\ufee9\000\004\033\u020e\001\ufeea\000\012\010\034\012" +
    "\061\104\056\215\100\001\002\000\004\064\u0211\001\uffb6" +
    "\000\004\213\u0216\001\002\000\014\010\034\012\061\104" +
    "\056\141\u0214\215\100\001\002\000\002\001\uffb5\000\002" +
    "\001\uffb4\000\012\010\034\012\061\104\056\215\100\001" +
    "\002\000\002\001\uffb3\000\210\003\115\004\140\005\152" +
    "\006\106\007\012\010\034\011\053\012\061\014\074\016" +
    "\126\017\121\020\117\021\044\023\033\025\101\027\151" +
    "\032\103\034\127\040\055\041\120\044\134\045\041\047" +
    "\147\050\025\051\011\053\076\054\143\055\030\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\100\064\103\024\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\134\010\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\204" +
    "\042\212\145\214\u0217\215\100\216\112\217\060\001\002" +
    "\000\002\001\ufff8\000\002\001\uffb0\000\002\001\uffdb\000" +
    "\224\003\115\004\140\005\152\006\106\007\012\010\034" +
    "\011\053\012\061\014\074\016\126\017\121\020\117\021" +
    "\044\023\033\025\101\026\u021b\027\151\032\103\034\127" +
    "\040\055\041\120\042\107\044\134\045\041\047\147\050" +
    "\025\051\011\053\076\054\143\055\030\056\313\057\032" +
    "\060\137\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\100\064\103\024\104\056\105\027" +
    "\106\070\107\050\110\123\111\105\116\063\134\010\154" +
    "\104\155\066\161\141\162\015\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\067\175" +
    "\036\200\075\204\042\205\062\206\017\212\145\215\100" +
    "\216\112\217\060\001\002\000\004\134\u021c\001\002\000" +
    "\002\001\uffaf\000\014\010\034\012\061\104\056\141\u0214" +
    "\215\100\001\002\000\004\064\u0211\001\uffb6\000\004\213" +
    "\u0220\001\002\000\210\003\115\004\140\005\152\006\106" +
    "\007\012\010\034\011\053\012\061\014\074\016\126\017" +
    "\121\020\117\021\044\023\033\025\101\027\151\032\103" +
    "\034\127\040\055\041\120\044\134\045\041\047\147\050" +
    "\025\051\011\053\076\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\100" +
    "\064\103\024\104\056\105\027\106\070\107\050\110\123" +
    "\111\105\116\063\134\010\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\204\042\212" +
    "\145\214\u0217\215\100\216\112\217\060\001\002\000\002" +
    "\001\uffdc\000\002\001\uff4a\000\002\001\uff48\000\012\010" +
    "\034\012\061\104\056\215\100\001\002\000\002\001\uffd0" +
    "\000\002\001\uffce\000\006\112\u0229\213\u0228\001\002\000" +
    "\004\134\u022b\001\002\000\012\010\034\012\061\104\056" +
    "\215\100\001\002\000\002\001\uffcf\000\002\001\uffdd\000" +
    "\004\212\u0146\001\uff0a\000\002\001\uff57\000\002\001\uff22" +
    "\000\010\100\227\176\230\212\ufede\001\ufed9\000\066\031" +
    "\177\113\166\114\206\115\157\133\163\135\160\136\201" +
    "\137\161\140\170\141\200\142\205\143\171\144\155\145" +
    "\167\146\204\147\203\150\164\151\202\152\176\153\172" +
    "\154\207\155\165\156\175\157\173\160\156\163\162\001" +
    "\ufea9\000\002\001\uff20\000\012\031\177\156\175\157\173" +
    "\160\156\001\uff35\000\224\003\115\004\140\005\152\006" +
    "\106\007\012\010\034\011\053\012\061\014\074\016\126" +
    "\017\121\020\117\021\044\023\033\025\101\027\151\032" +
    "\103\034\127\040\055\041\120\042\107\044\134\045\041" +
    "\047\147\050\025\051\011\053\076\054\143\055\030\056" +
    "\313\057\032\060\137\065\144\066\013\067\020\070\045" +
    "\071\047\072\131\073\006\074\035\100\064\101\u0234\103" +
    "\024\104\056\105\027\106\070\107\050\110\123\111\105" +
    "\116\063\134\010\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\204\042\205\062\206" +
    "\017\212\145\215\100\216\112\217\060\001\002\000\002" +
    "\001\ufff1\000\060\031\177\133\163\135\160\136\201\137" +
    "\161\140\170\141\200\142\205\143\171\144\155\145\167" +
    "\146\204\147\203\150\164\151\202\152\176\153\172\154" +
    "\207\155\165\156\175\157\173\160\156\163\162\001\uff1a" +
    "\000\002\001\uffc1\000\014\012\061\015\u01ee\076\u01ed\077" +
    "\u01eb\217\u0238\001\002\000\002\001\uff1b\000\004\213\u023a" +
    "\001\002\000\004\134\u023b\001\002\000\002\001\ufffa\000" +
    "\002\001\uffea\000\070\031\177\113\166\114\206\115\157" +
    "\133\163\134\u023e\135\160\136\201\137\161\140\170\141" +
    "\200\142\205\143\171\144\155\145\167\146\204\147\203" +
    "\150\164\151\202\152\176\153\172\154\207\155\165\156" +
    "\175\157\173\160\156\163\162\001\002\000\002\001\uffe9" +
    "\000\002\001\uff49\000\014\010\257\012\061\100\256\104" +
    "\056\215\100\001\002\000\004\212\u0243\001\ufee0\000\002" +
    "\001\ufee3\000\134\004\140\006\106\007\012\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\104\056\105\027\106\070\107\050\110\123\111\105" +
    "\116\063\141\u0124\154\104\155\066\161\141\162\015\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\067\175\036\200\075\212\145\215\100\216" +
    "\112\217\060\001\uff8b\000\004\213\u0245\001\002\000\002" +
    "\001\ufee1\000\004\063\u0248\001\ufee6\000\002\001\ufee4\000" +
    "\014\010\257\012\061\100\256\104\056\215\100\001\002" +
    "\000\004\212\u0243\001\ufee0\000\002\001\ufee2\000\132\004" +
    "\140\006\106\007\012\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\104\056\105\027" +
    "\106\070\107\050\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\212\145\215\100\216\112\217\060\001\002\000\070" +
    "\031\177\113\166\114\206\115\157\133\163\135\160\136" +
    "\201\137\161\140\170\141\200\142\205\143\171\144\155" +
    "\145\167\146\204\147\203\150\164\151\202\152\176\153" +
    "\172\154\207\155\165\156\175\157\173\160\156\163\162" +
    "\213\u024d\001\002\000\002\001\ufea8\000\004\061\u024f\001" +
    "\uffbf\000\004\010\u01a7\001\002\000\004\062\u0252\001\uffba" +
    "\000\004\100\u0254\001\002\000\004\010\u01a7\001\002\000" +
    "\004\112\u01a8\001\uffb9\000\002\001\uff7a\000\226\003\115" +
    "\004\140\005\152\006\106\007\012\010\034\011\053\012" +
    "\061\014\074\016\126\017\121\020\117\021\044\023\033" +
    "\025\101\027\151\032\103\034\127\040\055\041\120\043" +
    "\u01b7\044\134\045\041\047\147\050\025\051\011\052\u01ae" +
    "\053\076\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\100\064\101\u0258" +
    "\103\u01bb\104\056\105\027\106\070\107\050\110\123\111" +
    "\105\116\063\134\010\154\104\155\066\161\141\162\015" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\067\175\036\200\075\204\u0256\205\u01b3" +
    "\206\u01b6\207\u01b9\210\u01af\211\u01b0\212\145\215\100\216" +
    "\112\217\060\001\uff71\000\002\001\uff6a\000\002\001\uffc3" +
    "\000\002\001\uffc4\000\002\001\uffc6\000\004\117\u0261\001" +
    "\uff7d\000\006\112\u025c\134\u025d\001\002\000\004\012\u025e" +
    "\001\002\000\002\001\uffe2\000\004\117\u025f\001\uff7f\000" +
    "\034\006\106\007\012\010\372\016\126\066\366\067\020" +
    "\070\045\071\047\072\131\073\006\104\056\154\364\155" +
    "\373\001\002\000\002\001\uff7e\000\034\006\106\007\012" +
    "\010\372\016\126\066\366\067\020\070\045\071\047\072" +
    "\131\073\006\104\056\154\364\155\373\001\002\000\002" +
    "\001\uff7c\000\002\001\uffbe\000\132\004\140\006\106\007" +
    "\012\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\212\145\215" +
    "\100\216\112\217\060\001\002\000\070\031\177\113\166" +
    "\114\206\115\157\133\163\135\160\136\201\137\161\140" +
    "\170\141\200\142\205\143\171\144\155\145\167\146\204" +
    "\147\203\150\164\151\202\152\176\153\172\154\207\155" +
    "\165\156\175\157\173\160\156\163\162\213\u0266\001\002" +
    "\000\210\003\115\004\140\005\152\006\106\007\012\010" +
    "\034\011\053\012\061\014\074\016\126\017\121\020\117" +
    "\021\044\023\033\025\101\027\151\032\103\034\127\040" +
    "\055\041\120\044\134\045\041\047\147\050\025\051\011" +
    "\053\076\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\100\064\103\024" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\134\010\154\104\155\066\161\141\162\015\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\067\175\036\200\075\204\042\212\145\214\u0267" +
    "\215\100\216\112\217\060\001\002\000\002\001\ufff8\000" +
    "\002\001\uffee\000\002\001\uffa1\000\224\003\115\004\140" +
    "\005\152\006\106\007\012\010\034\011\053\012\061\014" +
    "\074\016\126\017\121\020\117\021\044\022\u026b\023\033" +
    "\025\101\027\151\032\103\034\127\040\055\041\120\042" +
    "\107\044\134\045\041\047\147\050\025\051\011\053\076" +
    "\054\143\055\030\056\313\057\032\060\137\065\144\066" +
    "\013\067\020\070\045\071\047\072\131\073\006\074\035" +
    "\100\064\103\024\104\056\105\027\106\070\107\050\110" +
    "\123\111\105\116\063\134\010\154\104\155\066\161\141" +
    "\162\015\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\067\175\036\200\075\204\042" +
    "\205\062\206\017\212\145\215\100\216\112\217\060\001" +
    "\002\000\004\134\u026c\001\002\000\002\001\uffa0\000\002" +
    "\001\ufff8\000\224\003\115\004\140\005\152\006\106\007" +
    "\012\010\034\011\053\012\061\014\074\016\126\017\121" +
    "\020\117\021\044\023\033\025\101\027\151\032\103\034" +
    "\127\040\055\041\120\042\107\044\134\045\041\047\147" +
    "\050\025\051\011\053\076\054\143\055\030\056\313\057" +
    "\032\060\137\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\100\064\101\u026f\103\024\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\134\010\154\104\155\066\161\141\162\015\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\067\175\036\200\075\204\042\205\062\206\017\212" +
    "\145\215\100\216\112\217\060\001\002\000\004\046\u0270" +
    "\001\002\000\004\212\u0271\001\002\000\004\010\u01a7\001" +
    "\002\000\004\012\061\001\002\000\004\213\u0274\001\002" +
    "\000\004\100\u0275\001\002\000\002\001\ufff8\000\224\003" +
    "\115\004\140\005\152\006\106\007\012\010\034\011\053" +
    "\012\061\014\074\016\126\017\121\020\117\021\044\023" +
    "\033\025\101\027\151\032\103\034\127\040\055\041\120" +
    "\042\107\044\134\045\041\047\147\050\025\051\011\053" +
    "\076\054\143\055\030\056\313\057\032\060\137\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\100\064\101\u0277\103\024\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\134\010\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\204\042\205\062\206\017\212\145\215\100\216\112" +
    "\217\060\001\002\000\004\046\u0278\001\uffd4\000\004\212" +
    "\u027d\001\002\000\002\001\uffd8\000\002\001\uffd3\000\004" +
    "\046\u0278\001\uffd5\000\002\001\uffd2\000\004\010\u01a7\001" +
    "\002\000\004\012\u027f\001\002\000\004\213\u0280\001\002" +
    "\000\004\100\u0281\001\002\000\002\001\ufff8\000\224\003" +
    "\115\004\140\005\152\006\106\007\012\010\034\011\053" +
    "\012\061\014\074\016\126\017\121\020\117\021\044\023" +
    "\033\025\101\027\151\032\103\034\127\040\055\041\120" +
    "\042\107\044\134\045\041\047\147\050\025\051\011\053" +
    "\076\054\143\055\030\056\313\057\032\060\137\065\144" +
    "\066\013\067\020\070\045\071\047\072\131\073\006\074" +
    "\035\100\064\101\u0283\103\024\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\134\010\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\204\042\205\062\206\017\212\145\215\100\216\112" +
    "\217\060\001\002\000\002\001\uffd1\000\002\001\uff24\000" +
    "\002\001\uff1e\000\014\012\061\015\u01ee\075\u0287\076\u01ed" +
    "\077\u01eb\001\002\000\002\001\ufef4\000\132\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\015\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\067\175\036\200\075\212" +
    "\145\215\100\216\112\217\060\001\uff5f\000\004\112\u0297" +
    "\001\uff5e\000\066\031\177\113\166\114\206\115\157\133" +
    "\163\135\160\136\201\137\161\140\170\141\200\142\205" +
    "\143\171\144\155\145\167\146\204\147\203\150\164\151" +
    "\202\152\176\153\172\154\207\155\165\156\175\157\173" +
    "\160\156\163\162\001\uff5c\000\004\134\u028c\001\002\000" +
    "\132\004\140\006\106\007\012\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\015\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\067\175" +
    "\036\200\075\212\145\215\100\216\112\217\060\001\uff5f" +
    "\000\004\134\u028e\001\002\000\132\004\140\006\106\007" +
    "\012\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\144\066\013\067\020\070\045\071\047\072" +
    "\131\073\006\074\035\104\056\105\027\106\070\107\050" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\015\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\067\175\036\200\075\212\145\215" +
    "\100\216\112\217\060\001\uff5f\000\004\213\u0290\001\002" +
    "\000\210\003\115\004\140\005\152\006\106\007\012\010" +
    "\034\011\053\012\061\014\074\016\126\017\121\020\117" +
    "\021\044\023\033\025\101\027\151\032\103\034\127\040" +
    "\055\041\120\044\134\045\041\047\147\050\025\051\011" +
    "\053\076\054\143\055\030\065\144\066\013\067\020\070" +
    "\045\071\047\072\131\073\006\074\035\100\064\103\024" +
    "\104\056\105\027\106\070\107\050\110\123\111\105\116" +
    "\063\134\010\154\104\155\066\161\141\162\015\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\067\175\036\200\075\204\042\212\145\214\u0292" +
    "\215\100\216\112\217\060\001\002\000\002\001\uffec\000" +
    "\002\001\ufff8\000\002\001\uffb2\000\224\003\115\004\140" +
    "\005\152\006\106\007\012\010\034\011\053\012\061\014" +
    "\074\016\126\017\121\020\117\021\044\023\033\024\u0295" +
    "\025\101\027\151\032\103\034\127\040\055\041\120\042" +
    "\107\044\134\045\041\047\147\050\025\051\011\053\076" +
    "\054\143\055\030\056\313\057\032\060\137\065\144\066" +
    "\013\067\020\070\045\071\047\072\131\073\006\074\035" +
    "\100\064\103\024\104\056\105\027\106\070\107\050\110" +
    "\123\111\105\116\063\134\010\154\104\155\066\161\141" +
    "\162\015\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\067\175\036\200\075\204\042" +
    "\205\062\206\017\212\145\215\100\216\112\217\060\001" +
    "\002\000\004\134\u0296\001\002\000\002\001\uffb1\000\132" +
    "\004\140\006\106\007\012\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\144\066\013\067\020" +
    "\070\045\071\047\072\131\073\006\074\035\104\056\105" +
    "\027\106\070\107\050\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\015\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\067\175\036" +
    "\200\075\212\145\215\100\216\112\217\060\001\002\000" +
    "\066\031\177\113\166\114\206\115\157\133\163\135\160" +
    "\136\201\137\161\140\170\141\200\142\205\143\171\144" +
    "\155\145\167\146\204\147\203\150\164\151\202\152\176" +
    "\153\172\154\207\155\165\156\175\157\173\160\156\163" +
    "\162\001\uff5d\000\010\010\u029a\012\061\215\100\001\002" +
    "\000\004\212\u0120\001\ufea3\000\012\010\034\012\061\104" +
    "\056\215\100\001\002\000\004\213\u029d\001\002\000\002" +
    "\001\ufeab\000\066\031\177\113\166\114\206\115\157\133" +
    "\163\135\160\136\201\137\161\140\170\141\200\142\205" +
    "\143\171\144\155\145\167\146\204\147\203\150\164\151" +
    "\202\152\176\153\172\154\207\155\165\156\175\157\173" +
    "\160\156\163\162\001\ufeaa\000\002\001\uff26\000\004\016" +
    "\u02a4\001\002\000\004\134\u02a3\001\002\000\002\001\uffcd" +
    "\000\002\001\uffde\000\004\213\u02a5\001\002\000\002\001" +
    "\uffcc\000\002\001\uffc0\000\002\001\uffdf\000\002\001\uff33" +
    "\000\134\004\140\006\106\007\012\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\144\066\013" +
    "\067\020\070\045\071\047\072\131\073\006\074\035\104" +
    "\056\105\027\106\070\107\050\110\123\111\105\116\063" +
    "\141\u02ac\154\104\155\066\161\141\162\015\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\067\175\036\200\075\212\145\215\100\216\112\217" +
    "\060\001\ufec2\000\004\213\u02bc\001\002\000\004\112\u02b3" +
    "\001\ufef1\000\012\010\034\012\061\104\056\215\100\001" +
    "\002\000\070\031\177\064\u02ae\113\166\114\206\115\157" +
    "\133\163\135\160\136\201\137\161\140\170\141\200\142" +
    "\205\143\171\144\155\145\167\146\204\147\203\150\164" +
    "\151\202\152\176\153\172\154\207\155\165\156\175\157" +
    "\173\160\156\163\162\001\ufebd\000\134\004\140\006\106" +
    "\007\012\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\141\u02af\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\212\145\215\100\216\112\217\060\001\002\000\012\010" +
    "\034\012\061\104\056\215\100\001\002\000\066\031\177" +
    "\113\166\114\206\115\157\133\163\135\160\136\201\137" +
    "\161\140\170\141\200\142\205\143\171\144\155\145\167" +
    "\146\204\147\203\150\164\151\202\152\176\153\172\154" +
    "\207\155\165\156\175\157\173\160\156\163\162\001\ufebe" +
    "\000\002\001\ufeba\000\002\001\ufeb9\000\134\004\140\006" +
    "\106\007\012\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\144\066\013\067\020\070\045\071" +
    "\047\072\131\073\006\074\035\104\056\105\027\106\070" +
    "\107\050\110\123\111\105\116\063\141\u02b5\154\104\155" +
    "\066\161\141\162\015\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\067\175\036\200" +
    "\075\212\145\215\100\216\112\217\060\001\ufef0\000\002" +
    "\001\ufec1\000\012\010\034\012\061\104\056\215\100\001" +
    "\002\000\070\031\177\064\u02b7\113\166\114\206\115\157" +
    "\133\163\135\160\136\201\137\161\140\170\141\200\142" +
    "\205\143\171\144\155\145\167\146\204\147\203\150\164" +
    "\151\202\152\176\153\172\154\207\155\165\156\175\157" +
    "\173\160\156\163\162\001\ufebf\000\134\004\140\006\106" +
    "\007\012\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\144\066\013\067\020\070\045\071\047" +
    "\072\131\073\006\074\035\104\056\105\027\106\070\107" +
    "\050\110\123\111\105\116\063\141\u02b8\154\104\155\066" +
    "\161\141\162\015\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\067\175\036\200\075" +
    "\212\145\215\100\216\112\217\060\001\002\000\012\010" +
    "\034\012\061\104\056\215\100\001\002\000\066\031\177" +
    "\113\166\114\206\115\157\133\163\135\160\136\201\137" +
    "\161\140\170\141\200\142\205\143\171\144\155\145\167" +
    "\146\204\147\203\150\164\151\202\152\176\153\172\154" +
    "\207\155\165\156\175\157\173\160\156\163\162\001\ufec0" +
    "\000\002\001\ufebc\000\002\001\ufebb\000\002\001\uff1c\000" +
    "\006\112\u02c6\134\u02c7\001\002\000\002\001\uff82\000\014" +
    "\010\034\012\061\100\u02c3\104\056\215\100\001\002\000" +
    "\002\001\uff83\000\002\001\uff81\000\002\001\ufee9\000\132" +
    "\004\140\006\106\007\012\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\144\066\013\067\020" +
    "\070\045\071\047\072\131\073\006\074\035\104\056\105" +
    "\027\106\070\107\050\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\015\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\067\175\036" +
    "\200\075\212\145\215\100\216\112\217\060\001\002\000" +
    "\070\031\177\101\u02c5\113\166\114\206\115\157\133\163" +
    "\135\160\136\201\137\161\140\170\141\200\142\205\143" +
    "\171\144\155\145\167\146\204\147\203\150\164\151\202" +
    "\152\176\153\172\154\207\155\165\156\175\157\173\160" +
    "\156\163\162\001\002\000\002\001\uff80\000\006\012\u02be" +
    "\215\u02bf\001\002\000\002\001\uffe3\000\002\001\uff84\000" +
    "\134\004\140\006\106\007\012\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\144\066\013\067" +
    "\020\070\045\071\047\072\131\073\006\074\035\104\056" +
    "\105\027\106\070\107\050\110\123\111\105\116\063\141" +
    "\u0124\154\104\155\066\161\141\162\015\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\067\175\036\200\075\212\145\215\100\216\112\217\060" +
    "\001\uff8b\000\004\213\u02cb\001\002\000\002\001\uff16\000" +
    "\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02ca\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\074\004\147\005\141\010\110\050\134\051\042" +
    "\054\107\056\013\062\015\063\053\064\115\071\070\101" +
    "\064\102\123\103\113\107\030\120\101\121\121\122\022" +
    "\126\131\127\021\130\045\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\u02bc\040\u02bf\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\050\134\051\042\054\107\056" +
    "\013\062\u02a7\063\053\064\115\071\070\101\064\102\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u02a0\001\001\000\052\050\134\051\042\054\107\056" +
    "\013\062\u029e\063\053\064\115\071\070\101\064\102\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\050\001\001\000\052\050\134" +
    "\051\042\054\107\056\013\062\u029d\063\053\064\115\071" +
    "\070\101\064\102\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\u0285\001" +
    "\001\000\052\050\134\051\042\054\107\056\013\062\u0284" +
    "\063\053\064\115\071\070\101\064\102\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\050\001\001\000\002\001\001\000\052\050" +
    "\134\051\042\054\107\056\013\062\u0283\063\053\064\115" +
    "\071\070\101\064\102\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\050" +
    "\001\001\000\002\001\001\000\004\041\u025a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\051\042\063\053\064\115\071\070\102\u0118" +
    "\107\u011b\122\u0119\137\u023e\140\006\142\020\144\112\150" +
    "\036\154\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\134\051\042\054\107\056\013\062\u023c\063" +
    "\053\064\115\071\070\101\064\102\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\u0236\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\050\134\051\042\054\107\056\013\062\u0234" +
    "\063\053\064\115\071\070\101\064\102\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\050\001\001\000\004\006\u0232\001\001\000" +
    "\002\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\u0231\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\052\050\134\051" +
    "\042\054\107\056\013\062\u0230\063\053\064\115\071\070" +
    "\101\064\102\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\050\001\001" +
    "\000\052\050\134\051\042\054\107\056\013\062\u022f\063" +
    "\053\064\115\071\070\101\064\102\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\050\001\001\000\010\063\u022e\064\115\144\112" +
    "\001\001\000\052\050\134\051\042\054\107\056\013\062" +
    "\u022d\063\053\064\115\071\070\101\064\102\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\063\225\064\115\071\222\107\223\142" +
    "\020\144\112\145\u022b\147\221\150\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\050\134\051\042\054\107" +
    "\056\013\062\u0209\063\053\064\115\071\070\101\064\102" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\050\001\001\000\052\050" +
    "\134\051\042\054\107\056\013\062\u0208\063\053\064\115" +
    "\071\070\101\064\102\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\050" +
    "\001\001\000\052\050\134\051\042\054\107\056\013\062" +
    "\u0207\063\053\064\115\071\070\101\064\102\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\050\001\001\000\002\001\001\000\004" +
    "\044\u01ff\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\u01e7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\005\u019b\010" +
    "\110\050\134\051\042\054\107\056\013\062\015\063\053" +
    "\064\115\071\070\101\064\102\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\050\001\001\000\052\050\134\051\042\054\107\056" +
    "\013\062\u0199\063\053\064\115\071\070\101\064\102\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\050\001\001\000\054\045\u0193" +
    "\050\134\051\042\054\107\056\013\062\u0194\063\053\064" +
    "\115\071\070\101\064\102\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\050\001\001\000\002\001\001\000\052\050\134\051\042" +
    "\054\107\056\013\062\u0192\063\053\064\115\071\070\101" +
    "\064\102\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\050\001\001\000" +
    "\002\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\u0191\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\u0175\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\u0174\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\052\050\u0171\051" +
    "\042\054\107\056\013\062\u0124\063\053\064\115\071\070" +
    "\101\064\102\123\107\030\122\u0170\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u016b\001\001\000\052\050\134\051\042\054\107" +
    "\056\013\062\u0169\063\053\064\115\071\070\101\064\102" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\050\134" +
    "\051\042\054\107\056\013\062\u0154\063\053\064\115\071" +
    "\070\101\064\102\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\034\051\042\063\053\064\115\071\070\102\u0118" +
    "\107\u011b\122\u0119\137\u011a\140\006\142\020\144\112\150" +
    "\036\154\050\001\001\000\052\050\134\051\042\054\107" +
    "\056\013\062\u0116\063\053\064\115\071\070\101\064\102" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\050\134" +
    "\051\042\054\107\056\013\062\153\063\053\064\115\071" +
    "\070\101\064\102\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\002\001\001\000\052\050\134\051\042\054\107" +
    "\056\013\062\356\063\053\064\115\071\070\101\064\102" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\050\001\001\000\052\050" +
    "\134\051\042\054\107\056\013\062\355\063\053\064\115" +
    "\071\070\101\064\102\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\050" +
    "\001\001\000\052\050\134\051\042\054\107\056\013\062" +
    "\354\063\053\064\115\071\070\101\064\102\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\050\001\001\000\052\050\134\051\042" +
    "\054\107\056\013\062\353\063\053\064\115\071\070\101" +
    "\064\102\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\050\001\001\000" +
    "\052\050\134\051\042\054\107\056\013\062\352\063\053" +
    "\064\115\071\070\101\064\102\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\050\001\001\000\052\050\134\051\042\054\107\056" +
    "\013\062\351\063\053\064\115\071\070\101\064\102\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\050\001\001\000\052\050\134" +
    "\051\042\054\107\056\013\062\346\063\053\064\115\071" +
    "\070\101\064\102\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\052\050\134\051\042\054\107\056\013\062\345" +
    "\063\053\064\115\071\070\101\064\102\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\050\001\001\000\052\050\134\051\042\054" +
    "\107\056\013\062\344\063\053\064\115\071\070\101\064" +
    "\102\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\052" +
    "\050\134\051\042\054\107\056\013\062\343\063\053\064" +
    "\115\071\070\101\064\102\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\050\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\342\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\052\050\134\051" +
    "\042\054\107\056\013\062\341\063\053\064\115\071\070" +
    "\101\064\102\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\050\001\001" +
    "\000\052\050\134\051\042\054\107\056\013\062\340\063" +
    "\053\064\115\071\070\101\064\102\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\050\001\001\000\052\050\134\051\042\054\107" +
    "\056\013\062\337\063\053\064\115\071\070\101\064\102" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\050\001\001\000\052\050" +
    "\134\051\042\054\107\056\013\062\336\063\053\064\115" +
    "\071\070\101\064\102\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\050" +
    "\001\001\000\056\005\276\010\110\050\134\051\042\054" +
    "\107\056\013\062\015\063\053\064\115\071\070\101\064" +
    "\102\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\052" +
    "\050\134\051\042\054\107\056\013\062\274\063\053\064" +
    "\115\071\070\101\064\102\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\050\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\273\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\024\063\225\064" +
    "\115\071\222\107\223\142\020\144\112\145\217\147\221" +
    "\150\220\001\001\000\052\050\134\051\042\054\107\056" +
    "\013\062\216\063\053\064\115\071\070\101\064\102\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\050\001\001\000\052\050\134" +
    "\051\042\054\107\056\013\062\215\063\053\064\115\071" +
    "\070\101\064\102\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\052\050\134\051\042\054\107\056\013\062\214" +
    "\063\053\064\115\071\070\101\064\102\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\050\001\001\000\052\050\134\051\042\054" +
    "\107\056\013\062\213\063\053\064\115\071\070\101\064" +
    "\102\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\052" +
    "\050\134\051\042\054\107\056\013\062\212\063\053\064" +
    "\115\071\070\101\064\102\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\050\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\211\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\052\050\134\051" +
    "\042\054\107\056\013\062\210\063\053\064\115\071\070" +
    "\101\064\102\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\050\001\001" +
    "\000\052\050\134\051\042\054\107\056\013\062\207\063" +
    "\053\064\115\071\070\101\064\102\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\063" +
    "\246\064\115\144\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\050\134\051\042\054" +
    "\107\056\013\062\233\063\053\064\115\071\070\101\064" +
    "\102\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\054" +
    "\050\134\051\042\054\107\056\013\062\231\063\053\064" +
    "\115\065\230\071\070\101\064\102\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\063\240\064\115\071\237\140\236\144\112\001\001" +
    "\000\002\001\001\000\010\063\241\064\115\144\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\134\051\042\054\107\056\013\062\244\063" +
    "\053\064\115\071\070\101\064\102\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\063\240\064\115\066\253\067" +
    "\254\070\251\071\237\102\250\140\252\144\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\151\267\001\001\000\002\001\001\000\052\050\134" +
    "\051\042\054\107\056\013\062\257\063\053\064\115\071" +
    "\070\101\064\102\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\134\051\042\054\107\056\013\062\265\063" +
    "\053\064\115\071\070\101\064\102\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\050\001\001\000\054\050\134\051\042\054\107" +
    "\056\013\062\231\063\053\064\115\065\263\071\070\101" +
    "\064\102\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\152\270\001\001\000\002\001\001\000" +
    "\024\063\240\064\115\066\272\067\254\070\251\071\237" +
    "\102\250\140\252\144\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\310\001\001" +
    "\000\004\026\277\001\001\000\004\030\300\001\001\000" +
    "\002\001\001\000\056\005\307\010\110\050\134\051\042" +
    "\054\107\056\013\062\015\063\053\064\115\071\070\101" +
    "\064\102\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\050\001\001\000" +
    "\002\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\304\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\056\005\306\010\110\050\134\051\042\054\107\056\013" +
    "\062\015\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\005\316\007\311\010\110\027\314" +
    "\050\134\051\042\054\107\056\013\062\015\063\053\064" +
    "\115\071\070\101\064\102\123\103\113\107\030\120\313" +
    "\121\315\122\022\126\131\127\021\130\045\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\050\134\051\042\054\107\056\013\062\323" +
    "\063\053\064\115\071\070\101\064\102\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\326\001\001\000\074\005\316\007\311" +
    "\010\110\050\134\051\042\054\107\056\013\062\015\063" +
    "\053\064\115\071\070\101\064\102\123\103\113\107\030" +
    "\120\313\121\315\122\022\126\131\127\021\130\045\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\050\001\001\000\004\006\330\001\001\000\074\005" +
    "\316\007\311\010\110\050\134\051\042\054\107\056\013" +
    "\062\015\063\053\064\115\071\070\101\064\102\123\103" +
    "\113\107\030\120\313\121\315\122\022\126\131\127\021" +
    "\130\045\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\050\134\051\042\054\107\056\013\062\350\063\053\064" +
    "\115\071\070\101\064\102\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\360\102\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\054\366\055" +
    "\367\102\364\153\370\001\001\000\012\054\366\055\u010a" +
    "\102\364\153\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\054\366\055\373\102\364\153" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\054\366\055\u0101\057\377\061\u0100\102" +
    "\364\153\370\001\001\000\002\001\001\000\004\060\u0105" +
    "\001\001\000\002\001\001\000\012\054\366\055\u0103\102" +
    "\364\153\370\001\001\000\002\001\001\000\012\054\366" +
    "\055\u0106\102\364\153\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\054\366\055\u0108\102\364\153\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\005\u0112\010\110\020\u0110\050\134\051\042" +
    "\054\107\056\013\062\015\063\053\064\115\071\070\101" +
    "\064\102\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\050\001\001\000" +
    "\004\102\u010d\001\001\000\002\001\001\000\012\054\366" +
    "\055\u010f\102\364\153\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0113\001\001\000\002\001\001" +
    "\000\074\005\316\007\311\010\110\050\134\051\042\054" +
    "\107\056\013\062\015\063\053\064\115\071\070\101\064" +
    "\102\123\103\113\107\030\120\313\121\315\122\022\126" +
    "\131\127\021\130\045\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\063\240\064\115\071\237\140\u011d" +
    "\144\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\035\u0122\036\u0120\050\u0125\051\042\054\107\056\013" +
    "\062\u0124\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\u0121\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\051\042\063\053" +
    "\064\115\071\070\102\u0118\106\u0126\107\u011b\122\u0127\140" +
    "\006\142\020\144\112\150\036\154\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\050\134\051\042\054\107" +
    "\056\013\062\u0148\063\053\064\115\071\070\101\064\102" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\050\001\001\000\052\050" +
    "\134\051\042\054\107\056\013\062\u0140\063\053\064\115" +
    "\071\070\101\064\102\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\050" +
    "\001\001\000\052\050\134\051\042\054\107\056\013\062" +
    "\u013e\063\053\064\115\071\070\101\064\102\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\050\001\001\000\052\050\134\051\042" +
    "\054\107\056\013\062\u013d\063\053\064\115\071\070\101" +
    "\064\102\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\050\001\001\000" +
    "\052\050\134\051\042\054\107\056\013\062\u013c\063\053" +
    "\064\115\071\070\101\064\102\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\050\001\001\000\052\050\134\051\042\054\107\056" +
    "\013\062\u013b\063\053\064\115\071\070\101\064\102\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\050\001\001\000\052\050\134" +
    "\051\042\054\107\056\013\062\u013a\063\053\064\115\071" +
    "\070\101\064\102\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\052\050\134\051\042\054\107\056\013\062\u0139" +
    "\063\053\064\115\071\070\101\064\102\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\050\001\001\000\052\050\134\051\042\054" +
    "\107\056\013\062\u0138\063\053\064\115\071\070\101\064" +
    "\102\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\052" +
    "\050\134\051\042\054\107\056\013\062\u0137\063\053\064" +
    "\115\071\070\101\064\102\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\050\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\u0136\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\052\050\134\051" +
    "\042\054\107\056\013\062\u0135\063\053\064\115\071\070" +
    "\101\064\102\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\051\042\063\053\064\115\071\070\102\u0118" +
    "\107\u011b\122\u0142\140\006\142\020\144\112\150\036\154" +
    "\050\001\001\000\002\001\001\000\024\063\225\064\115" +
    "\071\222\107\223\142\020\144\112\145\u0143\147\221\150" +
    "\220\001\001\000\002\001\001\000\004\053\u0144\001\001" +
    "\000\002\001\001\000\056\035\u0146\036\u0120\050\u0125\051" +
    "\042\054\107\056\013\062\u0124\063\053\064\115\071\070" +
    "\101\064\102\123\107\030\122\u0121\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\050\u014c\051\042\054\107\056\013\062\u0124\063\053" +
    "\064\115\071\070\101\064\102\123\107\030\122\u014a\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\050\001\001\000\002\001\001\000\034\051\042\063" +
    "\053\064\115\071\070\102\u0118\106\u014d\107\u011b\122\u0127" +
    "\140\006\142\020\144\112\150\036\154\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\035\u014f\036\u0120" +
    "\050\u0125\051\042\054\107\056\013\062\u0124\063\053\064" +
    "\115\071\070\101\064\102\123\107\030\122\u0121\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\035\u0152\036\u0120\050\u0125\051\042\054\107\056\013\062" +
    "\u0124\063\053\064\115\071\070\101\064\102\123\107\030" +
    "\122\u0121\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\051" +
    "\042\063\053\064\115\071\070\072\u0157\073\u0158\102\u0118" +
    "\107\u011b\122\u0159\140\006\142\020\144\112\150\036\154" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\051\042\063\053\064" +
    "\115\071\070\072\u015c\073\u0158\102\u0118\107\u011b\122\u0159" +
    "\140\006\142\020\144\112\150\036\154\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\051\042\063\053" +
    "\064\115\071\070\073\u015f\102\u0118\107\u011b\122\u0159\140" +
    "\006\142\020\144\112\150\036\154\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\050\134\051\042\054" +
    "\107\056\013\062\u0162\063\053\064\115\071\070\101\064" +
    "\102\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\002" +
    "\001\001\000\034\051\042\063\053\064\115\071\070\102" +
    "\u0118\107\u011b\122\u0164\140\006\142\020\143\u0165\144\112" +
    "\150\036\154\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\051\042\063\053\064\115" +
    "\071\070\102\u0118\107\u011b\122\u0168\140\006\142\020\144" +
    "\112\150\036\154\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\134\051\042\054\107\056\013\062" +
    "\u016c\063\053\064\115\071\070\101\064\102\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\050\134\051\042\054\107\056\013\062\u0177\063\053" +
    "\064\115\071\070\101\064\102\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\050\001\001\000\002\001\001\000\004\022\u0179\001" +
    "\001\000\002\001\001\000\004\023\u018c\001\001\000\004" +
    "\023\u017c\001\001\000\002\001\001\000\004\023\u017e\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\050\134" +
    "\051\042\054\107\056\013\062\u0186\063\053\064\115\071" +
    "\070\101\064\102\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\004\024\u0182\001\001\000\004\006\u0185\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\005\316\007" +
    "\311\010\110\050\134\051\042\054\107\056\013\062\015" +
    "\063\053\064\115\071\070\101\064\102\123\103\113\107" +
    "\030\120\313\121\315\122\022\126\131\127\021\130\045" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\050\001\001\000\004\024\u0187\001\001\000\004" +
    "\006\u0188\001\001\000\074\005\316\007\311\010\110\050" +
    "\134\051\042\054\107\056\013\062\015\063\053\064\115" +
    "\071\070\101\064\102\123\103\113\107\030\120\313\121" +
    "\315\122\022\126\131\127\021\130\045\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u018e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\050\134\051\042\054\107\056\013\062\u0197\063\053" +
    "\064\115\071\070\101\064\102\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\050\134\051\042\054" +
    "\107\056\013\062\u019e\063\053\064\115\071\070\101\064" +
    "\102\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\104" +
    "\u01a2\001\001\000\002\001\001\000\006\107\u01a5\133\u01a4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\u01a8\001\001\000\002\001\001\000\004" +
    "\042\u01aa\001\001\000\016\043\u01ab\111\u01ac\112\u01b9\114" +
    "\u01b7\115\u01b1\136\u01b4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\110\u01da\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\115\u01d5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\u01bc\001\001\000\004\102\u01be\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\u01c3\033\u01c4\034\u01c5\134" +
    "\u01c1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\u01c7\134\u01c1\001\001\000\002\001\001" +
    "\000\004\113\u01c9\001\001\000\002\001\001\000\004\006" +
    "\u01cc\001\001\000\002\001\001\000\074\005\316\007\311" +
    "\010\110\050\134\051\042\054\107\056\013\062\015\063" +
    "\053\064\115\071\070\101\064\102\123\103\113\107\030" +
    "\120\313\121\315\122\022\126\131\127\021\130\045\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\054\366\055\u01d1\102\364\153\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\054" +
    "\366\055\u01d4\102\364\153\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\054\366\055" +
    "\u01d8\102\364\153\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\054\366\055\u01df\102\364" +
    "\153\370\001\001\000\002\001\001\000\012\054\366\055" +
    "\u01e1\102\364\153\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\054" +
    "\366\055\u01e6\102\364\153\370\001\001\000\002\001\001" +
    "\000\006\077\u01e9\144\u01e8\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\051\042\063\053\064\115\071\070" +
    "\102\u0118\107\u011b\122\u01f5\140\006\142\020\144\112\150" +
    "\036\154\050\001\001\000\002\001\001\000\052\050\134" +
    "\051\042\054\107\056\013\062\u01ef\063\053\064\115\071" +
    "\070\101\064\102\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\050\134\051\042\054\107\056" +
    "\013\062\u01f2\063\053\064\115\071\070\101\064\102\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\100\u01fb\102\u01fc\144\u01fa\001\001" +
    "\000\004\102\u01f9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0200\001\001\000\002\001" +
    "\001\000\012\032\u0202\033\u01c4\034\u01c5\134\u01c1\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0205\001" +
    "\001\000\074\005\316\007\311\010\110\050\134\051\042" +
    "\054\107\056\013\062\015\063\053\064\115\071\070\101" +
    "\064\102\123\103\113\107\030\120\313\121\315\122\022" +
    "\126\131\127\021\130\045\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\050\u020c\051\042\054\107\056\013\062\u0124" +
    "\063\053\064\115\071\070\101\064\102\123\107\030\122" +
    "\u020b\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\051\042\063\053\064\115\071\070\102\u0118" +
    "\107\u011b\122\u020e\140\006\142\020\144\112\150\036\154" +
    "\050\001\001\000\004\014\u020f\001\001\000\002\001\001" +
    "\000\034\015\u0211\051\042\063\053\064\115\071\070\102" +
    "\u0118\107\u011b\122\u0212\140\006\142\020\144\112\150\036" +
    "\154\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\051\042\063\053\064\115\071\070\102\u0118\107\u011b" +
    "\122\u0214\140\006\142\020\144\112\150\036\154\050\001" +
    "\001\000\002\001\001\000\060\005\u0217\010\110\017\u0218" +
    "\050\134\051\042\054\107\056\013\062\015\063\053\064" +
    "\115\071\070\101\064\102\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\050\001\001\000\004\006\u0219\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\005\316\007\311\010\110\050" +
    "\134\051\042\054\107\056\013\062\015\063\053\064\115" +
    "\071\070\101\064\102\123\103\113\107\030\120\313\121" +
    "\315\122\022\126\131\127\021\130\045\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\015\u021d" +
    "\051\042\063\053\064\115\071\070\102\u0118\107\u011b\122" +
    "\u0212\140\006\142\020\144\112\150\036\154\050\001\001" +
    "\000\004\014\u021e\001\001\000\002\001\001\000\060\005" +
    "\u0217\010\110\017\u0220\050\134\051\042\054\107\056\013" +
    "\062\015\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\011\u0226\012\u0224" +
    "\051\042\063\053\064\115\071\070\102\u0118\107\u011b\122" +
    "\u0225\140\006\142\020\144\112\150\036\154\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\012\u0229\051\042\063\053\064\115" +
    "\071\070\102\u0118\107\u011b\122\u0225\140\006\142\020\144" +
    "\112\150\036\154\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\u022c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\005\316\007\311\010" +
    "\110\050\134\051\042\054\107\056\013\062\015\063\053" +
    "\064\115\071\070\101\064\102\123\103\113\107\030\120" +
    "\313\121\315\122\022\126\131\127\021\130\045\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\077\u01e9\144\u01e8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\063\240\064\115\066\u0240\067\254" +
    "\070\251\071\237\102\250\140\252\144\112\001\001\000" +
    "\004\116\u0241\001\001\000\004\117\u0245\001\001\000\056" +
    "\035\u0243\036\u0120\050\u0125\051\042\054\107\056\013\062" +
    "\u0124\063\053\064\115\071\070\101\064\102\123\107\030" +
    "\122\u0121\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\141\u0246\001\001\000\002\001\001\000" +
    "\024\063\240\064\115\066\u0248\067\254\070\251\071\237" +
    "\102\250\140\252\144\112\001\001\000\004\116\u0249\001" +
    "\001\000\002\001\001\000\052\050\134\051\042\054\107" +
    "\056\013\062\u024b\063\053\064\115\071\070\101\064\102" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\131\u024f\001\001\000\004" +
    "\107\u0262\001\001\000\004\132\u0250\001\001\000\002\001" +
    "\001\000\006\107\u01a5\133\u0252\001\001\000\002\001\001" +
    "\000\004\042\u0254\001\001\000\072\010\u0256\043\u01ab\050" +
    "\134\051\042\054\107\056\013\062\015\063\053\064\115" +
    "\071\070\101\064\102\123\105\u0258\107\030\111\u01ac\112" +
    "\u01b9\114\u01b7\115\u01b1\122\022\135\135\136\u01b4\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\050\001" +
    "\001\000\004\041\u025a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\054\366\055\u025f\102\364\153\370\001\001\000" +
    "\002\001\001\000\012\054\366\055\u0261\102\364\153\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\050" +
    "\134\051\042\054\107\056\013\062\u0264\063\053\064\115" +
    "\071\070\101\064\102\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\050" +
    "\001\001\000\002\001\001\000\060\005\u0268\010\110\025" +
    "\u0267\050\134\051\042\054\107\056\013\062\015\063\053" +
    "\064\115\071\070\101\064\102\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\050\001\001\000\004\006\u0269\001\001\000\002\001" +
    "\001\000\002\001\001\000\074\005\316\007\311\010\110" +
    "\050\134\051\042\054\107\056\013\062\015\063\053\064" +
    "\115\071\070\101\064\102\123\103\113\107\030\120\313" +
    "\121\315\122\022\126\131\127\021\130\045\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u026d\001\001\000\074\005\316\007\311\010\110\050\134" +
    "\051\042\054\107\056\013\062\015\063\053\064\115\071" +
    "\070\101\064\102\123\103\113\107\030\120\313\121\315" +
    "\122\022\126\131\127\021\130\045\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\107\u0271\001" +
    "\001\000\004\144\u0272\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0275\001\001\000\074\005\316\007" +
    "\311\010\110\050\134\051\042\054\107\056\013\062\015" +
    "\063\053\064\115\071\070\101\064\102\123\103\113\107" +
    "\030\120\313\121\315\122\022\126\131\127\021\130\045" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\050\001\001\000\010\123\u0278\124\u027a\125\u0279" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\125\u027b\001\001\000\002\001\001\000\004" +
    "\107\u027d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0281\001\001\000\074\005\316" +
    "\007\311\010\110\050\134\051\042\054\107\056\013\062" +
    "\015\063\053\064\115\071\070\101\064\102\123\103\113" +
    "\107\030\120\313\121\315\122\022\126\131\127\021\130" +
    "\045\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\077\u01e9\144\u01e8\001\001" +
    "\000\002\001\001\000\056\046\u028a\047\u0288\050\134\051" +
    "\042\054\107\056\013\062\u0289\063\053\064\115\071\070" +
    "\101\064\102\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\046\u028c\047\u0288\050\134\051\042\054\107\056\013" +
    "\062\u0289\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\056\046\u028e\047\u0288\050\134\051\042\054\107\056\013" +
    "\062\u0289\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\060\005\u0292\010\110\016\u0290\050\134\051\042\054\107" +
    "\056\013\062\015\063\053\064\115\071\070\101\064\102" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\050\001\001\000\002\001" +
    "\001\000\004\006\u0293\001\001\000\002\001\001\000\074" +
    "\005\316\007\311\010\110\050\134\051\042\054\107\056" +
    "\013\062\015\063\053\064\115\071\070\101\064\102\123" +
    "\103\113\107\030\120\313\121\315\122\022\126\131\127" +
    "\021\130\045\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\u0297\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\014\063\240\064\115\071\237\140\u011d\144\112\001\001" +
    "\000\002\001\001\000\032\051\042\063\053\064\115\071" +
    "\070\102\u0118\107\u011b\122\u029b\140\006\142\020\144\112" +
    "\150\036\154\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\050\134\051\042\054" +
    "\107\056\013\062\u02ac\063\053\064\115\071\070\074\u02a9" +
    "\075\u02aa\101\064\102\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\050" +
    "\001\001\000\002\001\001\000\004\060\u02b3\001\001\000" +
    "\034\051\042\063\053\064\115\071\070\102\u0118\106\u02b1" +
    "\107\u011b\122\u0127\140\006\142\020\144\112\150\036\154" +
    "\050\001\001\000\002\001\001\000\052\050\134\051\042" +
    "\054\107\056\013\062\u02af\063\053\064\115\071\070\101" +
    "\064\102\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\050\001\001\000" +
    "\034\051\042\063\053\064\115\071\070\102\u0118\106\u02b0" +
    "\107\u011b\122\u0127\140\006\142\020\144\112\150\036\154" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\134\051\042\054\107\056\013\062" +
    "\u02b5\063\053\064\115\071\070\101\064\102\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\050\001\001\000\002\001\001\000\034" +
    "\051\042\063\053\064\115\071\070\102\u0118\106\u02ba\107" +
    "\u011b\122\u0127\140\006\142\020\144\112\150\036\154\050" +
    "\001\001\000\002\001\001\000\052\050\134\051\042\054" +
    "\107\056\013\062\u02b8\063\053\064\115\071\070\101\064" +
    "\102\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\050\001\001\000\034" +
    "\051\042\063\053\064\115\071\070\102\u0118\106\u02b9\107" +
    "\u011b\122\u0127\140\006\142\020\144\112\150\036\154\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\051\042\063\053\064\115\071\070\102\u0118\107" +
    "\u011b\122\u02c1\135\u02c0\140\006\142\020\144\112\150\036" +
    "\154\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\134\051\042\054\107\056\013" +
    "\062\u02c3\063\053\064\115\071\070\101\064\102\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u02c7\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\035\u02c9\036\u0120\050\u0125\051" +
    "\042\054\107\056\013\062\u0124\063\053\064\115\071\070" +
    "\101\064\102\123\107\030\122\u0121\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PhpAstParser5$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PhpAstParser5$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PhpAstParser5$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;
		
		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}
	
	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
			((ReflectionCallExpression) property).setReceiver (dispatcher);
			dispatcher = property;
		} else if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher =  new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
		// System.err.print(message);
  		// if (info instanceof Symbol)
		//	if (((Symbol)info).left != -1)
		//		System.err.println(" at character " + ((Symbol)info).left + " of input");
		//	else System.err.println("");
	    // else 
	   	//	System.err.println("");
    }
    
    public void report_fatal_error(
    String   message, 
    Object   info)
    throws java.lang.Exception
    {
      /* stop parsing (not really necessary since we throw an exception, but) */
      done_parsing();

      /* use the normal error message reporting to put out the message */
      report_error(message, info);

      /* throw an exception */
     // throw new Exception("Can't recover from previous error(s)");
    }	
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PhpAstParser5$actions {
  private final PhpAstParser5 parser;

  /** Constructor */
  CUP$PhpAstParser5$actions(PhpAstParser5 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser5$do_action(
    int                        CUP$PhpAstParser5$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser5$parser,
    java.util.Stack            CUP$PhpAstParser5$stack,
    int                        CUP$PhpAstParser5$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser5$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser5$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = value; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("string_st",64, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = value; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("string_st",64, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("tracked_variable",98, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name); 
	RESULT = constant;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_constant",100, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("isset_variables",97, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("isset_variables",97, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList();
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList();
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft,numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft,stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference indexedVar = new ArrayVariableReference(startleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		VariableReference varName = (VariableReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // encaps_var ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // encaps_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("array_pair_list",58, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("array_pair_list",58, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // assignment_list_element ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // assignment_list_element ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("assignment_list",56, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("assignment_list",56, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",55, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(1);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",55, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable_name",54, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // variable_name ::= string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable_name",54, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // object_dim_list ::= variable_name 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = var; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("object_dim_list",53, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = varArray;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("object_dim_list",53, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = varArray;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("object_dim_list",53, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // object_property ::= variable_without_objects 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("object_property",52, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // object_property ::= object_dim_list 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("object_property",52, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = expr; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("dim_offset",51, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // dim_offset ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("dim_offset",51, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;	 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("compound_variable",50, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // compound_variable ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = var; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("compound_variable",50, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // reference_variable ::= compound_variable 
            {
              Expression RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression comp_var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // base_variable ::= static_member 
            {
              Expression RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		StaticFieldAccess staticFieldAccess = (StaticFieldAccess)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("base_variable",102, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("base_variable",102, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // base_variable ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("base_variable",102, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = var; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",106, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = var; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",106, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              StaticFieldAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_member",96, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable_without_objects",94, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable_without_objects",94, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // method_or_not ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("method_or_not",76, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	RESULT = paramsList;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("method_or_not",76, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              Expression RESULT =null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Expression result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			result = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			result = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable_property",95, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable_properties",77, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression variableProperty = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable_properties",77, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable",80, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	// get the last property 
	Expression firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			firstVarProperty = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			firstVarProperty = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;
	
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}

	RESULT = dispatcher;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable",80, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // rw_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = var; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("rw_variable",93, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // w_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = var; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("w_variable",68, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // r_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = var; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("r_variable",91, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = ewv; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr",48, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 RESULT = var; 
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr",48, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("possible_comma",46, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("possible_comma",46, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",45, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",45, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // scalar ::= string_st 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	TypeReference cname = new TypeReference(classNameleft, classNameright, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, cname, vname); 
	RESULT = constant;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_class_constant",105, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // static_scalar ::= string_st 
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar s = new Scalar(strleft, strright, str, Scalar.TYPE_STRING);
	RESULT = s;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // common_scalar ::= T_FILE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // common_scalar ::= T_LINE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	RESULT = paramsList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("ctor_arguments",41, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("ctor_arguments",41, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	RESULT = expr;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",104, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",103, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",103, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // dynamic_class_name_reference ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	 RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",101, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression firstVarProperty = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;

	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}	
	
	RESULT = dispatcher;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",101, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = className;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_name_reference",99, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // class_name_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	TypeReference classReference = new TypeReference(classNameleft, classNameright, className);
	RESULT = classReference;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_name_reference",99, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // fully_qualified_class_name ::= T_STRING 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	TypeReference name = new TypeReference(classNameleft, classNameright, className);
	RESULT = name;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",69, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters); 
	RESULT = functionInvocation;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, name, parameters); 
	RESULT = staticMethodInvocation;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, name, parameters); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = scalar; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = expr;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = expr; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation, varComment);
	RESULT = assignment;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar, varComment); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr, varComment); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",37, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",37, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = exprList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("for_expr",36, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("for_expr",36, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("echo_expr_list",35, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("echo_expr_list",35, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",71, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",71, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",70, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",70, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",70, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",70, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // member_modifier ::= T_FINAL 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("member_modifier",75, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // member_modifier ::= T_ABSTRACT 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("member_modifier",75, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // member_modifier ::= T_STATIC 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("member_modifier",75, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // member_modifier ::= T_PRIVATE 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("member_modifier",75, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // member_modifier ::= T_PROTECTED 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("member_modifier",75, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // member_modifier ::= T_PUBLIC 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("member_modifier",75, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PhpAstParser5.ModifierDocPair modifier = (PhpAstParser5.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",74, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PhpAstParser5.ModifierDocPair modifier = (PhpAstParser5.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",74, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // method_modifiers ::= non_empty_member_modifiers 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		PhpAstParser5.ModifierDocPair modifier = (PhpAstParser5.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("method_modifiers",72, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // method_modifiers ::= 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("method_modifiers",72, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // variable_modifiers ::= T_VAR 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPDocBlock var = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable_modifiers",92, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variable_modifiers ::= non_empty_member_modifiers 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		PhpAstParser5.ModifierDocPair modifier = (PhpAstParser5.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("variable_modifiers",92, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block block = new Block(startleft, endright, statementList);
	RESULT = block;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("method_body",73, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // method_body ::= T_SEMICOLON 
            {
              Block RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("method_body",73, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // class_statement ::= T_VAR_COMMENT 
            {
              List RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		


              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).right;
		PhpAstParser5.ModifierDocPair modifier = (PhpAstParser5.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(startleft, bodyright, functionNameleft, functionNameright, functionName, modifierValue, paramList, body, isReference, docBlock);
	List methodList = new LinkedList();
	methodList.add(methodDeclaration);
	RESULT = methodList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              List RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	List constList = new LinkedList();
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference)decl[0];
		Expression initializer = (Expression)decl[1];
		
		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock)decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		constList.add (new ClassConstantDeclaration(constant, initializer, start, end, docBlock));
	}
	RESULT = constList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		PhpAstParser5.ModifierDocPair modifier = (PhpAstParser5.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	List constList = new LinkedList();
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference)decl[0];
		Expression initializer = (Expression)decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		constList.add (new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifier.doc));
	}
	RESULT = constList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // class_statement_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_statement_list",32, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List classStatement = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	if (classStatement != null) {
		list.addAll(classStatement);
	}
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_statement_list",32, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment); 
	list.add(assignment);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // global_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("global_var_list",29, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("global_var_list",29, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);	
	RESULT = paramsList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",27, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",27, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	TypeReference reference = new TypeReference(arrayleft, arrayright, "array");
	RESULT = reference;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("optional_class_type",90, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // optional_class_type ::= T_STRING 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	TypeReference reference = new TypeReference(classNameleft, classNameright, className);
	RESULT = reference;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("optional_class_type",90, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // optional_class_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("optional_class_type",90, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",25, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",25, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("parameter_list",24, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("parameter_list",24, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("new_else_single",23, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("new_else_single",23, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = statement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("else_single",22, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("else_single",22, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
			
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("new_elseif_list",21, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("new_elseif_list",21, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("elseif_list",20, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("elseif_list",20, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = statement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("case_separator",18, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("case_separator",18, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("declare_list",15, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("declare_list",15, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("declare_statement",14, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = statement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("declare_statement",14, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("foreach_statement",13, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = statement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("foreach_statement",13, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("for_statement",12, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = statement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("for_statement",12, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	ReferenceExpression reference = new ReferenceExpression (startleft, varright, var);
	RESULT = reference;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("foreach_variable",11, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("foreach_variable",11, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",10, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",10, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("interface_list",89, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("interface_list",89, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("implements_list",88, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("implements_list",88, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("interface_extends_list",66, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("interface_extends_list",66, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = value;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("interface_entry",65, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = className;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("extends_from",87, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // extends_from ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("extends_from",87, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // class_entry_type ::= T_FINAL T_CLASS 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_entry_type",86, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_entry_type",86, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // class_entry_type ::= T_CLASS 
            {
              PhpAstParser5.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_entry_type",86, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // class_closure ::= unticked_statement 
            {
              Object RESULT =null;
		 System.out.println("error");
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_closure",67, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // class_closure ::= T_CURLY_CLOSE 
            {
              Object RESULT =null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_closure",67, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Iterator statementIt = statementList.iterator();
	while (statementIt.hasNext()) {
		Statement statement = (Statement)statementIt.next();
		if (statement.getKind() == Declaration.D_METHOD) {
			MethodDeclaration methodDeclaration = (MethodDeclaration)statement;
			methodDeclaration.setDeclaringTypeName(className);
		}
	}
	
	Block block = new Block(blockStartleft, blockEndright, statementList);
	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,blockEndright, classNameleft, classNameright, className, interfaces, block, start);
	RESULT = interfaceDeclaration;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",85, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).right;
		PhpAstParser5.ModifierDocPair modifier = (PhpAstParser5.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Iterator statementIt = statementList.iterator();
	while (statementIt.hasNext()) {
		Statement statement = (Statement)statementIt.next();
		if (statement.getKind() == Declaration.D_METHOD) {
			MethodDeclaration methodDeclaration = (MethodDeclaration)statement;
			methodDeclaration.setDeclaringTypeName(className);
		}
	}
	
	Block block = new Block(blockStartleft, blockEndright, statementList);
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, classNameleft, classNameright, modifier.modifier, className, superClass, interfaces, block, modifier.doc);
	RESULT = classDeclaration;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",85, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block block = new Block(blockStartleft, blockEndright, statementList);
	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, blockEndright, functionNameleft, functionNameright, functionName, Modifiers.AccDefault, paramList, block, isReference.booleanValue(), start);
	RESULT = functionDeclaration;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",84, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("is_reference",34, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("is_reference",34, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",79, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",78, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("use_filename",9, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("use_filename",9, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unset_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = var;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unset_variable",8, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unset_variables",7, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unset_variables",7, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("additional_catch",83, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",82, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",82, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("additional_catches",81, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	RESULT = list;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("additional_catches",81, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-12)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new EchoStatement(startleft, endright, exprList); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, expr); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-8)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-9)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-6)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	Block block = new Block(tokenleft, endright, statementList);
	RESULT = block;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-2)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	// TODO: var comment should be added as ast node

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inner_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-3)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)).value;
		RESULT = start_val;
              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.elementAt(CUP$PhpAstParser5$top-1)), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PhpAstParser5$parser.done_parsing();
          return CUP$PhpAstParser5$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser5$stack.peek()).value;
		
	PHPModuleDeclaration program = new PHPModuleDeclaration(statementListleft, statementListright, statementList);
	RESULT = program; 

              CUP$PhpAstParser5$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), ((java_cup.runtime.Symbol)CUP$PhpAstParser5$stack.peek()), RESULT);
            }
          return CUP$PhpAstParser5$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

