<project name="Automated Testing" default="all" basedir=".">

	<!--properties file containing the plugin directory name including version number-->
	<property file="test.properties" />

	<!-- urls and such from the build -->
	<property file="${basedir}/../../../build.cfg" />

	<!--default directory where test-eclipse will be installed-->
	<property name="install" value="${basedir}/target" />

	<!--name that can be added to report name to identify which platform tests results come from-->
	<property name="platform" value="" />

	<!-- The root of the eclipse installation -->
	<property name="eclipse-home" value="${install}/eclipse" />

	<!-- The root of the eclipse dropins folder -->
	<property name="dropins-home" value="${install}/eclipse/dropins" />

	<!-- The directory that will contain the xml and html results from the tests that are run -->
	<property name="results" value="${basedir}/results" />

	<target name="setup"
	        if="clean"
	        description="Reinstall the test Eclipse installation if specified by user">
		<delete dir="${install}" />
		<mkdir dir="${dropins-home}" />

		<!-- TODO: if your project requires more dependencies, add them here -->
		<echo message="Download, then unpack: Eclipse, EMF, DTP, DLTK, GEF, WTP ..." />
		<property name="common.releng.dir"
		          value="${basedir}/../../../org.eclipse.modeling.common.releng" />
		<property name="getTestDependencies.xml"
		          value="${common.releng.dir}/scripts/getTestDependencies.xml" />
		<ant target="getTestDependency"
		     antfile="${getTestDependencies.xml}"
		     dir="${common.releng.dir}">
			<property name="url" value="${eclipseURL}" />
			<property name="file" value="${eclipseFile}" />
			<property name="unpackDest" value="${install}" />
		</ant>
		<ant target="getTestDependency"
		     antfile="${getTestDependencies.xml}"
		     dir="${common.releng.dir}">
			<property name="url" value="${dtpURL}" />
			<property name="file" value="${dtpFile}" />
			<property name="unpackDest" value="${dropins-home}" />
		</ant>
		<ant target="getTestDependency"
		     antfile="${getTestDependencies.xml}"
		     dir="${common.releng.dir}">
			<property name="url" value="${dltkURL}" />
			<property name="file" value="${dltkFile}" />
			<property name="unpackDest" value="${dropins-home}" />
		</ant>
		<ant target="getTestDependency"
		     antfile="${getTestDependencies.xml}"
		     dir="${common.releng.dir}">
			<property name="url" value="${gefURL}" />
			<property name="file" value="${gefFile}" />
			<property name="unpackDest" value="${dropins-home}" />
		</ant>
		<ant target="getTestDependency"
		     antfile="${getTestDependencies.xml}"
		     dir="${common.releng.dir}">
			<property name="url" value="${wtpURL}" />
			<property name="file" value="${wtpFile}" />
			<property name="unpackDest" value="${dropins-home}" />
		</ant>

		<property name="dir" location="." />
		<echo message="Unpack SDK + JUnit Tests (${dir}/pdt-*.zip) ..." />
		<unzip dest="${dropins-home}" overwrite="true">
			<fileset dir="${dir}">
				<include name="**/pdt-*.zip" />
			</fileset>
		</unzip>

		<property name="testPluginDir"
		          value="${dropins-home}/eclipse/plugins/${testPlugin}" />
		<available file="${testPluginDir}.jar" property="testPluginIsJarred" />
		<antcall target="unpackTestPlugin" />
	</target>

	<target name="runtests"
	        depends="setup"
	        description="Runs ant on the test.xml for a specified plugin.  Requires a property value setting for testPlugin only if test.properties is not available.  The property testPlugin represents a directory name made up of the plugin id and plugin version.  This directory must contain a valid test.xml.">

		<echo message="Running ${testPluginDir}/test.xml ... " />
		<ant antfile="${testPluginDir}/test.xml" dir="${eclipse-home}" />
		<copy file="${eclipse-home}/${report}.xml"
		      tofile="${results}/xml/${report}_${platform}.xml" />
	</target>

	<target name="unpackTestPlugin"
	        description="Replace the test plugin jar with equivalent unpacked plugin folder"
	        if="testPluginIsJarred">
		<echo message="Unpack ${testPluginDir}.jar to ${testPluginDir} ... " />
		<move file="${testPluginDir}.jar" tofile="${testPluginDir}_.jar" />
		<unjar src="${testPluginDir}_.jar" dest="${testPluginDir}" />
		<delete file="${testPluginDir}_.jar" />
	</target>

	<target name="pdt"
	        description="Runs the org.eclipse.php.core.tests test.xml">
		<antcall target="runtests">
			<param name="testPlugin"
			       value="${org.eclipse.php.core.tests}" />
			<param name="report" value="org.eclipse.php.core.tests" />
		</antcall>

	</target>

	<target name="chkpii" description="Runs CHKPII tests">
		<!-- test if chkpii script exists before proceeding -->
		<property name="common.releng.dir"
		          value="${basedir}/../../../org.eclipse.modeling.common.releng" />
		<property name="chkpii.xml"
		          value="${common.releng.dir}/scripts/chkpii.xml" />
		<available file="${chkpii.xml}" property="chkpiiXMLAvailable" />
		<antcall target="runChkpii" />
	</target>

	<target name="runChkpii" if="chkpiiXMLAvailable">
		<ant target="chkpii" antfile="${chkpii.xml}" inheritall="true">
			<property name="zipPattern" value="pdt-*.zip" />
		</ant>
	</target>

	<target name="all">
		<antcall target="pdt" />
		<antcall target="chkpii" />
		<antcall target="genHtml" />
	</target>

	<target name="genHtml"
	        description="Generates HTML results with provided JUNIT.XSL provided">
		<style style="JUNIT.XSL"
		       basedir="${results}/xml"
		       destdir="${results}/html" />
	</target>
</project>
